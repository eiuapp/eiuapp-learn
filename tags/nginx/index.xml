<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nginx on Documentation for Hugo Learn Theme</title>
    <link>https://eiuapp.github.io/eiuapp-learn/tags/nginx.html</link>
    <description>Recent content in nginx on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 25 Jun 2018 14:13:09 +0800</lastBuildDate>
    
	<atom:link href="https://eiuapp.github.io/eiuapp-learn/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Servername</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-servername.html</link>
      <pubDate>Mon, 25 Jun 2018 14:13:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-servername.html</guid>
      <description>nginx中servername的作用
Env  os: ubuntu16 外网ip: 13.209.68.247 domain name: link.devs1.xsl.ph  Step 当配置了servername后，只能通过 servername 访问被代理URL
看配置
root@ip-172-31-21-164:/etc/nginx/sites-enabled# cat links server{ listen 80; server_name link.devs1.xsl.ph; client_max_body_size 80m; location /spider { proxy_pass http://127.0.0.1:9003/spider; proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; } } root@ip-172-31-21-164:/etc/nginx/sites-enabled# /etc/init.d/nginx restart [ ok ] Restarting nginx (via systemctl): nginx.service root@ip-172-31-21-164:/etc/nginx/sites-enabled#  请求
root@ip-172-31-21-164:/etc/nginx/sites-enabled# curl link.devs1.xsl.ph/spider/news/hello hello,null.server.port==9003spring.profiles.active==testspring.datasource.url==jdbc:mysql://localhost:3306/link?useUnicode=true&amp;amp;characterEncoding=utf-8 root@ip-172-31-21-164:/etc/nginx/sites-enabled#  但是通过其它都不行。127.0.0.1,localhost,外网IP13.209.68.247都不可以的。都会返回404错误。
root@ip-172-31-21-164:/etc/nginx/sites-enabled# curl 13.209.68.247/spider/news/hello &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body bgcolor=&amp;quot;white&amp;quot;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.</description>
    </item>
    
    <item>
      <title>Nginx Config Server_name</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-config-server_name.html</link>
      <pubDate>Tue, 12 Jun 2018 18:11:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-config-server_name.html</guid>
      <description>nginx 配合 godaddy 完成 3级域名
原理：godaddy, 配置3级域名解析，转到nginx配置中的 server_name
Env  os: ubuntu16 nginx: nginx/1.10.3 (Ubuntu) 2级域名: bitzone.space 3级域名: store1.bitzone.space godaddy  Step 配置nginx 在 nginx 的 sites-enabled 中配置
root@ip-172-31-28-68:~# cat sites-enabled/store1 server { listen 80; server_name store1.bitzone.space; client_max_body_size 80m; location / { index index.html; root /home/ubuntu/html/code_commit_vac_competition/APP; #root /home/dev/completition/code_commit_competition/code_commit_competition_food_blockChainCheck; } }  配置godaddy 打开相应地址(2级域名: bitzone.space)的DNS管理
增加
A	store1	52.78.79.111	600 秒  确认 浏览器访问http://store1.bitzone.space/index.html 就访问到了 http://52.78.79.111:80 , 根据nginx配置就知道， 拿到了 52.78.79.111:/home/ubuntu/html/code_commit_vac_competition/APP/index.html这里的资源</description>
    </item>
    
    <item>
      <title>Nginx Faq 2</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-2.html</link>
      <pubDate>Fri, 02 Mar 2018 15:04:12 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-2.html</guid>
      <description> nginx txt,json文件 中文乱码
nginx 中 txt,json文件 中文乱码 在 /etc/nginx/conf.d/default.conf 中找到 location / { ,然后加入
charset utf-8; charset_types text/html  如：
server { listen 8000; server_name localhost; #default_type &#39;text/html&#39;; #charset utf-8; #charset koi8-r; #access_log /var/log/nginx/log/host.access.log main; location / { charset utf-8; charset_types text/html application/json; add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;  </description>
    </item>
    
    <item>
      <title>Nginx Faq 1</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-1.html</link>
      <pubDate>Fri, 02 Mar 2018 15:03:32 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-1.html</guid>
      <description>nginx 跨域访问
 nginx 解决跨域访问的问题 跨域造成session丢失  nginx 解决跨域访问的问题。 https://michielkalkman.com/snippets/nginx-cors-open-configuration.html
http://enable-cors.org/server_nginx.html
 所有网页都实现跨域  把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中的 location / { 内
add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;   部分url（下以 /ok 为例） 请求实现跨域访问  把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中 的 location /ok { 内
# # Wide-open CORS config for nginx # location / { if ($request_method = &#39;OPTIONS&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; # # Om nom nom cookies # add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; # # Custom headers and headers various browsers *should* be OK with but aren&#39;t # add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; # # Tell client that this pre-flight info is valid for 20 days # add_header &#39;Access-Control-Max-Age&#39; 1728000; add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;; add_header &#39;Content-Length&#39; 0; return 204; } if ($request_method = &#39;POST&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; } if ($request_method = &#39;GET&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; } }  跨域造成session丢失 https://segmentfault.</description>
    </item>
    
    <item>
      <title>Nginx Seo</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-seo.html</link>
      <pubDate>Tue, 27 Feb 2018 11:08:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-seo.html</guid>
      <description> seo 优化去掉html 页面的后缀 .html ubuntu@VM-0-12-ubuntu:/etc/nginx/conf.d$ cat 8766.conf server { listen 8766; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/host.access.log main; # seo 优化去掉html 页面的后缀 .html if (!-f $request_filename){ set $rule_0 1$rule_0; } if ($rule_0 = &amp;quot;1&amp;quot;){ rewrite ^/([^\.]+)$ /$1.html last; } location / { root /home/ubuntu/registry/tomtsang-rootsongjc-cheatsheet/_site; index index.html index.htm; # proxy_pass http://127.0.0.1:4001; } ...  </description>
    </item>
    
  </channel>
</rss>