<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssh on Documentation for Hugo Learn Theme</title>
    <link>https://eiuapp.github.io/eiuapp-learn/tags/ssh.html</link>
    <description>Recent content in ssh on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 22 Jan 2019 00:00:00 -0800</lastBuildDate>
    
	<atom:link href="https://eiuapp.github.io/eiuapp-learn/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux 关闭SSH 连接用户</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-close-ssh-connection-user.html</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-close-ssh-connection-user.html</guid>
      <description>1.查明登陆端口；
$ who root pts/1 Apr 8 00:06 (172.29.0.29) root pts/2 Apr 8 04:15 (172.29.0.21)  2.通知该用户将要关闭他：
$ echo &amp;quot;I will close your connection&amp;quot; &amp;gt; /dev/pts/2  这样他的终端将显示该信息。
3.关闭用户连接
$ fuser -k /dev/pts/2  这个在某些命令，导致ssh后续无法操作时，我们就可以使用这个方式。
疑问：当有多个ssh 连接时，那怎么知道我们要kill 的是哪个 pts 呢？</description>
    </item>
    
    <item>
      <title>ssh登录时如何直接在参数中加入登录密码</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/sshpass-let-ssh-login-with-password.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/sshpass-let-ssh-login-with-password.html</guid>
      <description>sshpass: 用于非交互的ssh 密码验证
　ssh登陆不能在命令行中指定密码，也不能以shell中随处可见的，sshpass 的出现，解决了这一问题。它允许你用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取。
　办法找到了，现在先在自己机器上安装。
　对于debian/ubuntu系统来说，安装方式很简单：
sudo apt-get install sshpass  　对于其他系统来说，可以通过编译源码：
wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz tar xvzf sshpass-1.05.tar.gz ./configure make sudo make install  　./configure 后可以添加参数指定安装目录，比如：
./configure --prefix=/usr/local/Cellar/sshpass/1.05  　来把sshpass安装到自己喜欢的位置，如果没有这个参数，则安装到默认位置。
　安装好了后，输入sshpass来查看是否安装好了：
➜ ~ git:(master) ✗ sshpass -V sshpass 1.05 (C) 2006-2011 Lingnu Open Source Consulting Ltd. This program is free software, and can be distributed under the terms of the GPL See the COPYING file for more information.</description>
    </item>
    
    <item>
      <title>Ssh Login</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login.html</link>
      <pubDate>Thu, 24 May 2018 15:22:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login.html</guid>
      <description>faq 报错：Too many authentication failures
tom@tom-w10vbud16:~/ztom/bits/pem$ ssh -i vachain_competition.pem ubuntu@ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com Received disconnect from 13.125.197.97 port 22:2: Too many authentication failures Connection to ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com closed by remote host. Connection to ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com closed. tom@tom-w10vbud16:~/ztom/bits/pem$  If you are not using any ssh hosts configuration, you have to explicitly specify the correct key in the ssh command like so:
ssh -i some_id_rsa -o &#39;IdentitiesOnly yes&#39; them@there:/path/  Note: the &amp;lsquo;IdentitiesOnly yes&amp;rsquo; parameter needed to be between quotes.</description>
    </item>
    
    <item>
      <title>Ngrok Ssh</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-ssh.html</link>
      <pubDate>Mon, 23 Apr 2018 00:05:45 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-ssh.html</guid>
      <description>远程登录家里的Ubuntu电脑(命令行模式)
env 服务端  机器: 腾讯云主机一台 IP: 111.230.153.251 OS: ubuntu server 16.04.1
客户端 机器: 腾讯云主机一台
 IP: 192.168.31.106
 OS: ubuntu desktop 16.04.3
  step 服务端建立一个 ngrokd服务,开通 4445 tunnel 我这里写成一个服务了的.
ubuntu@VM-0-12-ubuntu:~$ cat /etc/systemd/system/ngrok-83-84-45.service [Unit] Description=ngrok After=network.target [Service] ExecStart=/home/ubuntu/ngrok/ngrok-e/ngrok/bin/ngrokd -tlsKey=/home/ubuntu/ngrok/ngrok-e/ngrok/server.key -tlsCrt=/home/ubuntu/ngrok/ngrok-e/ngrok/server.crt -domain=&amp;quot;hkshop.club&amp;quot; -httpAddr=&amp;quot;:8083&amp;quot; -httpsAddr=&amp;quot;:8084&amp;quot; -tunnelAddr=&amp;quot;:4445&amp;quot; [Install] WantedBy=multi-user.target ubuntu@VM-0-12-ubuntu:~$ ubuntu@VM-0-12-ubuntu:~$ sudo systemctl status ngrok-83-84-45.service ● ngrok-83-84-45.service - ngrok Loaded: loaded (/etc/systemd/system/ngrok-83-84-45.service; disabled; vendor preset: enabled) Active: active (running) since Sun 2018-04-22 09:05:30 CST; 24h ago Main PID: 20599 (ngrokd) Tasks: 5 Memory: 2.</description>
    </item>
    
    <item>
      <title>Mac上SSH-Key对应多个github账号</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-ssh-github.html</link>
      <pubDate>Sat, 07 Apr 2018 22:30:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-ssh-github.html</guid>
      <description>Mac 上SSH-Key对应多个github账号
当然, 也不单是github帐号, gitlab或者其它账号都是可以的哟&amp;hellip;
前言 因为最近在其他公司帮忙，而其公司用的是他们自己的git服务器，自己本公司又有自己的git服务器，然后自己还用github，造成三个git账号的都要ssh-key，而在网上一搜生成ssh-key的方法都是直接就给你弄全局了，然后肯定又会覆盖原有的ssh-key，所以查了一下关于同机器多账号的ssh-key配置，在此记录一下。
操作步骤 如果我们Mac上面已经有了ssh-key再创建ssh-key的话，需要给我们的ssh-key文件取不同的名字，默认是id_rsa，如果不重新起名的话，会把原有的给覆盖掉。
1.新建ssh-key&amp;amp;重新命名 //切换到ssh目录 cd ~/.ssh //新建ssh-key ssh-keygen -t rsa -C &amp;quot;mywork@email.com&amp;quot; //为新建的ssh-key重新命名 Enter file in which to save the key (/Users/bombvote-zql/.ssh/id_rsa):id_ras_bill_github  2.新ssh-key添加到ssh agent中 因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：
ssh-add ~/.ssh/id_ras_bill_github  3.配置 将不同账号的工程图服务器与ssh-key关联 #thub user(first@email.com) Host github1 HostName git.some.com/ User git IdentityFile /Users/bombvote-zql/.ssh/id_rsa # second user(second@email.com) # 建一个github别名，新建的帐号使用这个别名做克隆和更新 Host github2 HostName github.com User git IdentityFile /Users/bombvote-zql/.ssh/id_ras_bill_github  4.在git服务器上添加公钥 vim ~/.ssh/id_rsa_bill_github.pub  然后将内容复制添加到服务器账号里面 其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。这里将GitHub SSH仓库地址中的git@github.</description>
    </item>
    
  </channel>
</rss>