<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前言 on Documentation for Hugo Learn Theme</title>
    <link>https://eiuapp.github.io/eiuapp-learn/</link>
    <description>Recent content in 前言 on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 08 Jan 2019 21:07:13 +0100</lastBuildDate>
    
	<atom:link href="https://eiuapp.github.io/eiuapp-learn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker break ufw&#39;s rules in ubuntu - env1</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-break-ufw-rules-state-1.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-break-ufw-rules-state-1.html</guid>
      <description>docker break ufw&amp;rsquo;s rules in ubuntu - env1
env 当运行docker后
sudo docker run --detach \ --restart always \ --hostname 192.168.168.137 \ --publish 192.168.168.137:12443:443 --publish 192.168.168.137:80:80 --publish 192.168.168.137:22:22 \ --name gitlab-ce-11.9.1-2 \ --volume /srv/gitlab9.1/config:/etc/gitlab \ --volume /srv/gitlab9.1/logs:/var/log/gitlab \ --volume /srv/gitlab9.1/data:/var/opt/gitlab \ gitlab/gitlab-ce:11.9.1-ce.0  也会导致 整个局域网能访问到 80
sudo docker run --detach \ --restart always \ --hostname 192.168.168.137 \ --publish 127.0.0.1:12443:443 --publish 127.0.0.1:80:80 --publish 127.0.0.1:22:22 \ --name gitlab-ce-11.9.1-2 \ --volume /srv/gitlab9.1/config:/etc/gitlab \ --volume /srv/gitlab9.</description>
    </item>
    
    <item>
      <title>前言</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/_index.zh.html</link>
      <pubDate>Sat, 08 Sep 2018 21:07:13 +0100</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/_index.zh.html</guid>
      <description>内容介绍 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
Hugo以速度快著称，号称是世界上最快的网站生成框架。
The world’s fastest framework for building websites
访问方式 这是个人学习Hugo的笔记，请点击下面的链接阅读:
 在线阅读：hugo格式，界面清爽。托管于腾讯云香港节点，速度快，偶尔抽风 @github：源码托管于github，如有谬误或需讨论，请提issue，欢迎提交PR  版权申明 本笔记内容可以任意转载，但请注明来源并提供链接，请勿用于商业出版。</description>
    </item>
    
    <item>
      <title>最快入门 babun</title>
      <link>https://eiuapp.github.io/eiuapp-learn/babun/babun-quick-start.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/babun/babun-quick-start.html</guid>
      <description>https://www.hi-linux.com/posts/57246.html
最快入门 babun
什么是babun babun是windows上的一个第三方shell，在这个shell上面你可以使用几乎所有linux，unix上面的命令，他几乎可以取代windows的shell。用官方的题目说就是A Windows shell you will love!
babun的几个特点
使用babun无需管理员权限 先进的安装包管理器(类似于linux上面的apt-get或yum) 预先配置了Cygwin和很多插件 拥有256色的兼容控制台 HTTP(S)的代理支持 面向插件的体系结构 可以使用它来配置你的git 集成了oh-my-zsh 自动升级 支持shell编程，内置VIM等 Cygwin babun的核心包括一个预配置的Cygwin。cygwin是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。babun解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们。 包的管理： babun的包管理在shell输入：pact，这类似于：apt-get或yum，来非常方便的管理软件包，安装、升级、搜索和删除，让你省区很多麻烦，shell输入pact --help能够获得帮助信息。 shell babun的shell通过调整，已达到最佳的用户体验，babun有两个配置之后马上使用的shell(默认使用zsh)，babun的shell具有以下的特点 语法高亮 具有unix的工具 软件开发工具 git-语义提示 自定义脚本和别名 等等… Console babun支持HTTP代理，只需添加地址和HTTP代理服务器的凭据。babunrc文件所在文件夹执行源babunrc启用HTTP代理。目前还不支持SOCKS代理。 开发者工具 babun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下 编程语言(python,Perl, etc等) git(各种各样的别名调整) UNIX工具((grep, wget, curl, etc) vcs (svn, git) oh-my-zsh 自定义脚本(pbcopy, pbpaste, babun, etc)  babun官网链接：http://babun.github.io/
什么是cmder cmder是window下的多标签命令行工具，可以方便的新建cmd、cmd admin、powershell、powershell admin多种命令行，设置很多，功能强大。
安装 cmder安装 下载：http://cmder.net/
cmder是开箱即用的软件就不在详述了，具体使用可参考官网说明。
babun安装 下载：http://babun.github.io/
默认安装 下载完成之后解压babun，直接双击目录中install.bat脚本(需管理员权限)进行安装。几分钟之后自动安装完成，默认会被安装在%userprofile%\.babun目录下。
自定义安装位置 通过cmd命令行在执行install.bat时指定参数/t或/target指定安装的目录。</description>
    </item>
    
    <item>
      <title>docker break ufw&#39;s rules in ubuntu - env2</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-break-ufw-rules-state-2.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-break-ufw-rules-state-2.html</guid>
      <description>docker break ufw&amp;rsquo;s rules in ubuntu - env2
ufw 阻止了从docker容器到外部的网络连接
对我来说这是一个非常标准的设置，我有一台运行docker和ufw的ubuntu机器作为我的防火墙。 如果启用防火墙，则docker实例无法连接到外部
https://blog.36web.rocks/2016/07/08/docker-behind-ufw.html https://oomake.com/question/4955599
env 当运行docker后
docker 配置 ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/docker/daemon.json { &amp;quot;hosts&amp;quot;: [&amp;quot;tcp://0.0.0.0:2376&amp;quot;,&amp;quot;unix:///var/run/docker.sock&amp;quot;], &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://0d6wdn2y.mirror.aliyuncs.com&amp;quot;], &amp;quot;dns&amp;quot; : [&amp;quot;192.168.168.222&amp;quot;] } ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/default/docker # Docker Upstart and SysVinit configuration file # # THIS FILE DOES NOT APPLY TO SYSTEMD # # Please see the documentation for &amp;quot;systemd drop-ins&amp;quot;: # https://docs.docker.com/engine/admin/systemd/ # # Customize location of Docker binary (especially for development testing).</description>
    </item>
    
    <item>
      <title>babun 中 zsh tab 失效</title>
      <link>https://eiuapp.github.io/eiuapp-learn/babun/babun-faq.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/babun/babun-faq.html</guid>
      <description>babun 中 zsh tab 失效 https://github.com/babun/babun/issues/281
Try running rm -f ~/.zcompdump*; compinit and see if that fixes it.</description>
    </item>
    
    <item>
      <title>ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/</link>
      <pubDate>Thu, 20 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/</guid>
      <description>linux ubuntu</description>
    </item>
    
    <item>
      <title>资料</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/introduction/information.html</link>
      <pubDate>Sun, 09 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/introduction/information.html</guid>
      <description> 官方资料  Hugo官网 官方文档 官方主题 官方展示案例  社区资料  Hugo中文网站： 貌似有段时间没有更新了？  学习资料  Hogo handbook: 宋净超(Jimmy Song)同学整理的hugo使用资料 Hugo❤️ China User Group: 宋净超(Jimmy Song)同学组织，有个微信群可以申请加入  </description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/</guid>
      <description>linux ssh</description>
    </item>
    
    <item>
      <title>_index.zh安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/_index.zh.html</link>
      <pubDate>Mon, 10 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/_index.zh.html</guid>
      <description>准备工作 安装golang 安装hugo之前，先安装好golang。
目前新版本的hugo如0.54版本，需要golang最新的1.11版本支持。安装hugo前最好检查一下hugo对golang的版本要求。
安装 在Hugo Releases页面下载对应操作系统版本的安装包。
Linux安装 找到linux的安装包，对于 ubuntu 可以直接用 deb 文件：
 hugo_0.54_Linux-64bit.deb  deb文件直接安装即可。
sudo dpkg -i hugo_0.54_Linux-64bit.deb  Mac安装 mac 下安装最简单的方式是用brew命令
brew install hugo  也可以从下载页面下载到macos的安装包，解压后，将 hugo 可执行文件放在path路径下即可。
安装后设置 验证安装：
$ hugo version Hugo Static Site Generator v0.54.0-B1A82C61 linux/amd64 BuildDate: 2019-02-01T09:40:34Z  为了方便使用，增加hugo server 命令的 alias：
alias h=&amp;quot;hugo server --disableFastRender&amp;quot;  自动发布 以下是jenkins自动生成并发布到nginx的简单脚本：
sh update_academic.sh # clean cd /var/www/skyao/ # 删除所有文件和文件夹，但排除以&amp;quot;learning-&amp;quot;前缀开头的 rm -rf `ls | grep -v &amp;quot;learning-&amp;quot;` cd /var/lib/jenkins/workspace/skyao.</description>
    </item>
    
    <item>
      <title>index安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/</link>
      <pubDate>Mon, 10 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/</guid>
      <description>准备工作 安装golang 安装hugo之前，先安装好golang。
目前新版本的hugo如0.54版本，需要golang最新的1.11版本支持。安装hugo前最好检查一下hugo对golang的版本要求。
安装 在Hugo Releases页面下载对应操作系统版本的安装包。
Linux安装 找到linux的安装包，对于 ubuntu 可以直接用 deb 文件：
 hugo_0.54_Linux-64bit.deb  deb文件直接安装即可。
sudo dpkg -i hugo_0.54_Linux-64bit.deb  Mac安装 mac 下安装最简单的方式是用brew命令
brew install hugo  也可以从下载页面下载到macos的安装包，解压后，将 hugo 可执行文件放在path路径下即可。
安装后设置 验证安装：
$ hugo version Hugo Static Site Generator v0.54.0-B1A82C61 linux/amd64 BuildDate: 2019-02-01T09:40:34Z  为了方便使用，增加hugo server 命令的 alias：
alias h=&amp;quot;hugo server --disableFastRender&amp;quot;  自动发布 以下是jenkins自动生成并发布到nginx的简单脚本：
sh update_academic.sh # clean cd /var/www/skyao/ # 删除所有文件和文件夹，但排除以&amp;quot;learning-&amp;quot;前缀开头的 rm -rf `ls | grep -v &amp;quot;learning-&amp;quot;` cd /var/lib/jenkins/workspace/skyao.</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/quickstart.html</link>
      <pubDate>Mon, 10 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/quickstart.html</guid>
      <description>新建站点 hugo new side /path/tp/your/site  提示如下：
$ hugo new site learning-cilium Congratulations! Your new Hugo site is created in /home/sky/work/code/learning/learning-cilium. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command. 2. Perhaps you want to add some content. You can add single files with &amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.</description>
    </item>
    
    <item>
      <title>开启HTTPS</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/https.html</link>
      <pubDate>Mon, 10 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/https.html</guid>
      <description>参考文章：
 给博客加上HTTPS 在Ubuntu上获取Let’s Encrypt免费证书  由于我用的博客服务器是ubuntu 16.04，因此部分命令稍有不同。
生成证书 先安装工具：
sudo apt-get install letsencrypt  生成证书：
sudo letsencrypt certonly --webroot -w /var/www/skyao -d skyao.io  配置nginx 在/etc/nginx/sites-available下增加一个skyao.io.https站点文件，内容如下：
server { listen 443 ssl; server_name skyao.io www.skyao.io; root /var/www/skyao; index index.html; ssl on; ssl_certificate /etc/letsencrypt/live/skyao.io/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/skyao.io/privkey.pem; }  然后将http请求都自动转为https，修改原来的skyao.io配置文件：
server { listen 80; server_name skyao.io www.skyao.io; rewrite ^(.*)$ https://$host$1 permanent; }  重启nginx：
sudo service nginx restart  设置自动更新证书 由于Let&amp;rsquo;s Encrypt证书的有效期为90天，所有我们需要定期更新以避免证书过期，通常Let&amp;rsquo;s Encrypt会发邮件提醒的。</description>
    </item>
    
    <item>
      <title>搜索引擎优化</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/seo.html</link>
      <pubDate>Mon, 10 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/installation/seo.html</guid>
      <description> 为了让Hugo网站更好的被搜索引擎收录，需要进行搜索引擎优化（SEO）。
站点内容优化 修改配置 修改 hugo/config/_default 目录下的 params.toml 文件：
description = &amp;quot;敖小剑的个人技术博客网站，主要关注服务网格,serverless,kubernetes,微服务等云原生技术。&amp;quot;  修改模板 0.54 版本下基本做的很好了，不再修改。
添加页面信息 首先确保每个页面一定都要设置有 title，description，最好还有 keywords：
title: 前言 keywords: - hugo - 学习笔记 - hugo学习笔记 description : &amp;quot;介绍Hugo学习笔记的基本资料和访问方式。&amp;quot;  google搜索优化 提交给Google网站站长 打开 Google网站站长，点击 &amp;ldquo;SEARCH CONSOLE &amp;rdquo; 进入，然后添加资源，如https://skyao.io/learning-hugo/。会要求下载一个html文件如google571325××××.html做验证，将这个文件保存到hugo站点根目录下的static子目录，更新站点内容让google search console可以访问到进行验证即可。
进入资源页面，点&amp;rdquo;索引&amp;rdquo;下的&amp;rdquo;站点地图&amp;rdquo;，在&amp;rdquo;添加新的站点地图&amp;rdquo;处输入当前hugo站点的sitemap，这个文件hugo会默认生成，就在根路径下，如https://skyao.io/learning-hugo/sitemap.xml。
百度搜索优化 打开 百度搜索资源平台 ，点击 链接提交，然后点&amp;rdquo;添加站点&amp;rdquo;。同样可以用文件验证的方式来进行网站验证。
进入&amp;rdquo;数据引入&amp;rdquo;下的&amp;rdquo;链接提交&amp;rdquo;，再点 &amp;ldquo;自动提交&amp;rdquo; 下的 &amp;ldquo;sitemap&amp;rdquo;，在这里可以提交hugo网站的sitemap文件。注意百度不容许以子目录的方式提交子站点，和google不一样，我们的学习笔记 https://skyao.io/learning-hugo/ 就不能直接提交了，只能在提交sitemap文件时，提交多个sitemap文件。这样也能勉强让百度收录。
参考资料 有参考以下资料，特此鸣谢：
 搜索引擎优化（SEO）: 来自宋静超的hugo handbook Front-End-Checklist - Github SEO 查询 - 站长之家 SEO Meta Tags Meta Description 从Hexo迁移到Hugo-送漂亮的Hugo Theme主题 Hugo website SEO Hugo SEO Markup  </description>
    </item>
    
    <item>
      <title>SSH远程命令找不到环境变量</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-command-env-not-found-command.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-command-env-not-found-command.html</guid>
      <description>解决SSH远程执行命令找不到环境变量的问题
env  ssh  原理 https://blog.csdn.net/whitehack/article/details/51705889 (这个写得最好) https://www.jianshu.com/p/77ebeb27a2dc (简单) https://www.cnblogs.com/zhenyuyaodidiao/p/9287497.html
实践 在 ssh 服务端 找到 # If not running interactively, don&#39;t do anything , (在这一行下面,一般会有一句return之类的), 在这一行下面, 加入我们需要的环境变量. 但是, 也不能加多了, 加多了, scp 会失效.
如下面,就是加多了, 如果报错, 则导致 远程scp不了文件.
$ vi /home/lcnx/.bashrc # If not running interactively, don&#39;t do anything export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot; [ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/nvm.sh&amp;quot; # This loads nvm [ -s &amp;quot;$NVM_DIR/bash_completion&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/bash_completion&amp;quot; # This loads nvm bash_completion nvm use v11.</description>
    </item>
    
    <item>
      <title>tar</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/tar/</link>
      <pubDate>Tue, 28 Aug 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/tar/</guid>
      <description>linux tar</description>
    </item>
    
    <item>
      <title>linux tar: z: unknown function modifie 错误</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/tar/linux-tar-z-unknown-function-modifie.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/tar/linux-tar-z-unknown-function-modifie.html</guid>
      <description>linux tar: z: unknown function modifie 错误
转载 https://blog.csdn.net/syc001/article/details/72841916
某些linux版本的机器上使用 tar -zxvf *.tar.gz 命令解压.tar.gz时会出现
tar: z: unknown function modifier
错误。
而使用 tar -x *.tar.gz 会出现“tar: /dev/rmt/0: No such file or directory”错误。
这是因为该linux下的tar不支持z参数造成的。在这种情况下，可以把解压过程分为两步：
gzip -d yourfile.tar.gz。生成一个.tar文件。
tar -xvf yourfile.tar。解压文件。</description>
    </item>
    
    <item>
      <title>academic主题</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/academic.html</link>
      <pubDate>Sun, 09 Sep 2018 21:07:13 +0100</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/academic.html</guid>
      <description>主题介绍 academic是一个特别适合搭建内容相对比较丰富的网站的主题，如果我们hugo网站的内容不仅仅是博客，还有其他好几种样式的内容，那么academic会是一个很不错的选择。此外，academic主题简洁大方，也适合作为一个稍有规模的正式网站。
 官网介绍：https://themes.gohugo.io/academic/ 我用academic主题搭建的个人技术博客网站: https://skyao.io  准备工作 git仓库准备 以建立skyao.io这个网站为例，fork github项目：
 https://github.com/gcushen/hugo-academic: 修改仓库名为hugo-academic，这是自行订制的主题仓库，加cn后缀名以示区别。 https://github.com/sourcethemes/academic-kickstart: 修改仓库名为skyao.io，这是存放站点内容的仓库，为了方便起见，从官方的kickstart仓库开始改起，也方便未来保持更新。   备注：实际证明，academic的版本变化非常大，fork出来之后，再修改，到升级版本时到处是冲突，极易出错，很难正确处理。最后还是不得不从头来过：取到最新版本，然后手工将原有的改动重新再做一遍。
 kickstart 项目就没有必要再fork了，hugo-academic 还是需要 fork 的。
本地仓库准备 clone下来 kickstart 的仓库到本地：
# 本地准备好academic主题仓库 git clone https://github.com/skyao/hugo-academic.git # 直接获取kickstart的内容作为建站的基础 git clone https://github.com/sourcethemes/academic-kickstart.git skyao.io cd skyao.io/ rm -rf .git .gitmodules rm -r themes/academic/  修改.gitignore文件内容如下：
.* !.gitignore public/ themes/  修改update_academic.sh文件内容如下：
#!/bin/bash if [ ! -d &amp;quot;themes&amp;quot; ];then echo &amp;quot;No themes directory, create it&amp;quot; mkdir themes fi if [ -d &amp;quot;themes/academic&amp;quot; ];then echo &#39;Find directoy &amp;quot;themes/academic&amp;quot;, update by &amp;quot;git pull&amp;quot;&#39; cd themes/academic git pull cd .</description>
    </item>
    
    <item>
      <title>material-docs主题</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/material-docs.html</link>
      <pubDate>Sun, 09 Sep 2018 21:07:13 +0100</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/material-docs.html</guid>
      <description>主题介绍 material-docs官网：
http://themes.gohugo.io/theme/material-docs/
这个主题非常适合用于文档，左边的导航栏支持多级菜单，样式也简单美观，而且对移动设备支持很好。
我主要用它来做学习笔记，替代之前长期使用的gitbook（gitbook的问题主要是本地生成内容速度太慢，而gitbook官方网站访问速度又不好）。当前这个hugo学习笔记用的就是此主题。
准备工作 Fork并定制 material-docs的github仓库已经有很长时间没有更新，基本停留在两年前。从实践中看，有很多问题，对新的hugo版本的支持也很不好。
因此，采用fork的方式，建立自己的仓库：
https://github.com/skyao/hugo-material-docs
期间做了很多了更新：
 PR那边有很多已经被发现而且修订提交的问题，但是一直没有merge，我手工合并到自己的仓库 弃用google统计，改用百度统计，具体做法和 academic 中的做法是一样的 同样进行了本地加速，参照 academic 中的做法 修改了layout文件，主要是删除了版权申明，作者信息，下载修改为意见反馈，现在的版面非常的干净，没有任何多余的东西 汉化，没有做标准的i18n，因为是给自己定制，因此直接在layout文件中修改为中文。 修改了exampleSite的内容，删除原有的页面和图片，改为学习笔记的常见页面如介绍，安装等，方便后续使用 提供了简单的gitbook模版文件支持，可以生成一个简单带有文字说明和链接的页面，以便将原有gitbook用户导流到新的hugo笔记  使用方式 以新建一个学习笔记为例，详细描述需要的步骤和命令。
新建学习笔记  在github中新建仓库，名为 learning-cilium的Cilium学习笔记
 在本地新建一个hugo站点
hugo new site learning-cilium cd learning-cilium  下载更新主题的脚本并执行
wget https://raw.githubusercontent.com/skyao/hugo-material-docs/master/exampleSite/update_theme.sh chmod +x update_theme.sh ./update_theme.sh  命令完成之后，themes/hugo-material-docs目录下就有我们自己的主题文件内容。
 从exampleSite目录复制需要的站点初始化文件到新站点
cd themes/hugo-material-docs # 复制config.toml文件 cp config.toml ../../../config.toml # 复制content目录和static目录 cp -r content/ ../../../content/ cp -r static/ ../../../static/ # 复制gitignore文件 cp gitignore-example .</description>
    </item>
    
    <item>
      <title>主题列表</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/theme.html</link>
      <pubDate>Sun, 09 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/theme.html</guid>
      <description> 在这里列出一些个人觉得不错的Hugo主题。
门户类 文档类 可以看官网的分类：
https://themes.gohugo.io/tags/documentation/
列出一些觉得还不错的：
 DocuAPI
类slate风格，带code example列，特别适合API文档和配置文档。
https://themes.gohugo.io/docuapi/
看demo效果相当的不错！！
 Material Docs
非常漂亮的文档主题。
https://themes.gohugo.io/material-docs/
 docDock
中规中矩，但是感觉界面不够精致，没有Material Docs的惊艳感。
https://themes.gohugo.io/docdock/
 Bootie Docs
适合文档，尤其软件文档。
https://themes.gohugo.io/bootie-docs/
自带TOC功能。
 simpledoc
单页文档，适合Q&amp;amp;A之类。
https://themes.gohugo.io/hugo-simpledoc-theme/
 learn
类似gitbook。
https://themes.gohugo.io/hugo-theme-learn/
 Alabaster
类似gitbook，稍显呆板。
https://themes.gohugo.io/hugo-alabaster-theme/
 Kube
带blog/faq，适合用于小型项目。
https://themes.gohugo.io/kube/
  </description>
    </item>
    
    <item>
      <title>主题比较</title>
      <link>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/theme-compare.html</link>
      <pubDate>Sun, 09 Sep 2018 21:07:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/learn-hugo/theme/theme-compare.html</guid>
      <description>在这里列出一些个人觉得不错的Hugo主题。
门户类 文档类 可以看官网的分类：
https://themes.gohugo.io/tags/documentation/
列出一些觉得还不错的：
   主题\特性 TOC 评论 TAG SEARCH i18n Star Edit 总结     Learn Y   Y 原生 Y Y Y 类似gitbook   Beautiful Y   Y Y      Material Docs      Y N    DocuAPI        类slate风格，带code example列，特别适合API文档和配置文档。   Alabaster      Y     Bootie Docs Y 自带       自带TOC     DocuAPI</description>
    </item>
    
    <item>
      <title>health</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-health.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-health.html</guid>
      <description>健身前 热身  充分热身，如：拉伸身体各部位。 部分运动，请找好队友。如：卧推。  心态  告诉自己：自我感觉身体不适，请停止运动。 健康是一个长期的过程。  这里有多层意思，至少有：
 不要想着一天就能增长好多肌肉或减少好多脂肪，这不可能。 坚持（这个是世界上最难的事情）。 要以健康为中心。任何不以健康为中心的健身，都是伪健身。 尽量避免运动中受伤(这也是个很难的事情)。  健身中 增肌 大肌肉群为主 杠铃，哑铃, 卧推
 12次*4组模式 力竭*4组模式 单组能达50次，请进阶，加难度  呼吸  不可憋气。 出吐回吸。俯卧撑：下去，靠近地面，吐气；回来，靠近天空，吸气。 会有特殊情况，则有不同。  减脂 有氧运动为主  跑步是一个好方式。 心率的50-85% 持续不断20分钟  健身后 0-5分钟  慢走 放松体操 小动一下  不可以的事：
 不宜洗澡 不宜立即吸烟 不宜贪吃冷饮 不宜蹲坐 不宜吃饭  健身结束后应该调整呼吸节奏，进行一些低热量的活动，比如说慢走，做几节放松体操或者说是进行简单的深呼吸，促进四肢血液能够回流心脏，这样有利于我们还清欠下的“氧债”，能够加快恢复身体机能，消除疲劳。
5-20分钟  可坐可蹲了 小口多次喝水，不能喝多  不可以的事：
 不宜洗澡 不宜立即吸烟 不宜贪吃冷饮 不宜吃饭  20-30分钟  宜洗澡  30-60分钟  洗澡。优先泡澡，再次淋浴 进食。先吃碳水化合物，再蛋白类。  60-120分钟  休息  运动了，很累的，让身体停下来。</description>
    </item>
    
    <item>
      <title>gitbook（笔记）</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-gitbook.html</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-gitbook.html</guid>
      <description>已移至 gitbook-handbook 仓库
入门  https://www.jianshu.com/p/fa38ef97431d https://segmentfault.com/a/1190000011440899 https://www.jianshu.com/p/b0a11b9b8725 https://www.jianshu.com/p/09a1cac0a0d0  初步  http://www.ituring.com.cn/article/127744 http://www.chengweiyang.cn/gitbook/github-pages/README.html  进阶  https://github.com/zhangjikai/gitbook-use/  常见问题 Cannot find module &amp;lsquo;prismjs/components/prism-shell.js ➜ swift-docs git:(master) ✗ gitbook build ./ Failed to load prism syntax: shell { Error: Cannot find module &#39;prismjs/components/prism-shell.js&#39; at Function.Module._resolveFilename (internal/modules/cjs/loader.js:613:15) at Function.Module._load (internal/modules/cjs/loader.js:539:25) at Module.require (internal/modules/cjs/loader.js:667:17) at require (internal/modules/cjs/helpers.js:20:18) at requireSyntax (/Users/tomtsang/gitbook/swift-docs/node_modules/gitbook-plugin-prism/index.js:31:3) at Object.code (/Users/tomtsang/gitbook/swift-docs/node_modules/gitbook-plugin-prism/index.js:103:11) at Record.TemplateBlock.applyBlock (/Users/tomtsang/.gitbook/versions/3.2.3/lib/models/templateBlock.js:205:23) at /Users/tomtsang/.gitbook/versions/3.2.3/lib/output/getModifiers.js:56:33 at /Users/tomtsang/.gitbook/versions/3.2.3/lib/output/modifiers/highlightCode.js:47:24 at /Users/tomtsang/.</description>
    </item>
    
    <item>
      <title>nodejs 一定要通过 nvm安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-install.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-install.html</guid>
      <description>使用 nvm 管理不同版本的 node 与 npm
step 补充说明：Mac 下通过 brew install nvm 所安装的 nvm ，由于安装路径不同，无法正确启用。建议使用 brew uninstall nvm 卸载掉之后，通过本文的方案重新安装一次。
nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。
以下具体说下 Mac 系统中的安装与使用细节（Windows 系统仅供类比参考）。
一、卸载已安装到全局的 node/npm 如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中
 node 命令在 `/usr/local/bin/node` npm 命令在 `/usr/local/bin/npm` ，其实是 `/usr/local/lib/node_modules/npm/bin/npm-cli.js` 的软链接 全局 node_modules 目录在 `/usr/local/lib/node_modules/`  安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：
npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装 sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录 sudo rm /usr/local/bin/node #删除 node cd /usr/local/bin &amp;amp;&amp;amp; ls -l | grep &amp;quot;.</description>
    </item>
    
    <item>
      <title>eslint入门</title>
      <link>https://eiuapp.github.io/eiuapp-learn/eslint/eslint-install.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/eslint/eslint-install.html</guid>
      <description>安装 npm install -g eslint babel-eslint eslint-plugin-react eslint-config-airbnb  在安装的时候得注意一点，eslint与eslint-config-airbnb要么都执行全局安装，要么都本地安装，必须相同哟。
然后，把 https://github.com/airbnb/javascript/blob/master/linters/.eslintrc 下载到Project 中就可以了。
使用 配置完相关信息后，就可以切到项目目录内然后执行检测啦：
我们新建一个test.js进行检测
$ eslint test.js  JavaScript Style Guide 关于 JavaScript Style Guide 可以直接参考
 https://github.com/airbnb/javascript  react eslint 优先查看：
在React+Babel+Webpack环境中使用ESLint
 https://www.cnblogs.com/le0zh/p/5619350.html https://www.bbsmax.com/A/obzbX0j65E/  React-native ESLint &amp;amp; Airbnb 配置
 https://www.jianshu.com/p/1d66a10466d2  npm run lint 检查所有js文件 在根目录的 package.json文件下修改如下:
&amp;quot;scripts&amp;quot;: { &amp;quot;lint&amp;quot;: &amp;quot;eslint --ext .js ./src --fix&amp;quot; }  根目录下运行:
npm run lint  再webpack配置中使用eslint加载器 添加 到：webpack.</description>
    </item>
    
    <item>
      <title>tools</title>
      <link>https://eiuapp.github.io/eiuapp-learn/tools/tools.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tools/tools.html</guid>
      <description>What are the best  https://www.slant.co  Learn to code egghead 通过一些短小视频，学习一系列实用技术
 https://egghead.io/  github issue https://issuehunt.io/
babel https://babeljs.io/
https://babeljs.io/repl
https://bugout2.testin.cn/
FIGlet，是一种计算机程序，其生成各种字体的文本横幅，由由较小ASCII字符的集合构成的字母组成。</description>
    </item>
    
    <item>
      <title>初始化安装 taro-msparis</title>
      <link>https://eiuapp.github.io/eiuapp-learn/taro/taro-msparis-install.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/taro/taro-msparis-install.html</guid>
      <description>appjson [&amp;ldquo;tabBar&amp;rdquo;][&amp;ldquo;borderStyle&amp;rdquo;] be &amp;ldquo;white&amp;rdquo; or &amp;ldquo;black&amp;rdquo; dist/app.json中的 &amp;ldquo;tabBar&amp;rdquo;下的&amp;rdquo;borderStyle&amp;rdquo;要修改为： &amp;ldquo;black&amp;rdquo;
微信小程序报错request:fail url not in domain list 报错提示说请求的url不在域名列表里，应该是还没有配置服务器域名，可点击开发者工具右上角 详情-域名信息，看看是否配置了域名； 不过没有配置域名其实开发者工具也是不能发送请求的； 文档：https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html
然后，操作如下：
 开发者工具里面要勾选不校验，也就是下面这句前打上勾：  Does not verify valid domain names, web-view (business domain names), TLS versions and HTTPS certificates
 手机里面也要打开调试，也就是：  开发版小程序不是右上角有三个点点嘛，点击就能看到打开调试
这样就可以.</description>
    </item>
    
    <item>
      <title>saleor 设置 templates base</title>
      <link>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-conf-templates-base.html</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-conf-templates-base.html</guid>
      <description>安装完了 saleor ，下一步，自然就是修改一些我们自己的Logo，页脚之类的东西了。
页脚COPYRIGHT (saleor) ➜ saleor git:(master) ✗ grep &amp;quot;COPYRIGHT © 2009–2019 MIRUMEE SOFTWARE&amp;quot; -rn ./ ./templates/base.html:296: &amp;lt;div class=&amp;quot;col-8 footer__copy-text&amp;quot;&amp;gt;COPYRIGHT © 2009–2019 MIRUMEE SOFTWARE&amp;lt;/div&amp;gt; (saleor) ➜ saleor git:(master) ✗  把这里修改成我们自己的
(saleor) ➜ saleor git:(master) ✗ vi templates/base.html (saleor) ➜ saleor git:(master) ✗ grep &amp;quot;COPYRIGHT © 2009–2019 &amp;quot; -rn ./ ../../../templates/base.html:296: &amp;lt;div class=&amp;quot;col-8 footer__copy-text&amp;quot;&amp;gt;COPYRIGHT © 2009–2019 谦谦科技&amp;lt;/div&amp;gt; (saleor) ➜ images git:(master) ✗  页脚Logo 只要审查元素就知道，这个 LOGO是 SVG图像。
&amp;lt;div class=&amp;quot;col-4&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;{% url &#39;home&#39; %}&amp;quot; class=&amp;quot;footer__logo float-md-left&amp;quot;&amp;gt; &amp;lt;svg data-src=&amp;quot;{% static &amp;quot;images/logo-document.</description>
    </item>
    
    <item>
      <title>docker 安装 saleor</title>
      <link>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-customization-docker.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-customization-docker.html</guid>
      <description>https://docs.getsaleor.com/en/latest/customization/docker.html
安装后 完成步骤后的效果如下：
(saleor) ➜ saleor git:(master) ✗ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 202bd2594ad9 saleor_web &amp;quot;python manage.py ru…&amp;quot; About a minute ago Up 33 seconds 0.0.0.0:8000-&amp;gt;8000/tcp saleor_web_1 af1d1c556b35 saleor_celery &amp;quot;celery -A saleor wo…&amp;quot; About a minute ago Up 33 seconds 8000/tcp saleor_celery_1 aa067abbd302 postgres:latest &amp;quot;docker-entrypoint.s…&amp;quot; About a minute ago Up 34 seconds 0.0.0.0:5432-&amp;gt;5432/tcp saleor_db_1 dfb447947378 redis:latest &amp;quot;docker-entrypoint.s…&amp;quot; About a minute ago Up 33 seconds 0.</description>
    </item>
    
    <item>
      <title>pipenv install 报错</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/pipenv-install-failed.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/pipenv-install-failed.html</guid>
      <description>在某个项目中遇到了出错，如下：
(saleor) ➜ saleor git:(master) pipenv install --dev Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set PIPENV_IGNORE_VIRTUALENVS =1 to force pipenv to ignore that environment and create its own instead. You can set PIPENV_VERBOSITY=-1 to suppress this warning. Installing dependencies from Pipfile.lock (0c0b26)… An error occurred while installing yarl==1.3.0 ; python_version &amp;gt;= &#39;3.</description>
    </item>
    
    <item>
      <title>mac 上安装 sshpass</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/how-to-install-sshpass-on-mac.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/how-to-install-sshpass-on-mac.html</guid>
      <description> brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb  Ref  https://stackoverflow.com/questions/32255660/how-to-install-sshpass-on-mac fs  </description>
    </item>
    
    <item>
      <title>git中submodule子模块的添加、使用和删除</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-submodules-add-usage-delete.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-submodules-add-usage-delete.html</guid>
      <description>背景 项目中经常使用别人维护的模块，在git中使用子模块的功能能够大大提高开发效率。
使用子模块后，不必负责子模块的维护，只需要在必要的时候同步更新子模块即可。
本文主要讲解子模块相关的基础命令，详细使用请参考man page。
子模块的添加 添加子模块非常简单，命令如下：
git submodule add &amp;lt;url&amp;gt; &amp;lt;path&amp;gt;  其中，url为子模块的路径，path为该子模块存储的目录路径。
执行成功后，git status会看到项目中修改了.gitmodules，并增加了一个新文件（为刚刚添加的路径）
git diff &amp;ndash;cached查看修改内容可以看到增加了子模块，并且新文件下为子模块的提交hash摘要
git commit提交即完成子模块的添加
子模块的使用 克隆项目后，默认子模块目录下无任何内容。需要在项目根目录执行如下命令完成子模块的下载：
git submodule init git submodule update  或：
git submodule update --init --recursive  执行后，子模块目录下就有了源码，再执行相应的makefile即可。
子模块的更新 子模块的维护者提交了更新后，使用子模块的项目必须手动更新才能包含最新的提交。
在项目中，进入到子模块目录下，执行 git pull更新，查看git log查看相应提交。
完成后返回到项目目录，可以看到子模块有待提交的更新，使用git add，提交即可。
修改Submodule URL 修改某模块URL
 修改&amp;rsquo;.gitmodules&amp;rsquo;文件中对应模块的url属性; 使用`git submodule sync`命令，将新的URL更新到文件.git/config；  thinker-g@localhost: ~/app$ git submodule sync Synchronizing submodule url for &#39;gitmods/thinker_g/Helpers&#39; thinker-g@localhost: ~/app$ # 运行后可观察到&#39;.git/config&#39;中对应模块的url属性被更新 thinker-g@localhost: ~/app$ git commit -am &amp;quot;Update submodule url.</description>
    </item>
    
    <item>
      <title>tmux（笔记）</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-tmux.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-tmux.html</guid>
      <description> 基础 http://blog.jobbole.com/87584/
高效的结对编程 在Tmux 中使用 Tmate
在文本间快速移动光标，复制文本 将复制下来的文本发送到系统的剪贴板中
Select and copy text
调整 Tmux 以增强其同 Vim 的集成度 调整背景的配色方案
调整光标的形状
调整粘贴时的文本缩进
美化 Tmux 的状态栏 tmux-plugins https://github.com/tmux-plugins
查看version ➜ ~ git:(master) ✗ tmux -V tmux 2.1 ➜ ~ git:(master) ✗  滚屏 https://superuser.com/questions/209437/how-do-i-scroll-in-tmux
复制文字 https://superuser.com/questions/196060/selecting-text-in-tmux-copy-mode
Ref  https://zhuanlan.zhihu.com/p/33369297 https://github.com/search?q=tmux https://github.com/gpakosz/.tmux https://yq.aliyun.com/articles/44513 https://www.jianshu.com/p/ccac114c522e https://superuser.com/questions/209437/how-do-i-scroll-in-tmux https://www.jianshu.com/p/ccac114c522e http://os.51cto.com/art/201410/453671.htm http://os.51cto.com/art/201410/453671.htm  </description>
    </item>
    
    <item>
      <title>用户加入docker组</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/add-user-to-docker-group.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/add-user-to-docker-group.html</guid>
      <description> Docker 创建docker用户组，应用用户加入docker组
创建docker用户组 sudo groupadd docker  应用用户加入docker用户组 sudo usermod -aG docker ${USER}  重启docker服务 sudo systemctl restart docker  切换或者退出当前账户再从新登入 su root # 切换到root用户 su ${USER} # 再切换到原来的应用用户以上配置才生效  </description>
    </item>
    
    <item>
      <title>django-oscar(笔记)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-django-oscar.html</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-django-oscar.html</guid>
      <description>(oscar) ➜ django-oscar git:(master) make sandbox pip install -r requirements.txt Collecting Werkzeug==0.14.1 (from -r requirements.txt (line 4)) Downloading https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl (322kB) 100% |████████████████████████████████| 327kB 8.8MB/s Collecting django-debug-toolbar==1.11 (from -r requirements.txt (line 5)) Downloading https://files.pythonhosted.org/packages/01/9a/3db232bd15882d90d3c53de1f34ce0a522327849593c9198899713267cfe/django_debug_toolbar-1.11-py2.py3-none-any.whl (201kB) 100% |████████████████████████████████| 204kB 24.9MB/s Collecting django-extensions==2.1.4 (from -r requirements.txt (line 6)) Downloading https://files.pythonhosted.org/packages/e4/56/6a854a56732f7cb6a0393b8a32ae8a37b82b004e638b7b2f153b66733ce5/django_extensions-2.1.4-py2.py3-none-any.whl (217kB) 100% |████████████████████████████████| 225kB 4.8MB/s Collecting psycopg2&amp;lt;2.8,&amp;gt;=2.7 (from -r requirements.txt (line 7)) Downloading https://files.pythonhosted.org/packages/63/54/c039eb0f46f9a9406b59a638415c2012ad7be9b4b97bfddb1f48c280df3a/psycopg2-2.7.7.tar.gz (427kB) 100% |████████████████████████████████| 430kB 4.1MB/s Complete output from command python setup.</description>
    </item>
    
    <item>
      <title>linux 关闭SSH 连接用户</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-close-ssh-connection-user.html</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-close-ssh-connection-user.html</guid>
      <description>1.查明登陆端口；
$ who root pts/1 Apr 8 00:06 (172.29.0.29) root pts/2 Apr 8 04:15 (172.29.0.21)  2.通知该用户将要关闭他：
$ echo &amp;quot;I will close your connection&amp;quot; &amp;gt; /dev/pts/2  这样他的终端将显示该信息。
3.关闭用户连接
$ fuser -k /dev/pts/2  这个在某些命令，导致ssh后续无法操作时，我们就可以使用这个方式。
疑问：当有多个ssh 连接时，那怎么知道我们要kill 的是哪个 pts 呢？</description>
    </item>
    
    <item>
      <title>Can scp create a directory if it doesn&#39;t exist?</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/can-scp-create-a-directory-if-it-doesnt-exist.html</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/can-scp-create-a-directory-if-it-doesnt-exist.html</guid>
      <description>Can scp create a directory if it doesn&amp;rsquo;t exist?
As far as I know, scp itself cannot do that, no. However, you could just ssh to the target machine, create the directory and then copy. Something like:
ssh user@host &amp;quot;mkdir -p /target/path/&amp;quot; &amp;amp;&amp;amp; scp /path/to/source user@host:/target/path/  Note that if you are copying entire directories, the above is not needed. For example, to copy the directory ~/foo to the remote host, you could use the -r (recursive) flag:</description>
    </item>
    
    <item>
      <title>spacemacs(笔记)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-spacemacs.html</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-spacemacs.html</guid>
      <description>load-themes(SPC T s) org-cycle(TAB)
spacemacs打开org文件时默认没有自动折行。想要自动折行，则运行：
M-x spacemacs/toggle-visual-line-navigation-on 现在发现下面这个也可以自动折行：
M-x toggle-truncate-lines M-x toggle-truncate-lines-on M-x toggle-truncate-lines-off
最后，其实都是查看 SPC h d v truncate-lines 这个变量的值是t 还是 nil</description>
    </item>
    
    <item>
      <title>docker build时运行 COPY 时报no such file or directory 错误</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-build-copy-failed-no-such-file-or-directory.html</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-build-copy-failed-no-such-file-or-directory.html</guid>
      <description>env Expected behavior COPY command to copy a file from local to image
Actual behavior doing a simple COPY command in Dockerfile is throwing this error when the file is in a folder (not same level as Dockerfile file)
Description
I have a Dockerfile that has the line:
COPY MyAgSourceAPI/conf/php/testsql.php var/www
But it causes the error:
COPY failed: stat /var/lib/docker/tmp/docker-builder918577595/MyAgSourceAPI/conf/php/testsql.php: no such file or directory
step 有一些解决方案在 https://github.com/docker/for-mac/issues/1922 提出来。</description>
    </item>
    
    <item>
      <title>using-django中的queries</title>
      <link>https://eiuapp.github.io/eiuapp-learn/django/djangoprojectcom-using-django-queries.html</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/django/djangoprojectcom-using-django-queries.html</guid>
      <description>本文是对 https://docs.djangoproject.com/zh-hans/2.1/topics/db/queries/ 这一小节的说明</description>
    </item>
    
    <item>
      <title>vmware workstation pro 安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-workstation-pro-install.html</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-workstation-pro-install.html</guid>
      <description> Vmware安装提示在关闭以下进程 之前，无法进行安装的解决办法
如图，如果真的通过任务管理器关闭了VMware.exe的话，安装程序也就关闭了，后来才发现这个VMware.exe和VMware的主程序重名了，把安装程序改名为其他的就行了，比如VMware-install.exe
安装最后一步是输入 激活密钥，请支持正版。
Ref  https://blog.csdn.net/u011666411/article/details/85998068 https://blog.csdn.net/aZhengjava520/article/details/81087847  </description>
    </item>
    
    <item>
      <title>在vmware workstation pro 中给ubuntu增加新分区</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vmware/ubuntu-vmware-workstation-pro-new-partition.html</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vmware/ubuntu-vmware-workstation-pro-new-partition.html</guid>
      <description>env 在 vmware workstation pro 中安装的ubuntu server已经把20G的硬盘已经按默认的方式分区，且已经是把20G硬盘全占用。 此时，如果用 fdisk /dev/sda 然后 n 来新建分区的时候，会报出 no sector available 的错误。
这个时候，有2个思路。
 把原来的 sector和硬盘空间 释放出来，然后，新建立分区 把硬盘空间加大（不是另增加一块硬盘），然后，重新规划分区  step 思路1，本来是寄希望于 gpart 和 gparted 命令（通过 apt install 安装）的，但是，发现，文章已失效，-s -t 等命令的效果与原理明显不对了，所以思路1，中断。
思路2，操作成功。下面就只介绍思路2.
关虚拟机，打开，点击，设置/硬盘/扩展容量，增加10G到30G, 然后，磁盘整理，一下，开机。
这个时候，fdisk -l 可以看到 sector 已经增加了。
但是通过 n 后，并不能选择 l, 只能选择 p，且分配的大小，不超过1个G,明显不是我们想要的。
这个时候，我直接把 原有的 1,2,5 三个分区的 2，5直接删除（d）,然后再 n, 这个时候，就可以分出我们想要的分区了。 最后我的效果是 1,2,5,6 其中6分区占用了新增磁盘的 8 GB .</description>
    </item>
    
    <item>
      <title>eshell 中 没有完全加载 .zshrc 中的配置</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/eshell-zshrc-cannot-ok.html</link>
      <pubDate>Sat, 22 Dec 2018 09:44:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/eshell-zshrc-cannot-ok.html</guid>
      <description>Env 下面是终端上 zsh 的输出：
➜ ~ cat /etc/shells # List of acceptable shells for chpass(1). # Ftpd will not allow users to connect who are not using # one of these shells. /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh ➜ ~ echo $SHELL /bin/zsh ➜ ~ which js-beautify /usr/local/bin/js-beautify ➜ ~  下面是emacs中 eshell(`SPC &amp;lsquo;`开启)的输出：
Welcome to the Emacs shell ~/org:master*? λ echo /etc/shells /etc/shells ~/org:master*? λ cat /etc/shells # List of acceptable shells for chpass(1).</description>
    </item>
    
    <item>
      <title>Shell(Bash)中如何判断是否存在某个命令</title>
      <link>https://eiuapp.github.io/eiuapp-learn/shell/how-to-check-if-a-program-exists-from-a-bash-script.html</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/shell/how-to-check-if-a-program-exists-from-a-bash-script.html</guid>
      <description>在编写bash时，如果要判断某条命令是否存在，应该如何写呢？ 下面以 foo 代表某个命令（如：wget）. 我尝试了如下的写法，
which foo &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [ $? == 0 ]; then echo &amp;quot;exist&amp;quot; else echo &amp;quot;dose not exist&amp;quot; fi  但是： 最好避免使用 which，做为一个外部的工具，并不一定存在，在发行版之间也会有区别，有的系统的 which 命令不会设置有效的 exit status，存在一定的不确定性。
Bash 有提供一些内建命令如 hash、type、command 也能达到要求。
$ command -v foo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed. Aborting.&amp;quot;; exit 1; } $ type foo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed.</description>
    </item>
    
    <item>
      <title>python面试准备roadmap</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-interview-roadmap.html</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-interview-roadmap.html</guid>
      <description>step1 https://www.cnblogs.com/Vito2008/p/5044251.html
#!/Users/tomtsang/.virtualenvs/quant-py3/bin/python # -*- coding:utf-8 -*- # Author: zengyunlong # 补充缺失的代码 def print_directory_contents(sPath): &amp;quot;&amp;quot;&amp;quot; 这个函数接受文件夹的名称作为输入参数， 返回该文件夹中文件的路径， 以及其包含文件夹中文件的路径。 &amp;quot;&amp;quot;&amp;quot; import os for sChild in os.listdir(sPath): sChildPath = os.path.join(sPath , sChild) if os.path.isdir(sChildPath): print_directory_contents(sChildPath) else: print(sChildPath) print(&amp;quot;this is before if __name__:%s&amp;quot;%__name__) if __name__==&#39;__main__&#39;: print(&amp;quot;this is after if __name__:%s&amp;quot;%__name__) print(print_directory_contents(&amp;quot;.&amp;quot;))  TODO step2 https://www.cnblogs.com/goodhacker/p/3366618.html
TODO step3 https://blog.csdn.net/weixin%5F41666747/article/details/79942847</description>
    </item>
    
    <item>
      <title>docker login failure,  unauthorized: incorrect username or password</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-login-faq.html</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-login-faq.html</guid>
      <description>报错中出现类似“unauthorized: incorrect username or password”的话。
➜ saleor git:(master) docker-compose run web python3 manage.py migrate Pulling db (library/postgres:latest)... latest: Pulling from library/postgres a5a6f2f73cd8: Already exists e50fbea8af5a: Pull complete 73b4855ad326: Pull complete ERROR: Get https://registry-1.docker.io/v2/library/postgres/manifests/latest: unauthorized: incorrect username or password ➜ saleor git:(master)  重新使用 docker.com 中的用户名登陆，而不是邮箱登陆。
➜ saleor git:(master) docker logout Removing login credentials for https://index.docker.io/v1/ ➜ saleor git:(master) docker login Login with your Docker ID to push and pull images from Docker Hub.</description>
    </item>
    
    <item>
      <title>golang channel</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang-channel-learning-a.html</link>
      <pubDate>Mon, 03 Dec 2018 21:33:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang-channel-learning-a.html</guid>
      <description>goroutine 首先我们来看线程,在golang里面也叫goroutine
在读这篇文章之前，我们需要了解一下并发与并行。golang的线程是一种并发机制，而不是并行。它们之间的区别大家可以上网搜一下，网上有很多的介绍。
下面我们先来看一个例子吧
package main import ( &amp;quot;fmt&amp;quot; ) func main() { go fmt.Println(&amp;quot;1&amp;quot;) fmt.Println(&amp;quot;2&amp;quot;) }  在golang里面，使用go这个关键字，后面再跟上一个函数就可以创建一个线程。后面的这个函数可以是已经写好的函数，也可以是一个匿名函数
package main import ( &amp;quot;fmt&amp;quot; ) func main() { var i = 3 go func(a int) { fmt.Println(a) fmt.Println(&amp;quot;1&amp;quot;) }(i) fmt.Println(&amp;quot;2&amp;quot;) }  上面的代码就创建了一个匿名函数，并且还传入了一个参数i，下面括号里的i是实参，a是形参。
那么上面的代码能按照我们预想的打印1、2、3吗？告诉你们吧，不能，程序只能打印出2。下面我把正确的代码贴出来吧
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { var i = 3 go func(a int) { fmt.Println(a) fmt.Println(&amp;quot;1&amp;quot;) }(i) fmt.Println(&amp;quot;2&amp;quot;) time.Sleep(1 * time.Second) }  我只是在最后加了一行让主线程休眠一秒的代码，程序就会依次打印出2、3、1。</description>
    </item>
    
    <item>
      <title>my works</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/works.html</link>
      <pubDate>Sat, 01 Dec 2018 15:04:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/works.html</guid>
      <description> blog https://b.qqbb.app blog handbook https://book.qqmm.app cheatsheets https://c.eiu.app stock https://s.qqbb.app 论坛 http://www.hkshop.club:4567  </description>
    </item>
    
    <item>
      <title>devops ideas</title>
      <link>https://eiuapp.github.io/eiuapp-learn/devops/devops-ideas.html</link>
      <pubDate>Sat, 01 Dec 2018 08:50:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/devops/devops-ideas.html</guid>
      <description>windows 防止电脑被远程控制 https://jingyan.baidu.com/article/a948d65159fc890a2dcd2ea8.html
对外开放端口 对外开放的端口的机器，随时都有被攻击，被挂掉的风险。
所以，对外开放的端口的机器，必须只提供单一的对外服务，即使挂掉了，也没有关系。
尽可能使用docker吧。</description>
    </item>
    
    <item>
      <title>kids code</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/kids-code.html</link>
      <pubDate>Sat, 01 Dec 2018 08:37:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/kids-code.html</guid>
      <description>少儿编程网
http://www.kidscode.cn/</description>
    </item>
    
    <item>
      <title>ceph 安装，基于ubuntu, intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-intro.html</link>
      <pubDate>Fri, 30 Nov 2018 17:34:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-intro.html</guid>
      <description>Contents:
 README Preflight Storage Cluster Quick Start Block Device Quick Start Filesystem Quick Start Object Storage Quick Start  </description>
    </item>
    
    <item>
      <title>ceph 安装，基于ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu.html</link>
      <pubDate>Fri, 30 Nov 2018 17:26:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu.html</guid>
      <description>本次安装，完全按照 官方文档 进行。
env 192.168.31.115 cephadmin 这个是admin节点 192.168.31.114 mon1 192.168.31.113 cephfsn2 192.168.31.173 cephfsn3  step 1 这里的配置注意点如下：
ceph-admin 节点： 安装时， with a stable Ceph release (e.g., luminous.) ，安装 luminous 或以上版本。
cephu@cephadmin:~/my-cluster$ sudo cat /etc/apt/sources.list.d/ceph.list deb https://download.ceph.com/debian-luminous/ xenial main cephu@cephadmin:~/my-cluster$  配置 ~/.ssh/config 方便后续安装
cephu@cephadmin:~/my-cluster$ cat ~/.ssh/config Host node0 Hostname cephadmin User cephu Host node1 Hostname mon1 User cephu Host node2 Hostname cephfsn2 User cephu Host node3 Hostname cephfsn3 User cephu cephu@cephadmin:~/my-cluster$  所有节点： cephu@cephadmin:~/my-cluster$ cat /etc/hosts 127.</description>
    </item>
    
    <item>
      <title>ceph 安装 intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-intro.html</link>
      <pubDate>Fri, 30 Nov 2018 17:13:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-intro.html</guid>
      <description>Contents:
 install-by-docker install.FAQ install-by-ubuntu/index  </description>
    </item>
    
    <item>
      <title>ceph intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-intro.html</link>
      <pubDate>Fri, 30 Nov 2018 09:31:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-intro.html</guid>
      <description>Contents:
 cephfs/index install  </description>
    </item>
    
    <item>
      <title>centos更新内核</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos-update-kernel.html</link>
      <pubDate>Fri, 30 Nov 2018 09:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos-update-kernel.html</guid>
      <description>https://linux.cn/article-8310-1.html</description>
    </item>
    
    <item>
      <title>set apt source</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-desktop-set-apt-source.html</link>
      <pubDate>Thu, 29 Nov 2018 17:39:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-desktop-set-apt-source.html</guid>
      <description>https://github.com/vnpy/vnpy/wiki/Ubuntu%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85</description>
    </item>
    
    <item>
      <title>jd.com从openstack转到kubernetes</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/jd-kubernetes-openstack.html</link>
      <pubDate>Thu, 29 Nov 2018 12:17:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/jd-kubernetes-openstack.html</guid>
      <description>http://www.infoq.com/cn/news/2017/03/jd-kubernetes-openstack
http://blog.kubernetes.io/2017/02/inside-jd-com-shift-to-kubernetes-from-openstack.html</description>
    </item>
    
    <item>
      <title>web框架</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/web-framework-benchmarks.html</link>
      <pubDate>Thu, 29 Nov 2018 12:02:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/web-framework-benchmarks.html</guid>
      <description>一个超级好的 Web Framewosrk Benchmarks
http://www.techempower.com/whatwedo.html
http://www.techempower.com/benchmarks/
http://www.techempower.com/benchmarks/#section=data-r14&amp;amp;hw=ph&amp;amp;test=update
这里面才是真正的压力测试结果。里面可以看到 市面上 最全的:
 web 架构方案， 数据库， 程序语言language，
的表现。
  </description>
    </item>
    
    <item>
      <title>ubuntu intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-intro.html</link>
      <pubDate>Thu, 29 Nov 2018 11:07:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-intro.html</guid>
      <description>Contents:
 update-kernel/index how-to-install-certificates-for-command-line ubuntu-desktop/index  </description>
    </item>
    
    <item>
      <title>kubernetes 使用 nfs 存储</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-nfs-yaml.html</link>
      <pubDate>Sun, 25 Nov 2018 18:11:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-nfs-yaml.html</guid>
      <description>test-claim.yaml root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/StatefulSet-Basics/v# cat test-claim.yaml kind: PersistentVolumeClaim apiVersion: v1 metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &amp;quot;managed-nfs-storage&amp;quot; spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi  class.yaml root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/StatefulSet-Basics/v# cat class.yaml apiVersion: storage.k8s.io/v1beta1 kind: StorageClass metadata: name: managed-nfs-storage provisioner: fuseim.pri/ifs # or choose another name, must match deployment&#39;s env PROVISIONER_NAME&#39;  deployment.yaml root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/StatefulSet-Basics/v# cat deployment.yaml kind: Deployment apiVersion: extensions/v1beta1 metadata: name: nfs-client-provisioner spec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: nfs-client-provisioner spec: containers: - name: nfs-client-provisioner image: quay.</description>
    </item>
    
    <item>
      <title>kubernetes cephfs intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-intro.html</link>
      <pubDate>Sun, 25 Nov 2018 17:31:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-intro.html</guid>
      <description>REAEME cephfs-stateful cephfs-k8s-make-by-go-get cephfs-k8s-deployment-faq cephfs-k8s-yaml cephfs-k8s-make cephfs-k8s-faq</description>
    </item>
    
    <item>
      <title>kubernetes storage</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-storage-practise.html</link>
      <pubDate>Sun, 25 Nov 2018 17:19:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-storage-practise.html</guid>
      <description>nfs 环境：192.168.31.232
成功
cephfs http://tonybai.com/2017/05/08/mount-cephfs-acrossing-nodes-in-kubernetes-cluster/
成功
ceph rbd Glusterfs rook 存储 http://dockone.io/article/2156</description>
    </item>
    
    <item>
      <title>更新kubeadm clusters 从v1.7.3至v1.8.3</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-clusters-upgrade-from-v173-to-v183.html</link>
      <pubDate>Sun, 25 Nov 2018 17:05:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-clusters-upgrade-from-v173-to-v183.html</guid>
      <description>Upgrading kubeadm clusters from 1.7 to 1.8
https://kubernetes.io/docs/tasks/administer-cluster/kubeadm-upgrade-1-8/
env 192.168.31.120 km, master 192.168.31.119 kn1 192.168.31.118 kn2  下载 kubeadm  https://dl.k8s.io/release/v1.8.2/bin/linux/amd64/kubeadm
 root@km:~# sudo chmod a+rx /usr/bin/kubeadm root@km:~# kubeadm version kubeadm version: &amp;amp;version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;8&amp;quot;, GitVersion:&amp;quot;v1.8.2&amp;quot;, GitCommit:&amp;quot;bdaeafa71f6c7c04636251031f93464384d54963&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2017-10-24T19:38:10Z&amp;quot;, GoVersion:&amp;quot;go1.8.3&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;} root@km:~#  上传 root@km:~# kubeadm config upload from-file --config ./admin.conf unable to decode config from &amp;quot;./admin.conf&amp;quot; [no kind &amp;quot;Config&amp;quot; is registered for version &amp;quot;v1&amp;quot;]  不是这样的 conf 文件呀。</description>
    </item>
    
    <item>
      <title>kubeadm-kubelet-cni</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-faq-kubelet-cni.html</link>
      <pubDate>Sun, 25 Nov 2018 13:34:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-faq-kubelet-cni.html</guid>
      <description>问题1 kubelet 没有初始化 cni 现场 root@km:~# cat k8.export.sh sudo cp /etc/kubernetes/admin.conf $HOME/ sudo chown $(id -u):$(id -g) $HOME/admin.conf export KUBECONFIG=$HOME/admin.conf root@km:~# export KUBECONFIG=$HOME/admin.conf root@km:~# k get nodes NAME STATUS ROLES AGE VERSION km NotReady master 18h v1.8.4 kn1 Ready &amp;lt;none&amp;gt; 29s v1.8.4 kn2 Ready &amp;lt;none&amp;gt; 29s v1.8.4  出错了。
descibe root@km:~# k describe node km Name: km Roles: master Labels: beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux kubernetes.io/hostname=km node-role.kubernetes.io/master= Annotations: node.alpha.kubernetes.io/ttl=0 volumes.kubernetes.io/controller-managed-attach-detach=true Taints: node-role.kubernetes.io/master:NoSchedule CreationTimestamp: Tue, 21 Nov 2017 17:36:14 +0800 Conditions: Type Status LastHeartbeatTime LastTransitionTime Reason Message ---- ------ ----------------- ------------------ ------ ------- OutOfDisk False Wed, 22 Nov 2017 11:58:45 +0800 Tue, 21 Nov 2017 17:36:14 +0800 KubeletHasSufficientDisk kubelet has sufficient disk space available MemoryPressure False Wed, 22 Nov 2017 11:58:45 +0800 Tue, 21 Nov 2017 17:36:14 +0800 KubeletHasSufficientMemory kubelet has sufficient memory available DiskPressure False Wed, 22 Nov 2017 11:58:45 +0800 Tue, 21 Nov 2017 17:36:14 +0800 KubeletHasNoDiskPressure kubelet has no disk pressure Ready False Wed, 22 Nov 2017 11:58:45 +0800 Tue, 21 Nov 2017 17:36:14 +0800 KubeletNotReady runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized Addresses: InternalIP: 192.</description>
    </item>
    
    <item>
      <title>Shell获取某目录下所有文件夹的名称</title>
      <link>https://eiuapp.github.io/eiuapp-learn/shell/shell-get-dir-name.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/shell/shell-get-dir-name.html</guid>
      <description>方法一  #!/bin/bash dir=$(ls -l D:/temp/ |awk &#39;/^d/ {print $NF}&#39;) for i in $dir do echo $i done   方法二  #!/bin/bash for dir in $(ls D:/tmep/) do [ -d $dir ] &amp;amp;&amp;amp; echo $dir done   方法三  #!/bin/bash ls -l D:/temp/ |awk &#39;/^d/ {print $NF}&#39; ## 其实同方法一，直接就可以显示不用for循环   方法四  #!/bin/bash ls -l |awk &#39;/^d/ {print $NF}&#39; ## get file *.rst name ls -l *.</description>
    </item>
    
    <item>
      <title>docker registry</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry.html</guid>
      <description>docker registry
 在 192.168.31.240 ， 10.10.12.17 中建立了 registry 输入用户zimug，密码zimug_password  192.168.31.171 client
root 用户
sudo mkdir -p /etc/docker/certs.d/reg.jlch.com:5000 sudo echo 192.168.31.240 reg.jlch.com &amp;gt;&amp;gt; /etc/hosts sudo scp -r tom@192.168.31.240:/home/tom/registry/certs/registry.crt /etc/docker/certs.d/reg.jlch.com:5000  root@k-m:/home/jlch# docker login reg.jlch.com:5000 Username: zimug Password: Login Succeeded root@k-m:/home/jlch# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ceph/daemon latest dc9781d1d530 20 hours ago 983MB hello-world latest 1815c82652c0 4 months ago 1.84kB root@k-m:/home/jlch# docker tag ceph/daemon reg.jlch.com:5000/ceph/daemon:latest root@k-m:/home/jlch# docker push reg.</description>
    </item>
    
    <item>
      <title>k8s安装系列</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-install-intro.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-install-intro.html</guid>
      <description>env  kubeadm: v1.8.4 os: ubuntu 16.04  step kubernetes-before-install kubeadm-init-before-v1.8.3 kubeadm-install-ubuntu-v1.8.4 kubeadm-join upgrade-v1.8.3-failure-install-v1.8.3 kubeadm-install-v1.8.3 kubeadm-init-use-local-image kubeadm-build delete-node kubeadm-install-FAQ</description>
    </item>
    
    <item>
      <title>kubernetes系列</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes.html</guid>
      <description>Contents:
install/index upgrade/index storage cephfs/index nfs-k8s source</description>
    </item>
    
    <item>
      <title>ubuntu16.04升级内核至 4.10 以上</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu16-update-kernel.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu16-update-kernel.html</guid>
      <description>ubuntu16.04 update-kernel env 192.168.31.118 192.168.31.119  step 浏览器打开 http://kernel.ubuntu.com/~kernel-ppa/mainline/
找到适合的 内核版本（这时v4.12), 进入，
找到合适的内核文件(linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb)
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb  然后安装就可以了。</description>
    </item>
    
    <item>
      <title>ubuntu中安装docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-ubuntu.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-ubuntu.html</guid>
      <description>root@km:~# sudo apt-get update ... Ign:56 http://cn.archive.ubuntu.com/ubuntu xenial-backports/multiverse Translation-en_US Fetched 3,967 kB in 37min 32s (1,761 B/s) Reading package lists... Done W: The repository &#39;http://cn.archive.ubuntu.com/ubuntu xenial-updates Release&#39; does not have a Release file. N: Data from such a repository can&#39;t be authenticated and is therefore potentially dangerous to use. N: See apt-secure(8) manpage for repository creation and user configuration details. W: The repository &#39;http://cn.archive.ubuntu.com/ubuntu xenial-backports Release&#39; does not have a Release file.</description>
    </item>
    
    <item>
      <title>go-tour-zh离线安装(本地安装)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/go-tour-zh-local-install.html</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/go-tour-zh-local-install.html</guid>
      <description>中文文档 最近尝试学习golang，在某个网站（真忘了）上发现gotour是一款灰常叼的教程&amp;amp;指南，之后搜索发现有前辈给出了本地安装离线gotour的方法，但实际安装过程中发现一些问题：
1.通过go get bitbucket.org/mikespook/go-tour-zh/gotour 命令安装时报错，提示missing Mercurial command，原来是先需要安装Mercurial；
➜ bitbucket git:(master) ✗ go get bitbucket.org/mikespook/go-tour-zh/gotour go: missing Mercurial command. See https://golang.org/s/gogetcmd package bitbucket.org/mikespook/go-tour-zh/gotour: exec: &amp;quot;hg&amp;quot;: executable file not found in $PATH ➜ bitbucket git:(master) ✗ brew install mercurial Updating Homebrew... ==&amp;gt; Downloading https://homebrew.bintray.com/bottles/mercurial-4.8.mojave.bottle.tar.gz ######################################################################## 100.0% ==&amp;gt; Pouring mercurial-4.8.mojave.bottle.tar.gz ==&amp;gt; Caveats Bash completion has been installed to: /usr/local/etc/bash_completion.d zsh completions have been installed to: /usr/local/share/zsh/site-functions ==&amp;gt; Summary 🍺 /usr/local/Cellar/mercurial/4.8: 618 files, 9.</description>
    </item>
    
    <item>
      <title>在mac zsh下，ls只显示文件名</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-zsh-list-file-name-only.html</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-zsh-list-file-name-only.html</guid>
      <description>ls只显示文件名
$ ls -a1  </description>
    </item>
    
    <item>
      <title>yasnippet-setup</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/yasnippet.html</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/yasnippet.html</guid>
      <description> 功能  可以实现各种代码模板，包括注释模板。 可以参考emacs自带的yasnippet文档。命令是：c-h f yas-minor-mode 可以利用emacs的elisp代码，实现功能命令输出。  You can also include lisp code in your template. For example, you might want to have a date stamp. Here’s a example that insert user’s email address and datestamp.
`user-mail-address` `(current-time-string)`
直接看完下文就可以基本了解了：
在Spacemacs中为Yasnippet添加自定义snippet
Ref  https://blog.csdn.net/u011729865/article/details/53240101 在Spacemacs中为Yasnippet添加自定义snippet https://github.com/joaotavora/yasnippet http://joaotavora.github.io/yasnippet/  </description>
    </item>
    
    <item>
      <title>spacemacs key binding</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-key-binding.html</link>
      <pubDate>Fri, 16 Nov 2018 00:20:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-key-binding.html</guid>
      <description>Table  | Key | Function | 中文解释 | 其它 | |&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;| | SPC t n | linum-mode | 显示行号 | | | SPC j l | goto-line | 跳转到行号 | | | C-c &amp;gt; | python-indent-region | 代码块右移 | python leyer | | C-c &amp;lt; | python-indent-region | 代码块左移 | python leyer |
有一些网址已经帮我们总结了很多的快捷键，罗列在这里：
https://blog.csdn.net/u011729865/article/details/52793134</description>
    </item>
    
    <item>
      <title>配置公私钥别名</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-multi-ssh-keys.html</link>
      <pubDate>Tue, 13 Nov 2018 22:10:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-multi-ssh-keys.html</guid>
      <description>配置公私钥别名 私钥权限不是600 ➜ tom-finsoftinfo git:(master) ✗ ssh-add id_rsa_finsoftinfo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0644 for &#39;id_rsa_finsoftinfo&#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. ➜ tom-finsoftinfo git:(master) ✗  看提示，就知道是权限不对了。修改为600，就可以了。
➜ tom-finsoftinfo git:(master) ✗ l total 16K drwxr-xr-x 6 tomtsang 192 Nov 13 22:56 . drwx--x--x 7 tomtsang 224 Oct 15 11:20 .</description>
    </item>
    
    <item>
      <title>linux sed 批量替换字符串</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/sed-string-replace.html</link>
      <pubDate>Mon, 12 Nov 2018 19:11:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/sed-string-replace.html</guid>
      <description>Linux下批量替换多个文件中的字符串的简单方法。
用sed命令可以批量替换多个文件中的字符串 命令如下：
sed -i &amp;quot;s/原字符串/新字符串/g&amp;quot; `grep 原字符串 -rl 所在目录`  例如：我要把 charset=gb2312 替换为 charset=UTF-8，执行命令：
sed -i &amp;quot;s/charset=gb2312/charset=UTF-8/g&amp;quot; `grep charset=gb2312 -rl /www`  即可。
解释一下：
-i 表示inplace edit，就地修改文件
-r 表示搜索子目录
-l 表示输出匹配的文件名
这个命令组合很强大，要注意备份文件。
关于 sed 的更多说明：  替换  sed &#39;y/1234567890/ABCDEFGHIJ/&#39; test_sed  test_sed的内容是：
1234567890 2345678901 3456789012 4567890123  执行后，test_sed的内容是：
ABCDEFGHIJ BCDEFGHIJA CDEFGHIJAB DEFGHIJABC  注意变换关系是按两个list的位置对应变换
 替换每行所有匹配  sed &amp;rsquo;s/01/Ab/g&amp;rsquo; test_sed
1234567890
23456789Ab
3456789Ab2
456789Ab23
注意：第一行的0，1没有分别替换为A,b
删除：d命令 $ sed &#39;2d&#39; example  删除example文件的第二行。</description>
    </item>
    
    <item>
      <title>vi撤销与恢复撤销</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vim/vim-redo.html</link>
      <pubDate>Mon, 12 Nov 2018 18:31:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vim/vim-redo.html</guid>
      <description> Step 在vi中按u可以撤销一次操作
 u 撤销上一步的操作 Ctrl+r 恢复上一步被撤销的操作  注意： 如果你输入“u”两次，你的文本恢复原样，那应该是你的Vim被配置在Vi兼容模式了。 重做 如果你撤销得太多，你可以输入CTRL-R（redo）回退前一个命令。换句话说，它撤销一个撤销。 要看执行的例子，输入CTRL-R两次。字符A和它后面的空格就出现了： young intelligent turtle
 有一个特殊版本的撤销命令：“U”（行撤销）。  行撤销命令撤销所有在前一个编辑行 上的操作。 输入这些命令两次取消前一个“U”： A very intelligent turtle
 xxxx 删除very  A intelligent turtle
 xxxxxx 删除turtle  A intelligent
 用“U”恢复行  A very intelligent turtle
 用“u”撤销“U”  A intelligent
 “U”命令自己改变自己，“u”命令撤销操作，CTRL-R命令重做操作。这有点乱，但不用  担心，用“u”和CTRL-R命令你可以切换到任何状态。
Ref  https://blog.csdn.net/xiongzhengxiang/article/details/7206691  </description>
    </item>
    
    <item>
      <title>关于 hugo, easy-hugo, ox-hugo, spacemacs 集成相关的问题</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/easy-hugo-and-ox-hugo-qa.html</link>
      <pubDate>Mon, 12 Nov 2018 10:20:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/easy-hugo-and-ox-hugo-qa.html</guid>
      <description>ox-hugo，easy-hugo, spacemacs的集成 ox-hugo 写文档 这里，在写文档的时候，配置好就可以了,无需修改 spacemacs的配置。
具体的配置，见 ox-hugo-example-2.org, aa.org, ox-hugo-example-1.org
导出至easy-hugo的content/xxx文件夹中 这一步，可以被 auto-save 函数替换了。
C-c C-e H H
easy-hugo preview C-c e p
用 easy-hugo preview 有时会因为缓存问题，而失真哟 当时有一个 pages/about.md 文件导致的失真。在右上角的Menu中始终存在。
解决方式，清缓存。
EXPORT_HUGO_SECTION 失效 当 content 下，没有pages文件夹时，在 *.org 的
:EXPORT_HUGO_SECTION: pages  会失效，且，.md 文件会在 easy-hugo 的配置项 easy-hugo-postdir（我这里设置的是 content/posts/）下 .
同时有 .org 和 .md 文件，.org 有效，.md 失效 当 content/posts/ 下同时有 .org 和 .md 文件，则 .org 文件有效，.md 失效</description>
    </item>
    
    <item>
      <title>使用hugo的jane主题时，categories 书写不规范</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-jane-transmitter-from-beautifulhugo.html</link>
      <pubDate>Thu, 04 Oct 2018 11:23:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-jane-transmitter-from-beautifulhugo.html</guid>
      <description>categories 不是列表 ➜ tomtsang-rootsongjc-hugo git:(master) ✗ hugo server Building sites … ERROR 2018/11/26 01:07:40 Error while rendering &amp;quot;page&amp;quot; in &amp;quot;posts/&amp;quot;: template: _default/single.html:11:5: executing &amp;quot;_default/single.html&amp;quot; at &amp;lt;partial &amp;quot;head.html&amp;quot; ...&amp;gt;: error calling partial: template: partials/head.html:28:16: executing &amp;quot;partials/head.html&amp;quot; at &amp;lt;index ($.Site.Data.a...&amp;gt;: error calling index: value has type []string; should be string ERROR 2018/11/26 01:07:40 Error while rendering &amp;quot;page&amp;quot; in &amp;quot;post/&amp;quot;: template: post/single.html:14:21: executing &amp;quot;content&amp;quot; at &amp;lt;.&amp;gt;: range can&#39;t iterate over cloud-native ERROR 2018/11/26 01:07:40 in .</description>
    </item>
    
    <item>
      <title>hugo-server-faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-server-faq.html</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-server-faq.html</guid>
      <description> Error building site: EOF ➜ tomtsang-rootsongjc-hugo git:(master) ✗ hugo server Building sites … ERROR 2018/11/17 15:50:31 EOF for org/aaaa.org Total in 108 ms Error: Error building site: EOF ➜ tomtsang-rootsongjc-hugo git:(master) ✗  其实这个时候，查看一下 org/aaaa.org文件，没有内容，所以，删除了就可以 hugo server了的。
➜ tomtsang-rootsongjc-hugo git:(master) ✗ cat content/org/aaaa.org #+TITLE: aaaa #+DATE: 2018-11-16T23:38:13+08:00 #+PUBLISHDATE: 2018-11-16T23:38:13+08:00 #+DRAFT: nil #+TAGS: nil, nil #+DESCRIPTION: Short description ➜ tomtsang-rootsongjc-hugo git:(master) ✗ rm -rf ./content/org ➜ tomtsang-rootsongjc-hugo git:(master) ✗  </description>
    </item>
    
    <item>
      <title>saleor 测试（笔记）</title>
      <link>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-customization-tests.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-customization-tests.html</guid>
      <description>https://docs.getsaleor.com/en/latest/customization/tests.html
(saleor) ➜ saleor git:(master) pipenv install --dev Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set PIPENV_IGNORE_VIRTUALENVS =1 to force pipenv to ignore that environment and create its own instead. You can set PIPENV_VERBOSITY=-1 to suppress this warning. Installing dependencies from Pipfile.lock (0c0b26)… An error occurred while installing yarl==1.3.0 ; python_version &amp;gt;= &#39;3.</description>
    </item>
    
    <item>
      <title>tmuxinator（笔记）</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-tmuxinator.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-tmuxinator.html</guid>
      <description>tmux进阶之tmuxinator
在Tmuxinator中配置layout https://blog.suisuijiang.com/tmux-course-terminal-manage/
我们可能会需要指定窗格的排班规则，tmuxinator支持设置tmux中的5种默认layout样式：
even-horizontal Panes are spread out evenly from left to right across the window. even-vertical Panes are spread evenly from top to bottom. main-horizontal A large (main) pane is shown at the top of the window and the remaining panes are spread from left to right in the leftover space at the bottom. Use the main-pane-height window option to specify the height of the top pane. main-vertical Similar to main-horizontal but the large pane is placed on the left and the others spread from top to bottom along the right.</description>
    </item>
    
    <item>
      <title>docker-compose安装后报&#34;specify DOCKER_HOST&#34;错误</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-compose-installed-then-error-specify-DOCKER_HOST.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-compose-installed-then-error-specify-DOCKER_HOST.html</guid>
      <description> 按照官网 https://docs.docker.com/compose/install/ 安装完 docker-compose 后，要重 新进入一下用户(比如切换为root，再次切换为user)，配置才生效。
否则会报出下面的错误：
ERROR: Couldn’t connect to Docker daemon at http+docker://localunixsocket - is it running? If it’s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.  Ref  https://blog.csdn.net/xiojing825/article/details/79494408  </description>
    </item>
    
    <item>
      <title>linux 软连接 不能加/号</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-ln-s-make-soft-link.html</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-ln-s-make-soft-link.html</guid>
      <description> 对某个目录创建符号连接
[root@A home]# ln -s /home/kk /home/abc
此命令表示在/home目录下创建一个链接到/home/kk目录的名字为abc的符号连接。
注意：
 目标是一个软连接符号，所以不要带上 / 号。带上后，就是指把 软连接放在这个目录下  ➜ org git:(master) ✗ ln -s /home/ubuntu/tom/jinweilai/blog-jwl/org-jwl/org/ ~/org ➜ org git:(master) ✗ ln -s /home/ubuntu/tom/jinweilai/blog-jwl/org-jwl/org/ ~/org/ ➜ org git:(master) ✗ ls ~/org gtd.org org ➜ org git:(master) ✗  Ref  https://blog.csdn.net/liuzhenwen/article/details/8152764  </description>
    </item>
    
    <item>
      <title>vmware创建新VM（从其它机器中复制VM方式）</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-copy-vm-from-other-hosts.html</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-copy-vm-from-other-hosts.html</guid>
      <description>把vm的文件，放至一个合适的位置，然后，打开vmware workstation pro 点击 文件，打开， 选中相应文件就可以了。 当然，最好重命名一下。</description>
    </item>
    
    <item>
      <title>mac中python安装pyenv</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-pyenv-install-with-mac.html</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-pyenv-install-with-mac.html</guid>
      <description>pyenv 用于同时管理多个python版本，它可以为每个工作目录设定使用指定的py版本，在不同目录下使用不同的版本可以同时开发不同版本的项目。
Ubuntu安装 ➜ oscar git:(master) ✗ git clone https://github.com/pyenv/pyenv ~/.pyenv Cloning into &#39;/Users/tomtsang/.pyenv&#39;... remote: Enumerating objects: 63, done. remote: Counting objects: 100% (63/63), done. remote: Compressing objects: 100% (37/37), done. remote: Total 16547 (delta 24), reused 50 (delta 20), pack-reused 16484 Receiving objects: 100% (16547/16547), 3.24 MiB | 497.00 KiB/s, done. Resolving deltas: 100% (11211/11211), done. ➜ oscar git:(master) ✗ git clone https://github.com/pyenv/pyenv-virtualenv ~/.pyenv/plugins/pyenv-virtualenv Cloning into &#39;/Users/tomtsang/.pyenv/plugins/pyenv-virtualenv&#39;... remote: Enumerating objects: 2027, done.</description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu READM</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-readme.html</link>
      <pubDate>Fri, 30 Nov 2018 17:37:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-readme.html</guid>
      <description>本次安装，完全按照 官方文档 http://docs.ceph.com/docs/master/start/ 进行。
env 192.168.31.115 cephadmin # 这个是admin节点 192.168.31.114 mon1 # 存储节点 192.168.31.113 cephfsn2 # 存储节点 192.168.31.173 cephfsn3 # 存储节点 192.168.31.172 ceph-client # 客户端节点  上面这几个，可以全部写进 /etc/hosts 中。且各节点的 hostname 必须对应相同（否则安装容易出错）。</description>
    </item>
    
    <item>
      <title>ceph安装，基于docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-docker.html</link>
      <pubDate>Fri, 30 Nov 2018 17:15:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-docker.html</guid>
      <description>https://github.com/ceph/ceph-docker
m1 http://ceph.com/planet/%E5%9F%BA%E4%BA%8Edocker%E9%83%A8%E7%BD%B2ceph%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9docker-image/
http://www.sebastien-han.fr/blog/2015/06/23/bootstrap-your-ceph-cluster-in-docker/
http://www.topjishu.com/10455.html
http://ceph.com/planet/%E5%9F%BA%E4%BA%8Edocker-ui-%E9%85%8D%E7%BD%AEceph%E9%9B%86%E7%BE%A4/
m2 http://www.dockerinfo.net/445.html
m3 http://www.jianshu.com/p/f08ed7287416</description>
    </item>
    
    <item>
      <title>cephfs 安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/cephfs-install.html</link>
      <pubDate>Fri, 30 Nov 2018 09:36:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/cephfs-install.html</guid>
      <description> 环境： 192.168.31.115 192.168.31.114 192.168.31.113  line1 官网, 成功安装 我的安装设计是这样的：
admin-node, deploy-node(ceph-deploy)：192.168.31.115 cephfs5 mon.0: 192.168.31.114 cephfs4 osd.0: 192.168.31.113 cephfs3 osd.1: 192.168.31.115 cephfs5 mds.0: 192.168.31.113 cephfs3 mds.1: 192.168.31.114 cephfs4  还是要结合一下 https://linux.cn/article-8182-1.html
line2 http://tonybai.com/2017/05/08/mount-cephfs-acrossing-nodes-in-kubernetes-cluster/
over </description>
    </item>
    
    <item>
      <title>Ubuntu Desktop 环境安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-desktop-setup.html</link>
      <pubDate>Thu, 29 Nov 2018 17:50:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-desktop-setup.html</guid>
      <description>安装Ubuntu 全部安装流程：
推荐的Ubuntu环境：
 版本：Ubuntu 16.04 LTS 语言：简体中文 时区：Shanghai 硬件：64位，4G内存以上   引用官方安装教程：点击查看
 更新软件源 apt源
操作步骤如下：
进行上述操作之后，系统会花几分钟时间进行服务器速度的测试。测试完毕之后，点击『选择服务器』，后面根据提示输入密码和重新载入软件信息即可。
pip源
创建pip的配置文件，在终端中执行如下命令创建.pip文件夹
mkdir ~/.pip/  再执行如下命令创建pip.conf文件并编辑
vim ~/.pip/pip.conf  这时候会出现pip.conf的编辑窗口，按字母键a进入到编辑模式，这时候内容为空，并把如下内容输入到编辑框里面
[global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple  编辑完后保存并退出vim： ESC -&amp;gt; shift+; -&amp;gt; x -&amp;gt; Enter
安装Python 下载Anaconda2并安装，在终端中顺序执行下面3行命令
wget https://repo.continuum.io/archive/Anaconda2-4.0.0-Linux-x86_64.sh  chmod +x Anaconda2-4.0.0-Linux-x86_64.sh  ./Anaconda2-4.0.0-Linux-x86_64.sh  然后开始进行安装：
后面根据提示按回车或者输入yes即可，要注意一下在提示是否要在.bashrc文件中更新PATH变量时，一定要输入Yes：
安装完毕之后执行如下命令让bash的配置文件即时生效
source ~/.bashrc  执行完之后执行python命令进行验证，如果安装成功会出现 Anaconda 4.0.0 的字样：
由于vnpy最近对python3的兼容，需要安装future模块，ImportError: No module named &amp;lsquo;Queue&amp;rsquo;
pip install future  安装依赖项 执行如下两行命令分别安装应用软件和pip的库</description>
    </item>
    
    <item>
      <title>命令行下如何安装或者更新 CA.crt 文件</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/how-to-install-certificates-for-command-line-2.html</link>
      <pubDate>Thu, 29 Nov 2018 15:50:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/how-to-install-certificates-for-command-line-2.html</guid>
      <description>https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
env 192.168.31.120
step 尝试直接 apt install
jlch@km:~$ sudo apt install ./CA.crt [sudo] password for jlch: Reading package lists... Done E: Unsupported file ./CA.crt given on commandline jlch@km:~$  不行，那尝试一下
jlch@km:~$ dpkg-query -L ca-certificates /. /etc /etc/ssl /etc/ssl/certs /etc/ca-certificates /etc/ca-certificates/update.d /usr /usr/sbin /usr/sbin/update-ca-certificates /usr/share /usr/share/ca-certificates /usr/share/ca-certificates/mozilla ... # 看到了好多 mozilla 的证书相关信息呀。 /usr/share/ca-certificates/mozilla/DigiCert_Global_Root_CA.crt /usr/share/doc /usr/share/doc/ca-certificates /usr/share/doc/ca-certificates/examples ... # 好多 examples /usr/share/doc/ca-certificates/examples/ca-certificates-local/README /usr/share/doc/ca-certificates/changelog.gz /usr/share/doc/ca-certificates/copyright /usr/share/doc/ca-certificates/README.Debian /usr/share/doc/ca-certificates/NEWS.Debian.gz /usr/share/man /usr/share/man/man8 /usr/share/man/man8/update-ca-certificates.8.gz jlch@km:~$  那查一下 update-ca-certificates</description>
    </item>
    
    <item>
      <title>命令行下如何安装或者更新 CA.crt 文件</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/how-to-install-certificates-for-command-line-2.html</link>
      <pubDate>Thu, 29 Nov 2018 15:50:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/how-to-install-certificates-for-command-line-2.html</guid>
      <description>https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
env 192.168.31.120
step 尝试直接 apt install
jlch@km:~$ sudo apt install ./CA.crt [sudo] password for jlch: Reading package lists... Done E: Unsupported file ./CA.crt given on commandline jlch@km:~$  不行，那尝试一下
jlch@km:~$ dpkg-query -L ca-certificates /. /etc /etc/ssl /etc/ssl/certs /etc/ca-certificates /etc/ca-certificates/update.d /usr /usr/sbin /usr/sbin/update-ca-certificates /usr/share /usr/share/ca-certificates /usr/share/ca-certificates/mozilla ... # 看到了好多 mozilla 的证书相关信息呀。 /usr/share/ca-certificates/mozilla/DigiCert_Global_Root_CA.crt /usr/share/doc /usr/share/doc/ca-certificates /usr/share/doc/ca-certificates/examples ... # 好多 examples /usr/share/doc/ca-certificates/examples/ca-certificates-local/README /usr/share/doc/ca-certificates/changelog.gz /usr/share/doc/ca-certificates/copyright /usr/share/doc/ca-certificates/README.Debian /usr/share/doc/ca-certificates/NEWS.Debian.gz /usr/share/man /usr/share/man/man8 /usr/share/man/man8/update-ca-certificates.8.gz jlch@km:~$  那查一下 update-ca-certificates</description>
    </item>
    
    <item>
      <title>awesome cloud-native</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cloudnative/awesome-cloud-native.html</link>
      <pubDate>Sun, 25 Nov 2018 18:08:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cloudnative/awesome-cloud-native.html</guid>
      <description>https://jimmysong.io/awesome-cloud-native/</description>
    </item>
    
    <item>
      <title>kubernetes cephfs README</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-readme.html</link>
      <pubDate>Sun, 25 Nov 2018 17:28:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-readme.html</guid>
      <description>本次, k8s cephfs 结合, 前前后后, 花了差不多1个月的时间, 终于是有结果了.
主要大过程是:
安装 k8s.v1.7.3 flannel 网络 成功 安装 ceph 安装 cephfs 然后 k8s + cephfs make &amp;amp;&amp;amp; make push deployment.yaml 失败 docker 成功 test-pod 成功 检查 SUCCESS 失败 Input/Output Error 发现不对, 升级内核 升级 k8s.v1.7.3 至 k8s.v1.8.3 升级失败 科学上网 XX-net 失败 加速度 成功 全新安装 k8s.v1.8.4 remove kube* 成功 install kube* 成功 init 成功 apply -f kube-flannel.yml 然后 k8s + cephfs docker 成功, 关闭 重新设置 cni0 secret 成功 configmap.</description>
    </item>
    
    <item>
      <title>flannel网络模式下ping出错</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-flannel-ping-wrong.html</link>
      <pubDate>Sun, 25 Nov 2018 16:53:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-flannel-ping-wrong.html</guid>
      <description>Environment 所有节点都要安装 kubeadm, kubelet, kubectl
安装时，全使用 root 用户。直到 kubeadm join 成功后，全使用 非root用户
192.168.31.120 km master 192.168.31.119 kn1 node 192.168.31.118 kn2 node  问题 网络出了问题了，ping 不了 kn1, kn2 中的pod的IP
解决 https://github.com/coreos/flannel/blob/476abd9ef37e7111a1268c41afbd7154046b492a/Documentation/troubleshooting.md#firewalls
root@km:~# k get pods --all-namespaces -o wide NAMESPACE NAME READY STATUS RESTARTS AGE IP NODE default cephfs-provisioner-cff8d95c-6tgcs 1/1 Running 2 11d 10.244.1.90 kn1 default mysql-0 2/2 Running 2 22h 10.244.1.87 kn1 default mysql-1 2/2 Running 0 22h 10.244.2.243 kn2 default mysql-2 2/2 Running 2 22h 10.</description>
    </item>
    
    <item>
      <title>docker registry ui</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-ui.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-ui.html</guid>
      <description>http://blog.csdn.net/mideagroup/article/details/52052618
env 192.168.31.240
home/tom/hyper-docker-registry-web-config 下</description>
    </item>
    
    <item>
      <title>shell批量替换文件扩展名</title>
      <link>https://eiuapp.github.io/eiuapp-learn/shell/shell-replace-file-houzhui.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/shell/shell-replace-file-houzhui.html</guid>
      <description>早上本想将一些照片上传到相册中，但是由于所有照片的扩展名都是JPG而不是小写的jpg，因此造成了“格式不正确”而不能上传照片。此刻就产生了这样一个问题：使用shell脚本如何批量将所有文件的扩展名JPG都改成小写的jpg？
既然要批量替换文件名，那么肯定得用一个for循环依次遍历指定目录下的每个文件。对于每个文件，假如该文件的名称为name.oldext，那么我们必须原始文件名中挖出name，再将它与新的文件扩展名newext拼接形成新的文件名name.newext。依照这样的思路，就诞生了下面的脚本：
#!/bin/bash oldext=&amp;quot;JPG&amp;quot; newext=&amp;quot;jpg&amp;quot; dir=&amp;quot;/home/edsionte/mypic&amp;quot; cd $dir for file in $(ls $dir | grep .$oldext) do name=$(ls $file | cut -d. -f1) mv $file ${name}.$newext done  下面对针对这个程序作简单说明：
1.变量oldext和newext分别指定旧的扩展名和新的扩展名。dir指定文件所在目录；
2.“ls $dir | grep .$oldext”用来在指定目录dir中获取扩展名为旧扩展名的所有文件；
3.在循环体内先利用cut命令将文件名中“.”之前的字符串剪切出来，并赋值给name变量；接着将当前的文件名重命名为新的文件名。
通过这个脚本，所有照片的扩展名都成功修改。为了使这个脚本更具有通用型，我们可以增加几条read命令实现脚本和用户之间的交互。改进版的脚本如下：
#!/bin/bash read -p &amp;quot;old extension:&amp;quot; oldext read -p &amp;quot;new extension:&amp;quot; newext read -p &amp;quot;The directory:&amp;quot; dir cd $dir for file in $(ls $dir | grep .$oldext) do name=$(ls $file | cut -d. -f1) mv $file ${name}.</description>
    </item>
    
    <item>
      <title>Mac下为什么有的文件名后带一个*星号</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-file-name-end-with-asterisk.html</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-file-name-end-with-asterisk.html</guid>
      <description> Mac下为什么有的文件名后带一个*星号？ 这个*号仅仅是ls命令显示的，表示有可执行权限，实际文件名不带*号。
$ ls -F  可执行文件名后就会加*号。
显示一个或多个文件的相关信息。 ls [options] [file-list]
参数 默认情况下，ls按照文件名的字母顺序列出文件的信息，file-list可以是任意文件或目录 当file-list包含多个目录时，ls将显示目录的名称，不显示子目录和子文件 当file-list为普通文件时，ls则显示该文件的相关信息
Ref  http://www.cnblogs.com/jackbo/p/7201885.html  </description>
    </item>
    
    <item>
      <title>org-折行显示</title>
      <link>https://eiuapp.github.io/eiuapp-learn/org/org-visual-line-navigation.html</link>
      <pubDate>Tue, 13 Nov 2018 14:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/org/org-visual-line-navigation.html</guid>
      <description>  M-x spacemacs/toggle-visual-line-navigation-on
 Ref  https://emacs-china.org/t/spacemacs-org/428  </description>
    </item>
    
    <item>
      <title>使用org-mode和ox-hugo写文档</title>
      <link>https://eiuapp.github.io/eiuapp-learn/org/blogging-with-org-mode-and-ox-hugo.html</link>
      <pubDate>Mon, 12 Nov 2018 09:20:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/org/blogging-with-org-mode-and-ox-hugo.html</guid>
      <description>Env  os: mac Emacs: 26.1 Spacemacs: 0.300.0 Org: 9.1.2 Hugo: v0.41 ox-hugo: 20181106.2350 prodigy: 20180511.938  Step Part 1: Blog Setup Download Hugo pacman -S hugo  Initialize Project hugo new site test-blog cd test-blog git init  Download a Theme (YMMV) This seems like a clean, simple theme.
You can use a submodule like this:
git submodule add https://github.com/goodroot/hugo-classic.git themes/hugo-classic  Or you can just clone it</description>
    </item>
    
    <item>
      <title>jane主题中安装百度统计</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-jane-add-baidu-tongji.html</link>
      <pubDate>Tue, 09 Oct 2018 10:10:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-jane-add-baidu-tongji.html</guid>
      <description>获取百度统计代码 登陆百度统计/管理/自有网站/获取代码, 得到形如
&amp;lt;script&amp;gt; var _hmt = _hmt || []; (function() { var hm = document.createElement(&amp;quot;script&amp;quot;); hm.src = &amp;quot;https://hm.baidu.com/hm.js?9dd8aaaaaaaaaaa7a8bde80b13fe8eaf&amp;quot;; var s = document.getElementsByTagName(&amp;quot;script&amp;quot;)[0]; s.parentNode.insertBefore(hm, s); })(); &amp;lt;/script&amp;gt;  我们要的就是 &amp;ldquo;https://hm.baidu.com/hm.js?9dd8aaaaaaaaaaa7a8bde80b13fe8eaf&amp;rdquo; 中的 9dd8aaaaaaaaaaa7a8bde80b13fe8eaf
放入config.toml 文件中 [params] baidu_push = false # baidu push # 百度 baidu_analytics = &amp;quot;9dd8aaaaaaaaaaa7a8bde80b13fe8eaf&amp;quot; # Baidu Analytics baidu_verification = &amp;quot;&amp;quot; # Baidu Verification  代码安装检查 登陆百度统计/管理/自有网站/代码检查, 得到形如：
 页面代码安装状态：代码安装正确  表示已经加入了百度统计。</description>
    </item>
    
    <item>
      <title>wemux (笔记)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-wemux.html</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-wemux.html</guid>
      <description>https://github.com/zolrath/wemux</description>
    </item>
    
    <item>
      <title>批量删除docker images</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-remove-images-multy.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-remove-images-multy.html</guid>
      <description> docker ps -a | grep &amp;quot;Exited&amp;quot; | awk &#39;{print $1 }&#39;|xargs docker stop docker ps -a | grep &amp;quot;Exited&amp;quot; | awk &#39;{print $1 }&#39;|xargs docker rm docker images|grep none|awk &#39;{print $3 }&#39;|xargs docker rmi  Ref  https://blog.csdn.net/p656456564545/article/details/50097145  </description>
    </item>
    
    <item>
      <title>ubuntu 获取 系统版本信息</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-get-os-lsb-release.html</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-get-os-lsb-release.html</guid>
      <description>(oscar) ➜ proxy-os git:(master) ✗ lsb_release --help Usage: lsb_release [options] Options: -h, --help show this help message and exit -v, --version show LSB modules this system supports -i, --id show distributor ID -d, --description show description of this distribution -r, --release show release number of this distribution -c, --codename show code name of this distribution -a, --all show all of the above information -s, --short show requested information in short format (oscar) ➜ proxy-os git:(master) ✗ lsb_release -a No LSB modules are available.</description>
    </item>
    
    <item>
      <title>mac 系统中文件的软链接、硬链接</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-hard-links-soft-links.html</link>
      <pubDate>Sat, 01 Dec 2018 11:31:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-hard-links-soft-links.html</guid>
      <description>最近有这么个需求，由于我在多台设备上使用 Surge ，因此我想把 Surge 的配置文件使用 Dropbox 进行同步，但是 Dropbox 的路径在 ~/User/slark/Dropbox/surge.conf 下，而 Surge 的配置文件位于 ~/.surge.conf，每次修改 .surge.conf 后，我都会手动把文件另存到 Dropbox 中，比较麻烦。
开始想用一款本地文件同步工具来满足这个需求，比如 GoodSync，这个工具也确实能满足需求，但是就这么小的需求也要用软件来实现？经过 Google 后，发现可以通过创建文件的 硬链接 来完美满足这个需求。
文件的 软链接 和 硬链接 在 Unix 系统中，可以对文件创建 硬链接 和 软链接。简单来说，链接就是可以指向文件系统中其他位置的一个快捷方式，比如 Windows 系统下的快捷方式。那么，硬链接和软链接有什么区别呢？
硬链接 硬链接是一个目录条目，它指具有同一个 i-node（硬盘上的物理位置）的另一个文件，事实上只存在一个文件，比如我对 Dropbox 中的 surge.conf 文件创建一个硬链接：
格式：ln [原文件] [硬链接文件] ln ~/Dropbox/surge.conf ~/.surge.conf  原文件和硬链接的详细信息对比：
硬链接有这么几个特点：
 文件的所有的硬链接指向的是同一个文件，硬盘中只实际只存储一份文件； 所有硬链接与原文件的大小，修改时间，权限都相同；  因为是硬链接，所以 ~/Dropbox/surge.conf 和 ~/.surge.conf 指向的是同一个文件，删除任何一个链接都不会真正的删除文件。
可以这么理解，在 Unix 系统下，任何文件的实际路径都是一个硬链接，该文件的硬链接数为 1，每创建一个硬链接后，硬链接数 +1，删除一个硬链接，硬链接数 -1，硬链接数为 0 时这个文件实际就被删除了。好比程序中的指针，实际的对象只有一份，指向这个对象的指针却有多个，删除任何一个指针并不会删除这个对象，只有把最后一个指针删掉，这个对象才算是删除掉了。</description>
    </item>
    
    <item>
      <title>ceph安装FAQ</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-faq.html</link>
      <pubDate>Fri, 30 Nov 2018 17:19:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-faq.html</guid>
      <description>Q1 ceph-deploy install ceph-admin ceph-osd1 ceph-osd2 mon1 ... [ceph-osd1][DEBUG ] Get:40 https://download.ceph.com/debian-jewel xenial/main amd64 python-rbd amd64 10.2.10-1xenial [1,449 kB] [ceph-osd1][DEBUG ] Get:41 https://download.ceph.com/debian-jewel xenial/main amd64 ceph-common amd64 10.2.10-1xenial [15.5 MB] [ceph-osd1][DEBUG ] Get:42 https://download.ceph.com/debian-jewel xenial/main amd64 ceph-base amd64 10.2.10-1xenial [50.5 MB] [ceph-osd1][WARNIN] No data was received after 300 seconds, disconnecting... [ceph-osd1][INFO ] Running command: sudo ceph --version [ceph-osd1][ERROR ] Traceback (most recent call last): [ceph-osd1][ERROR ] File &amp;quot;/usr/lib/python2.7/dist-packages/ceph_deploy/lib/vendor/remoto/process.py&amp;quot;, line 119, in run [ceph-osd1][ERROR ] reporting(conn, result, timeout) [ceph-osd1][ERROR ] File &amp;quot;/usr/lib/python2.</description>
    </item>
    
    <item>
      <title>ceph auth</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-auth.html</link>
      <pubDate>Fri, 30 Nov 2018 17:10:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-auth.html</guid>
      <description>cephu@cephadmin:~/my-cluster$ ceph auth ls installed auth entries: mds.node1 key: AQADpu5ZJgEAAhAA6Om+UrlNn3s4v728UGIuTQ== caps: [mds] allow caps: [mon] allow profile mds caps: [osd] allow rwx osd.0 key: AQCAou5ZbAFBCRAANHUYj3trYJm+bbpzM68Czw== caps: [mgr] allow profile osd caps: [mon] allow profile osd caps: [osd] allow * osd.1 key: AQCNou5Z0AEiChAAoXaQS1KsqnygVzIdK4LeBQ== caps: [mgr] allow profile osd caps: [mon] allow profile osd caps: [osd] allow * osd.2 key: AQCaou5ZckceFxAArxSTMrgL94Pe9wGqhT2tGA== caps: [mgr] allow profile osd caps: [mon] allow profile osd caps: [osd] allow * client.</description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu quick-start-preflight</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-quick-start-preflight.html</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-quick-start-preflight.html</guid>
      <description>这里的配置注意点如下：
ceph-admin 节点： 安装时， with a stable Ceph release (e.g., luminous.) ，安装 luminous 或以上版本。
cephu@cephadmin:~/my-cluster$ sudo cat /etc/apt/sources.list.d/ceph.list deb https://download.ceph.com/debian-luminous/ xenial main cephu@cephadmin:~/my-cluster$  配置 ~/.ssh/config 方便后续安装
cephu@cephadmin:~/my-cluster$ cat ~/.ssh/config Host node0 Hostname cephadmin User cephu Host node1 Hostname mon1 User cephu Host node2 Hostname cephfsn2 User cephu Host node3 Hostname cephfsn3 User cephu cephu@cephadmin:~/my-cluster$  这里，我后来想了一下，应该把这个地方，修改成 全用 node0, node1, node2, node3, 然后，各节点的　Hostname 也修改成这些，这样子才是真的方便安装。如下：
cephu@cephadmin:~/my-cluster$ cat ~/.ssh/config Host node0 Hostname node0 User cephu Host node1 Hostname node1 User cephu Host node2 Hostname node2 User cephu Host node3 Hostname node3 User cephu cephu@cephadmin:~/my-cluster$  存储节点： cephu@cephadmin:~/my-cluster$ cat /etc/hosts 127.</description>
    </item>
    
    <item>
      <title>使用 cephfs 完成 statefulset 的练习</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-stateful.html</link>
      <pubDate>Sun, 25 Nov 2018 17:32:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-stateful.html</guid>
      <description>环境 k8s-master 192.168.31.120 km master k8s-node1 192.168.31.119 kn1 node1 k8s-node2 192.168.31.118 kn2 node2 cephfs-admin 192.168.31.115 cephfs-monitor 192.168.31.114 cephfs-client 192.168.31.172  各 k8s-node 安装完 ceph-common(sudo apt install ceph-common -y)
准备 在进行操作前，请完成下面的操作：
1）阅读
http://www.cnblogs.com/iiiiher/p/7159810.html
https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client
注意：
https://github.com/kubernetes-incubator/external-storage 这个仓库，是官方提供之外的 External storage plugins, provisioners, and helper libraries ，因为我们在官方文档 中看到了 nfs 是不支持 provisioners 的，所以要来这里了哟&amp;gt;。
2）git clone
 git clone https://github.com/kubernetes-incubator/external-storage
cd external-storage/nfs-client/deploy/
 3）按步骤来进行。
现在打开 https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/cephfs
开始动手了
step Compile the provisioner 见 cephfs-k8s-make-by-go-get.rst
这个地方，请参看 http://blogtt.</description>
    </item>
    
    <item>
      <title>docker-registry-push-pull</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-push-pull.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-push-pull.html</guid>
      <description>请查看
https://gitee.com/tomt/tom%5Fdocker%5Fregistry%5Fpush%5Fpull.git</description>
    </item>
    
    <item>
      <title>运行 kubeadm init 之前</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-init-before-v1_8_3.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-init-before-v1_8_3.html</guid>
      <description>在运行 kubeadm init 之前的动作
kubelet 服务检查 后来发现，在这里应该测试一下 kubelet.service。
原来，虽然我 apt install kubelet , 但是， 遗留了之前 kubeadm 的一些配置.(应该把它们清空的.) 如: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
让我们来吧。
删除这个新安装的 kubelet root@km:/etc/cni/net.d# root@km:/etc/cni/net.d# apt remove kubelet Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: ebtables golang-1.8-go golang-1.8-race-detector-runtime golang-1.8-src kubernetes-cni socat Use &#39;apt autoremove&#39; to remove them. The following packages will be REMOVED: kubeadm kubelet 0 upgraded, 0 newly installed, 2 to remove and 11 not upgraded.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 0, Intro</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-0-notes.html</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-0-notes.html</guid>
      <description>本spacemacs rocks day系列是针对子龙山人的 spacemacs rocks season 1 的 11个优酷视频教程而整理的笔记。 相应的子龙山人的本人对教程的介绍，请看：https://zilongshanren.com/blog/2015-12-06-spacemacs-rocks.html
因为我本人之前已有相关的spacemacs的使用经历，所以，我在看的时候，次序有点不对。 新人可以按下面的次序观看视频。
 了解: 10, 11, 9 入门: 1, 2, 3, 4, 5, 6, 7, 8  注意：视频中的很多命令，早已不能再使用，且有一些我也没有摸索出来，如有知道的请留言探讨。</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 1, Features &amp; Workflow</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-1-notes.html</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-1-notes.html</guid>
      <description>spacemacs-rocks(1)
跳到函数定义，并返回  , g g 然后 C-o
 Navigation functions in current file  SPC s l （已经失效，因为没有找到这个快捷键）
 替换成
 M-x helm-jump-in-buffer
 这样，就可以把它们绑定一下。</description>
    </item>
    
    <item>
      <title>ssh登录时如何直接在参数中加入登录密码</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/sshpass-let-ssh-login-with-password.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/sshpass-let-ssh-login-with-password.html</guid>
      <description>sshpass: 用于非交互的ssh 密码验证
　ssh登陆不能在命令行中指定密码，也不能以shell中随处可见的，sshpass 的出现，解决了这一问题。它允许你用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取。
　办法找到了，现在先在自己机器上安装。
　对于debian/ubuntu系统来说，安装方式很简单：
sudo apt-get install sshpass  　对于其他系统来说，可以通过编译源码：
wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz tar xvzf sshpass-1.05.tar.gz ./configure make sudo make install  　./configure 后可以添加参数指定安装目录，比如：
./configure --prefix=/usr/local/Cellar/sshpass/1.05  　来把sshpass安装到自己喜欢的位置，如果没有这个参数，则安装到默认位置。
　安装好了后，输入sshpass来查看是否安装好了：
➜ ~ git:(master) ✗ sshpass -V sshpass 1.05 (C) 2006-2011 Lingnu Open Source Consulting Ltd. This program is free software, and can be distributed under the terms of the GPL See the COPYING file for more information.</description>
    </item>
    
    <item>
      <title>python小技巧</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-tips.html</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-tips.html</guid>
      <description> Python查看安装路径 &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.path  </description>
    </item>
    
    <item>
      <title>mac tips</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-tips.html</link>
      <pubDate>Wed, 05 Dec 2018 22:40:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-tips.html</guid>
      <description> 卸载软件 为什么在我的mac上面下了腾讯电脑管家就卸载不了了？点击没有小叉叉也不能移到废纸篓.
finder－应用程序－右键－移到废纸篓  </description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu Storage Cluster Quick Start</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-storage-cluster-quick-start.html</link>
      <pubDate>Fri, 30 Nov 2018 17:51:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-storage-cluster-quick-start.html</guid>
      <description>2.1 Create the cluster.
 ceph-deploy new node1 不生效的，要写成 ceph-deploy new mon1
 cephu@cephadmin:~/my-cluster$ ceph-deploy new mon1  2.2 - 2.3
cephu@cephadmin:~/my-cluster$ cat ~/my-cluster/ceph.conf [global] fsid = d0aa5af1-4f8e-4953-9448-7f1b2448b8a5 mon_initial_members = mon1 mon_host = 192.168.31.114 auth_cluster_required = cephx auth_service_required = cephx auth_client_required = cephx public network = 192.168.31.1/24 ms bind ipv6 = true cephu@cephadmin:~/my-cluster$  2.4
cephu@cephadmin:~/my-cluster$ ceph-deploy install node1 node2 node3  2.5
cephu@cephadmin:~/my-cluster$ ceph-deploy mon create-initial  报错，然后，经过 农总在 https://my.</description>
    </item>
    
    <item>
      <title>kubernetes-cephfs-make-by-go-get</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-make-by-go-get.html</link>
      <pubDate>Sun, 25 Nov 2018 17:35:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-make-by-go-get.html</guid>
      <description>ENV k8s-master 192.168.31.120 km master k8s-node1 192.168.31.119 kn1 node1 k8s-node2 192.168.31.118 kn2 node2 ceph-client 192.168.31.172 ceph-mon1 192.168.31.114  这次的make, 可以在任何地方完成，只要满足：golang 1.7 以上的版本
我在 km,ceph-client,ceph-mon1 上都完成过
安装golang 如果已有安装，请忽略这一步
安装 golang 1.7 以上的版本。 我们这里安装 1.9.1
 cd home/jlch tar -xvf go1.9.2.linux-amd64.tar ls go export PATH=$PATH:/home/jlch/go/bin
 验证go go version  配置 GOPATH mkdir gopath export GOPATH=/home/jlch/gopath/  go get go get github.com/kubernetes-incubator/external-storage  配置 Dockerfile 后来发现 docker image 的文件不对。
这个地方的 ENV CEPH_VERSION &amp;ldquo;jewel&amp;rdquo; 应该修改成 ENV CEPH_VERSION &amp;ldquo;luminous&amp;rdquo;</description>
    </item>
    
    <item>
      <title>ubuntu中安装kubeadm</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-base-ubuntu.html</link>
      <pubDate>Fri, 23 Nov 2018 17:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-base-ubuntu.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>ubuntu中安装kubeadm v1.8.4</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-v184-install-base-ubuntu.html</link>
      <pubDate>Fri, 23 Nov 2018 17:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-v184-install-base-ubuntu.html</guid>
      <description>Environment  kubeadm: v1.8.4
所有节点都要安装 kubeadm, kubelet, kubectl
安装时，全使用 root 用户。直到 kubeadm join 成功后，全使用 非root用户
192.168.31.120 km master 192.168.31.119 kn1 node 192.168.31.118 kn2 node   加代理 准备FQ网络
 命令行  加代理原因：kubeadm init 会去检查最新版本，及最新版本镜像是什么，镜像是否要更新。 如果本地有了相同的docker image id，就不会下载，不会更新。 这意味着，我们前几天的手工build kubeadm，达成 在 etc/kubernetes/mainfest 下的 *.yaml 文件 加上 &amp;ldquo;imagePullPolicy: IfNotPresent&amp;rdquo; , 没有意义了。
root@km:~# export http_proxy=&amp;quot;http://192.168.31.239:8118/&amp;quot; root@km:~# export https_proxy=&amp;quot;http://192.168.31.239:8118/&amp;quot; root@km:~# export no_proxy=&amp;quot;localhost,127.0.0.1,192.168.31.120,10.96.0.10,github.com,ubuntu.com&amp;quot;   apt  加代理原因： apt update 要去 google.com 下载
root@km:~# cat /etc/apt/apt.</description>
    </item>
    
    <item>
      <title>docker 登陆失败</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-login-failure.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-login-failure.html</guid>
      <description>login failure - 代理问题 root@km:~/dockerRegistry# docker login reg.jlch.com:5000 Username (zimug): Password: Error response from daemon: Get https://reg.jlch.com:5000/v1/users/: EOF root@km:~/dockerRegistry# vi /lib/systemd/system/docker.service  重点把 reg.jlch.com 加入 Environment 中。
root@km:~# cat /lib/systemd/system/docker.service [Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network.target docker.socket firewalld.service Requires=docker.socket [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker Environment=&amp;quot;HTTP_PROXY=http://192.</description>
    </item>
    
    <item>
      <title>shane sveller blog 笔记</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/shane-sveller-blog-about-ox-hugo.html</link>
      <pubDate>Wed, 14 Nov 2018 23:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/shane-sveller-blog-about-ox-hugo.html</guid>
      <description>notes Blogging with org-mode and ox-hugo 这篇文章，写得很好，主要讲了下面几点。
 install Global settings and metadatad STARTUP: content AUTHOR: Shane Sveller HUGO_BASE_DIR: . HUGO_AUTO_SET_LASTMOD: t Creating posts Setup hugo project category and tag. Excluding/heading sub-headings from export（it’s a :noexport: tag） Automatic export on save Marking a post as a Draft Optional: Live reload without a separate shell tab Emacs Lisp Snippets  其中几个说明一下。
Automatic export on save  * Footnotes * COMMENT Local Variables :ARCHIVE: # Local Variables: # eval: (add-hook &#39;after-save-hook #&#39;org-hugo-export-wim-to-md :append :local) # eval: (auto-fill-mode 1) # End:   其中，查一下函数（SPC h d f) 知道，要把 org-hugo-export-wim-to-md-after-save 修改成 org-hugo-export-wim-to-md。</description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu Filesystem Quick Start</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-filesystem-quick-start.html</link>
      <pubDate>Fri, 30 Nov 2018 17:55:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-filesystem-quick-start.html</guid>
      <description>http://docs.ceph.com/docs/master/start/quick-cephfs/
PREREQUISITES admin 节点：
ceph -s  看一下，是不是都正常。 这里是看不到 mds 的，要看，要去 moniter 节点
moniter 节点： 我们环境的是 192.168.31.114
cephu@mon1:~$ ps -ef | grep ceph root 7541 7227 0 Oct23 pts/0 00:00:00 su - cephu cephu 7542 7541 0 Oct23 pts/0 00:00:00 -su cephu 20793 7542 0 12:39 pts/0 00:00:00 ps -ef cephu 20794 7542 0 12:39 pts/0 00:00:00 grep --color=auto ceph ceph 21275 1 0 Oct23 ? 00:07:50 /usr/bin/ceph-mon -f --cluster ceph --id mon1 --setuser ceph --setgroup ceph ceph 22756 1 0 Oct24 ?</description>
    </item>
    
    <item>
      <title>kubernetes中cephfs的deployment的FAQ</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-deployment-faq.html</link>
      <pubDate>Sun, 25 Nov 2018 17:41:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-deployment-faq.html</guid>
      <description>k8s cephfs 在 deployment.yaml 中的使用 Environment k8s-master 192.168.31.120 km master k8s-node1 192.168.31.119 kn1 node1 k8s-node2 192.168.31.118 kn2 node2  配置 deployment.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: name: cephfs-provisioner spec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: cephfs-provisioner spec: containers: - name: cephfs-provisioner image: &amp;quot;quay.io/external_storage/cephfs-provisioner:latest&amp;quot; # 对应 镜像 imagePullPolicy: IfNotPresent env: - name: PROVISIONER_NAME valueFrom: configMapKeyRef: key: provisioner.name name: cephfs-provisioner command: # 这里对应 命令 - &amp;quot;/usr/local/bin/cephfs-provisioner&amp;quot; args: # 这里对应三个参数 - &amp;quot;-id=cephfs-provisioner-1&amp;quot; - &amp;quot;-master=https://10.</description>
    </item>
    
    <item>
      <title>kubeadm join</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-join.html</link>
      <pubDate>Fri, 23 Nov 2018 17:17:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-join.html</guid>
      <description>Environment 已安装 kubeadm, kubelet, kubectl
安装时，全使用 root 用户。直到 kubeadm join 成功后，全使用 非root用户
192.168.31.120 km master 192.168.31.119 kn1 node 192.168.31.118 kn2 node  kubeadm join /etc/kubernetes/pki/ca.crt already exists sudo kubeadm join --token ce4253.8322cc2590378260 192.168.31.120:6443 --discovery-token-ca-cert-hash sha256:bb0b9ef27e5ffef06776ca10a87ed548cefedc703ddaf904316c87d4a7f3655d  这个来自于 master节点， kubeadm init 后的提示。
jlch@kn1:~$ sudo kubeadm join --token ce4253.8322cc2590378260 192.168.31.120:6443 --discovery-token-ca-cert-hash sha256:bb0b9ef27e5ffef06776ca10a87ed548cefedc703ddaf904316c87d4a7f3655d [kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters. [preflight] Running pre-flight checks [preflight] WARNING: docker version is greater than the most recently validated version.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 3, Emacs as a C/C&#43;&#43; IDE</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-3-notes.html</link>
      <pubDate>Thu, 15 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-3-notes.html</guid>
      <description>emacs-as-c-ide(youku)
先看 github的 README.org
因为我并没有开发C/C++, 所以我这里只记录一下。
代码跳转 tag 跳转
 , g d
 精确 跳转
 , g g
 还有一个
 , g a
 返回到跳转前
 C-o
 生成 .ycm_extra_conf.py 文件 TODO 自动生成.ycm_extra_conf.py 文件的程序，会在其github中放出 python config_gen.py ~/Github/Spacemacs-rocks/c++-project  安装ycmd  https://github.com/Valloric/ycmd  Compile?? 推荐使用shell
Debugging?? 推荐使用 shell + lldb</description>
    </item>
    
    <item>
      <title>jupyter-notebook 密码查询</title>
      <link>https://eiuapp.github.io/eiuapp-learn/jupyter/jupyter-notebook-login-with-token.html</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/jupyter/jupyter-notebook-login-with-token.html</guid>
      <description>有一些场景，需要连接jupyter-notebook, 这时，需要提供登陆密码.
这个密码就是 token.
(py3) ➜ learn-python3 git:(master) ✗ /Users/tomtsang/Downloads/.ana/bin/jupyter-notebook list Currently running servers: http://localhost:8888/?token=b488be28e8f4bdf6f11b3e863ee92896d99c50ed70e67bde :: /Users/tomtsang (py3) ➜ learn-python3 git:(master) ✗  如果是安装的 anaconda ，则在 anaconda 启动 jupyter-notebook 的过程中会提示出这个 token. 如下：
➜ ~ git:(master) ✗ /Users/tomtsang/Downloads/.ana/bin/jupyter_mac.command ; exit; [I 09:36:46.923 NotebookApp] JupyterLab extension loaded from /Users/tomtsang/Downloads/.ana/lib/python3.7/site-packages/jupyterlab [I 09:36:46.924 NotebookApp] JupyterLab application directory is /Users/tomtsang/Downloads/.ana/share/jupyter/lab [I 09:36:46.931 NotebookApp] Serving notebooks from local directory: /Users/tomtsang [I 09:36:46.931 NotebookApp] The Jupyter Notebook is running at: [I 09:36:46.</description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu Block Device Quick Start</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-block-device-quick-start.html</link>
      <pubDate>Sat, 01 Dec 2018 08:27:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-block-device-quick-start.html</guid>
      <description>env 192.168.31.172 ceph-client
修改 hostname 为 ceph-client
INSTALL CEPH admin 节点：
ceph-deploy install ceph-client ceph-deploy admin ceph-client  ceph-client 节点：
sudo chmod +r /etc/ceph/ceph.client.admin.keyring  CREATE A BLOCK DEVICE POOL admin 节点：
原来在 admin 节点，是没有这个 rbd 命令的。
要通过 sudo apt install ceph-common 之后，才会有。所以先运行一下。
cephu@cephadmin:~/my-cluster$ sudo apt install ceph-common -y cephu@cephadmin:~/my-cluster$ rbd pool init jlch 2017-10-24 15:57:45.951917 7fde4fa6e0c0 -1 auth: unable to find a keyring on /etc/ceph/ceph.client.admin.keyring,/etc/ceph/ceph.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin,: (2) No such file or directory 2017-10-24 15:57:45.</description>
    </item>
    
    <item>
      <title>k8s 中 cephfs 成功的 yaml 文件</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-yaml.html</link>
      <pubDate>Sun, 25 Nov 2018 17:47:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-yaml.html</guid>
      <description>https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/cephfs
对 我们好不容易成功安装的 k8s-cephfs 进行一个记录呀！
环境 k8s-master 192.168.31.120 km master k8s-node1 192.168.31.119 kn1 node1 k8s-node2 192.168.31.118 kn2 node2 cephfs-admin 192.168.31.115 cephfs-monitor 192.168.31.114 cephfs-client 192.168.31.172  git remote jlch@km:~/cephfs$ git remote -v origin https://github.com/kubernetes-incubator/external-storage (fetch) origin https://github.com/kubernetes-incubator/external-storage (push) jlch@km:~/cephfs$ git log | head commit f1eb2a4ddf944fdd35a16e686ae104c1db8753b2 Merge: 06aaf46 52a4da4 Author: Matthew Wong &amp;lt;mawong@redhat.com&amp;gt; Date: Tue Nov 21 01:48:43 2017 -0500 Merge pull request #468 from sathieu/patch-1 flex: Fix file shbang commit 06aaf46950c9f6f741b34afc1d9f7807bdbe078c jlch@km:~/cephfs$  git status 记录一下主要的修改点</description>
    </item>
    
    <item>
      <title>kubeadm从v1.8.3更新至v1.8.4失败</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-upgrade-failure-from-v183-to-v184.html</link>
      <pubDate>Sat, 24 Nov 2018 09:32:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-upgrade-failure-from-v183-to-v184.html</guid>
      <description>Installing Docker root@km:~# cat /etc/apt/sources.list.d/docker.list deb https://apt.dockerproject.org/repo ubuntu-xenial main root@km:~# cat /etc/docker/daemon.json { &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://0d6wdn2y.mirror.aliyuncs.com&amp;quot;] } root@km:~# vi /etc/docker/daemon.json root@km:~# cat /etc/docker/daemon.json { &amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;], &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://0d6wdn2y.mirror.aliyuncs.com&amp;quot;] } root@km:~# apt-get install -y curl apt-transport-https Reading package lists... Done Building dependency tree Reading state information... Done apt-transport-https is already the newest version (1.2.24). curl is already the newest version (7.47.0-1ubuntu2.4). The following packages were automatically installed and are no longer required: golang-1.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 4, Magit workflow</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-4-notes.html</link>
      <pubDate>Thu, 15 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-4-notes.html</guid>
      <description>如果magit状态下，不知道按键，则 SPC g s 后按 ? 号，查看。
Magit init, commit and commit messages  SPC g i(magit-init) SPC u S(所有文件加入版本库) 按TAB查看文件的修改 SPC g s(magit-status) s-1 (goto unstaged section) press tab to view diffs(code review) s to stage all changes c c -&amp;gt; c-c c-c to commit editing the commit message and the diff on the right  Commits in Action  Ammend ( c a) 就是把之前的commit作修改。把最近的修改，加入到上一次的 commit 之中。 write good commit messages squash unpushed commits (r l) reset commits (l l #) select a few line to commits discard changes, file wide or line wide revert commits  git push  SPC g s M a(remote name, remote url) P 第一次的话，按 - u(git push) 按提示，一般是 p或u  git rebase squash 把2个或者多个 commit ，合并成一个。  SPC g s 多个commit, 但是没有 push 找到最前的一个commit(commit 1) 按r i，进入一个commit 列表。 C-c, C-c 按 r 再按s , 表示进入到 squash 状态 按 , c 进入最终的commit Message 编辑 C-c C-c 退出。这时，观察到，2个commit已经合并成一个了。 git push 吧。  git reset  https://magit.</description>
    </item>
    
    <item>
      <title>Emacs与Jupyter notebook之间的集成</title>
      <link>https://eiuapp.github.io/eiuapp-learn/jupyter/jupyter-notebook-with-emacs.html</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/jupyter/jupyter-notebook-with-emacs.html</guid>
      <description>emacs配置ein包 具体配置可以参考我的个人配置
启动notebook服务器 连接notebook服务器  M-x ein:notebooklist-open 选择 New Notebook , 然后输入 token
 使用 使用的时候，查看 菜单栏 或者 C-c 出现大多数你想要的命令。</description>
    </item>
    
    <item>
      <title>ceph-install-base-ubuntu Object Storage Quick Start</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-object-storage-quick-start.html</link>
      <pubDate>Sat, 01 Dec 2018 08:29:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph-install-base-ubuntu-object-storage-quick-start.html</guid>
      <description>INSTALLING CEPH OBJECT GATEWAY ceph-client：
cephu@ceph-client:~$ sudo ufw allow 7480 Rule added Rule added (v6) cephu@ceph-client:~$ sudo ufw status Status: active To Action From -- ------ ---- 22 ALLOW Anywhere 7480 ALLOW Anywhere 22 (v6) ALLOW Anywhere (v6) 7480 (v6) ALLOW Anywhere (v6) cephu@ceph-client:~$  ceph-admin:
cephu@cephadmin:~/my-cluster$ ping ceph-client PING ceph-client (192.168.31.172) 56(84) bytes of data. 64 bytes from ceph-client (192.168.31.172): icmp_seq=1 ttl=64 time=0.558 ms ^C --- ceph-client ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.</description>
    </item>
    
    <item>
      <title>cephfs-k8s 中的 make</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-make.html</link>
      <pubDate>Sun, 25 Nov 2018 17:52:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-make.html</guid>
      <description>下载 make ，报错了。
root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/cephfs-stateful# cd external-storage/ceph/cephfs/ root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/cephfs-stateful/external-storage/ceph/cephfs# ls cephfs_provisioner cephfs-provisioner.go ceph-secret-admin.yaml CHANGELOG.md claim.yaml class.yaml configmap.yaml deployment.yaml Dockerfile local-start.sh Makefile OWNERS README.md test-pod.yaml root@km:~/kubernetes.io/TUTORIALS/Stateful-Applications/cephfs-stateful/external-storage/ceph/cephfs# make CGO_ENABLED=0 GOOS=linux go build -a -ldflags &#39;-extldflags &amp;quot;-static&amp;quot;&#39; -o cephfs-provisioner cephfs-provisioner.go cephfs-provisioner.go:28:2: cannot find package &amp;quot;github.com/golang/glog&amp;quot; in any of: /usr/lib/go-1.8/src/github.com/golang/glog (from $GOROOT) /root/go/src/github.com/golang/glog (from $GOPATH) cephfs-provisioner.go:29:2: cannot find package &amp;quot;github.com/kubernetes-incubator/external-storage/lib/controller&amp;quot; in any of: /usr/lib/go-1.8/src/github.com/kubernetes-incubator/external-storage/lib/controller (from $GOROOT) /root/go/src/github.com/kubernetes-incubator/external-storage/lib/controller (from $GOPATH) cephfs-provisioner.go:30:2: cannot find package &amp;quot;k8s.io/api/core/v1&amp;quot; in any of: /usr/lib/go-1.</description>
    </item>
    
    <item>
      <title>kubeadm v1.8.3 安装</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-v183.html</link>
      <pubDate>Sat, 24 Nov 2018 09:36:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-install-v183.html</guid>
      <description>https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
env 192.168.31.120 km master 192.168.31.119 kn1 node 192.168.31.118 kn2 node  Initializing your master kubeadm init --pod-network-cidr=10.244.0.0/16  如果遇到类似下面错误
- [preflight] Some fatal errors occurred: :: Port 10250 is in use /etc/kubernetes/manifests is not empty /var/lib/kubelet is not empty  则，参考 https://github.com/kubernetes/kubernetes/issues/37063 运行下面命令：
kubeadm reset systemctl start kubelet.service  之后，再次运行
kubeadm init --pod-network-cidr=10.244.0.0/16  被墙了，出不去，我了个去，怎么办？
https://mritd.me/2016/10/29/set-up-kubernetes-cluster-by-kubeadm/#21安装包从哪来
好吧，那就去 hub.docker.com 中配置吧
找到所有要配置的 image 找 etc/kubernetes/manifests root@km:~# cd /etc/kubernetes/manifests/ root@km:/etc/kubernetes/manifests# ls etcd.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 5, Find, Search and replace</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-5-notes.html</link>
      <pubDate>Thu, 15 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-5-notes.html</guid>
      <description>Evil search  Use / and * to start search. Use n &amp;amp; N to search forward and backward  进入 iedit 批量修改  * e
 修改的时候，按S则删除原单词，修改完成后，按ESC，2次，退出iedit模式回到Normal模式。
选择匹配范围。 多次按 r 切换匹配区域（当前buffer, 当前屏幕，当前函数）
 * r
 按 e 进入编辑模式，按 f 进入函数区域，按S开始修改。
清除搜索下的高亮：evil-search-clear-highlight  SPC s c
 Swiper  C-s to start search.  搜索到结果后，C-j, C-k, C-n, C-p 可以跳转
 C-c C-o to enter ivy-occur  可以把当前的搜索项，罗列在另一个buffer中。
Helm-swoop SPC s s/S to search search C-c C-e to enter edit mode SPC h l(helm-resume)</description>
    </item>
    
    <item>
      <title>k8s 与 cephfs 相关的FAQ</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-faq.html</link>
      <pubDate>Sun, 25 Nov 2018 17:58:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-cephfs-faq.html</guid>
      <description>Input/output error cephu@ceph-client:/mnt/mycephfs/volumes/kubernetes$ ll kubernetes-dynamic-pvc-a2c667ad-d0c7-11e7-b656-0a580af40148/ ls: reading directory &#39;kubernetes-dynamic-pvc-a2c667ad-d0c7-11e7-b656-0a580af40148/&#39;: Input/output error total 0 drwxr-xr-x 1 root root 0 Nov 24 11:36 ./ drwxr-xr-x 1 root root 0 Nov 24 11:29 ../ cephu@ceph-client:/mnt/mycephfs/volumes/kubernetes$  这个问题，看了一下，https://github.com/kubernetes-incubator/external-storage/issues/345，
最后，有用户是这样回复的
I tried to update my ubuntu kernel from 4.4.0 to 4.10.0 (sudo apt install linux-image-4.10.0-28-generic) and after a reboot, the error is gone, everything works fine from now on :)  所以就是升级内核了。升级去吧。 升级一下，果然成功了。</description>
    </item>
    
    <item>
      <title>使用本地镜像进行kubeadm init</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-init-use-local-image.html</link>
      <pubDate>Sat, 24 Nov 2018 09:48:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-init-use-local-image.html</guid>
      <description>因为 kubeadm 安装 要提前下载好docker images, 并使用 这些个 docker images. 但是，我们公司的网络FQ的下载速度太慢，时不时会断了。所以，我们考虑使用本地下载好的这些 images。
要使用 local images, 那就要去修改 kubeadm 的代码，并重新build。好吧，我们build 吧。
env 192.168.31.120 km master 192.168.31.119 kn1 node 192.168.31.118 kn2 node  kubeadm-build 见 kubeadm-build 部分
加代理 root@km:/etc/kubernetes/manifests# export declare -x HOME=&amp;quot;/root&amp;quot; declare -x LANG=&amp;quot;en_US.UTF-8&amp;quot; declare -x LANGUAGE=&amp;quot;en_US:en&amp;quot; declare -x LESSCLOSE=&amp;quot;/usr/bin/lesspipe %s %s&amp;quot; declare -x LESSOPEN=&amp;quot;| /usr/bin/lesspipe %s&amp;quot; declare -x LOGNAME=&amp;quot;root&amp;quot; declare -x LS_COLORS=&amp;quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:&amp;quot; declare -x MAIL=&amp;quot;/var/mail/root&amp;quot; declare -x NO_PROXY=&amp;quot;localhost,127.0.0.1/8,192.168.31.1/24&amp;quot; declare -x OLDPWD=&amp;quot;/etc/kubernetes&amp;quot; declare -x PATH=&amp;quot;/home/jlch/.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 6, Org-mode as a blogging engine</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-6-notes.html</link>
      <pubDate>Fri, 16 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-6-notes.html</guid>
      <description>youku
Start to blogging any place and any time. Press F1 to launch a menu and type blog to choose. Navigation all the blog posts
https://github.com/CodeFalling/blog-admin
这里的配置，主要是针对 hexo
Press W to new post Enter the title of your new post
快速生成一个draft blog
下面这个在另一篇博文中已经提过。  C-c t h
 使用 yasnippet 模板，快速生成一个draft hugo 文章信息模板
Start writing You could use all the Org syntax here. But org table is not well supported.</description>
    </item>
    
    <item>
      <title>kubeadm build</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-build.html</link>
      <pubDate>Sat, 24 Nov 2018 09:58:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubeadm-build.html</guid>
      <description>build kubeadm 修改 Kubeadm 使得 etc/kubernetes/manifests 下的 *.yaml 文件带有 imagePullPolicy: IfNotPresent
env 192.168.31.114 jlch
gopath cd ~/gopath/src/github.com/kubernetes/ git clone https://github.com/kubernetes/kubernetes.git cd kubernetes  修改吧 jlch@mon1:~/gopath/src/github.com/kubernetes/kubernetes$ git status Not currently on any branch. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) modified: cmd/kubeadm/app/phases/controlplane/manifests.go modified: cmd/kubeadm/app/phases/etcd/local.go no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;) jlch@mon1:~/gopath/src/github.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 7, Spacemacs buffer, file, project and layout management</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-7-notes.html</link>
      <pubDate>Sat, 17 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-7-notes.html</guid>
      <description>youku
SPC f &amp;mdash;&amp;gt; file related operations SPC f f --&amp;gt; helm-find-file SPC f r --&amp;gt; open recent file SPC f R --&amp;gt; rename file SPC f c --&amp;gt; copy file SPC f j --&amp;gt; jump to dired SPC f t --&amp;gt; open neo tree SPC f o --&amp;gt; open in external application  在 SPC f f的时候，可以通过 TAB 和 C-h 补充和回退文件夹名。
SPC b &amp;mdash;&amp;gt; buffer related operations SPC b b &amp;amp; SPC b B(i) SPC b h (spacemacs home buffer) SPC b s (scratch buffer) SPC b f (reveal in finder) SPC b w in dired buffer.</description>
    </item>
    
    <item>
      <title>kubernetes delete node</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-delete-node.html</link>
      <pubDate>Sat, 24 Nov 2018 23:32:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-delete-node.html</guid>
      <description>clear cat k8.export.sh export KUBECONFIG=$HOME/admin.conf ls k get node kubectl drain kn1 --delete-local-data --force --ignore-daemonsets kubectl delete node kn1 kubectl drain kn2 --delete-local-data --force --ignore-daemonsets kubectl delete node kn2 k get node clear kubectl drain km --delete-local-data --force --ignore-daemonsets kubeadm reset k get pod --all-namespaces docker ps  </description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 8, Spacemacs as a JavaScript/Node.js IDE</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-8-notes.html</link>
      <pubDate>Sat, 17 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-8-notes.html</guid>
      <description>Autocompletion  company-etags vs company-tern hippie-expand   M-x hippie-expand
 或者
 M-/
 Jump to definition  SPC s l to jump to function definitions. ctags. SPC m g d/ etags-select SPC s p / SPC o s to search keywords SPC m g g if use tern.js  jump to function definitions. ctags&amp;gt; SPC s l 已经失效了
etags-select etags, 基于正则表达式的补全 &amp;gt; SPC m g d 和 &amp;gt; , g d 相同</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 9, spacemacs as a life style</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-9-notes.html</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-9-notes.html</guid>
      <description> spacemacs as a life style 视频中的命令，还没有找到
进入不同的项目，使用layer切换：
 SPC l l
 一般先进入 @org 查看当天的任务
只有单你，确切地需要功能时，才去写elisp函数，实现自动化。
TODO 在 day 周期下，如何把任务设置成 done? TODO 开启ERC 在 SPC f e d 中安装 erc layer.
TODO 通过 ispell 语法检查 experience
osx-dictionary 英英翻译 光标处翻译 比如，我们现在有ball这个单词，把光标放在ball上（b,l上都可以）,然后
 M-x osx-dictionary-search-word-at-point
 或者
 SPC x w d
 然后，就给出了英文翻译，这时在这个临时buffer中有 s, o, r, q 提示，我们按r就有发音了。
翻译一个输入的单词  M-x osx-dictionary-search-input
 </description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 10, spacemacs tutor</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-10-notes.html</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-10-notes.html</guid>
      <description>youku spacemacs tutor
安装 各文件夹功能 core 方便加载layer的配置
使用 proxychains4 打开 emacs $ proxychains4 open /Applications/Emacs.app  这样的话，就会让emacs翻墙，这样下载melpa.org中的packages就会比较快。
介绍 spacemacs home page change-log Evil tutor  SPC h T
 universal arguments  SPC u
 配置启动全屏 在buffer中快速跳转  M-x jump-in-buffer
 现在有2种
 M-x helm-jump-in-buffer
 和
 M-x counsel-jump-in-buffer
 不需要安装layer，只单独安装某package 在 ~/.spacemacs.d/init.el 中的
dotspacemacs-additional-packages 中添加packages名就可以了。
行号  SPC t n
 相对行号
 SPC t r
 这时，向下跳转9行，则只要：</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 11, spacemacs use daily</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-11-notes.html</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-11-notes.html</guid>
      <description>youku spacemacs
开启 org-pomodoro  M-x org-pomodoro
 或者
 , C p
 插入chrome tab 且有title 无title可以使用
 C-c l
 但是视频中的是有title的，命令
 C-c G c
 已经失效。
记笔记主要用 deft 代码跳转至定义  , g
 返回到跳转前
 C-o
 python 语法检查错误列表  SPC e L
 查看函数文件  , h h
 REPL环境 打开  , s i
 发送选中区块代码至 REPL环境  , s r
 在emacs中直接调用搜索引擎进行搜索  SPC a /</description>
    </item>
    
    <item>
      <title>emacs中启动markdown preview</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-markdown-preview.html</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-markdown-preview.html</guid>
      <description> zilongshanren/markdown-to-html 开启
 , p
 使用 grip 程序preview markdown-to-html 文件。子龙说，这里的预览效果与 github上的md文件的效果是一模一样的。
grip安装 https://github.com/joeyespo/grip
brew install grip  Ref  https://emacs-china.org/t/topic/1549/17  </description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/docker.html</link>
      <pubDate>Wed, 03 Apr 2019 15:59:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/docker.html</guid>
      <description> docker 删除所有容器，镜像，数据卷 #以下，按需求开启 #停止容器 docker stop $(docker ps -a -q) #删除容器 docker rm $(docker ps -a -q) #删除镜像 docker image rm $(docker image ls -a -q) #删除数据卷： #docker volume rm $(docker volume ls -q) #删除 network： #docker network rm $(docker network ls -q) #---------------------------------------------------------------------------- #最直接并全面清理的的就是以下命令 #$docker stop $(docker ps -a -q) &amp;amp;&amp;amp; docker system prune --all --force  ref  https://blog.csdn.net/qq_34924407/article/details/82777691  </description>
    </item>
    
    <item>
      <title>To Completly remove Mysql from Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/remove-mysql-mariadb-from-ubuntu.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/remove-mysql-mariadb-from-ubuntu.html</guid>
      <description> To Completly remove Mysql from Ubuntu
env  os: ubuntu mysql: 5.7 mariadb: 10.3  step sudo apt-get remove --purge mysql-server mysql-client mysql-common sudo apt-get autoremove sudo apt-get autoclean  如果有安装过 mariadb
sudo apt-get remove --purge mariadb* sudo apt-get autoremove sudo apt-get autoclean  after this, if you are having issues with re installing, Try to remove Mysql files in :
sudo rm -rf /var/lib/mysql  ref  https://stackoverflow.com/questions/25244606/completely-remove-mysql-ubuntu-14-04-lts  </description>
    </item>
    
    <item>
      <title>Unable to set password for the MariaDB ‘root’ user</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/cannot-setup-mysql-root-password-during-installation.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/cannot-setup-mysql-root-password-during-installation.html</guid>
      <description>env 在安装 mysql 或者 mariadb 过程中，设置完 root 密码后，报出类似下面错误：
Unable to set password for the MariaDB &amp;quot;root&amp;quot; user An error occurred while setting the password for the MariaDB administrative user. This may have happened because the account already has a password, or because of a communication problem with the MariaDB server. You should check the account&#39;s password after the package installation. Please read the /usr/share/doc/mariadb-server-10.2/README.Debian file for more information.  step 说明，之前的安装，没有 completly remove。怎么remove, 看 这里</description>
    </item>
    
    <item>
      <title>mysql 常用用法</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-usage.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-usage.html</guid>
      <description>mysql 常用用法
修改mysql用户密码 select User,Password from mysql.user; set password for keystone@localhost = password(&#39;324dcdc2318be07d0300&#39;);  mysql timestamp 在建立表时,优先使用ON UPDATE CURRENT_TIMESTAMP, 也就是说, 优先使用下面的
`create_date` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;, `update_date` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,  而不是使用这下面的
`create_date` timestamp NULL DEFAULT NULL COMMENT &#39;创建时间&#39;, `update_date` timestamp NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,  如果表已经建立好了,则通过 navicat ,选中字段后,点击,默认:根据当前时间戳更新, 就可以更改了.</description>
    </item>
    
    <item>
      <title>Windows下效率必备软件</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/windows-tools.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/windows-tools.html</guid>
      <description>Windows下效率必备软件
env os: win10
step 工欲善其事，必先利其器！ 工欲善其事，必先利其器！ 工欲善其事，必先利其器！重而说三。
当你第一次接触windows，并准备在其上开发时，请先安装 package-manager-for-windows , 并用它来安装下面的软件。
工具 AutoHotKey: 神器！神器！神器！当然也得看使用者咯(^__^) 嘻嘻……详情请参看：Win下最爱效率神器:AutoHotKey。
[Listary]()： 本地搜索神器，当然还有别的作用，More&amp;amp;More。
Launchy : 快速启动安装的应用程序，老而弥坚，有丝Mac下Spotlight之风；
 http://www.launchy.net/ https://www.iplaysoft.com/launchy.html  Wox ： Windows下一款最接近 Alfred 的软件启动/文件搜索利器；可参见Listary Everything Wox Launch。
Chrome: Web世界里的神，的神，神。偏爱ing；如虎添翼，效率必备：Vimium~让您的Chrome起飞。
SublimeText3： 编码垒字的神器，还能览图/文件对比/…,偏爱ing；自荐笔者总结一文： 如何优雅地使用Sublime Text
Picasa3: 图片查看器中的佼佼者，偏爱ing。姑姑出品，必属精品！
Clover： 在Win下必备，谁让Win资源管理器太…QT，TotalCommand太重(⊙o⊙)…
Everything： 本来必备神器，无奈我移情别恋了–Listary。不过是不会忘了你。
Foxmail： 对比体验不多，不做评判，必备；反正不用win自带的。
Evernote: 纪录/收藏你想保存的文｜图｜网页;为知笔记～功能同丰满,身材更骨感😄。
Beyond Compare : 文件比较器; 此款为所接触中最佳。
Cmder: windows下cmd的替换工具,支持PowerShell;同比还有PowerShell，ConEmu 等。自荐笔者总结的：Win下必备神器之Cmder。
作业部落客户端: 开启卓越写作之旅,支持全平台＋离线使用，一键发布文稿，社交化批注。身材苗条，面容姣好，免费Markdown书写平台的魅力战斗机。
夜神模拟器: 经历了BlueStacks,海马，一遇这夜神,认你乃最佳！ 之后体验过程也没那么好，兼用海马(都不经常)。
网易云音乐: 初遇QQ音乐,处过天天动听,恋过酷狗，上过酷我，一夜情过千千静听,移情过虾米，和豆瓣FM好过，同百度随心听约过,最后，发现音乐的世界,还得是你～网易云音乐。
[Update: 2016-03-09 ~ 2016-03-10]
Atom: 新一代编码写文神器；虽还在发展，却已惊艳。自荐笔者一文：新编码神器Atom使用纪要。</description>
    </item>
    
    <item>
      <title>autohotkey 用法</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/autohotkey-usage.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/autohotkey-usage.html</guid>
      <description> autohotkey 用法
env  os: win10 autohotkey: Version 1.1.30.01  step 最好的方法是直接看官网
https://autohotkey.com/docs/Tutorial.htm
对应点击en,会出现zh，也就是中文版本
https://wyagd001.github.io/zh-cn/docs/Tutorial.htm
script https://zhuanlan.zhihu.com/p/19754204
ref  https://autohotkey.com/docs/Tutorial.htm https://wyagd001.github.io/zh-cn/docs/Tutorial.htm https://blog.csdn.net/weixin_37834999/article/details/79542638 https://blog.csdn.net/ChinarCSDN/article/details/82914429 https://blog.lovejade.cn/2016/03/12/share-autohotkey-script.html  </description>
    </item>
    
    <item>
      <title>在win10上安装emacs</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-install-with-win10.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-install-with-win10.html</guid>
      <description>在win10上安装emacs
env  os: win10 emacs: 26.1  step 官网下载 emacs 包 官网 https://www.gnu.org/software/emacs/
下载地址 http://mirrors.nju.edu.cn/gnu/emacs/windows/emacs-26/emacs-26.1-x86_64.zip
放到程序相应位置 解压后得到 emacs-26.1-x86_64 文件夹，剪切至程序安装目录 C:\Program Files\emacs-26.1-x86_64
设置环境变量 设置系统环境变量
 declare a environment variable named HOME pointing to your user directory C:\Users&amp;lt;username&amp;gt;   path中增加emacs\bin。  检查 win-r输入cmd
C:\Users\DELL&amp;gt;emacs --version GNU Emacs 26.1 Copyright (C) 2018 Free Software Foundation, Inc. GNU Emacs comes with ABSOLUTELY NO WARRANTY. You may redistribute copies of GNU Emacs under the terms of the GNU General Public License.</description>
    </item>
    
    <item>
      <title>在win10上安装spacemacs</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-install-with-win10.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-install-with-win10.html</guid>
      <description>在win10上安装spacemacs
env  os: win10 emacs: 26.1 spacemacs: develop分支  step 安装 emacs 参考这里
备份 cd ~ mv .emacs.d .emacs.d.bak mv .emacs .emacs.bak  官网下载 spacemacs 包 git clone https://github.com/syl20bnr/spacemacs -b develop ~/.emacs.d  Launch Emacs Spacemacs will automatically install the packages it requires. If you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with
emacs --insecure  第一次运行，请选择默认选择项目（1. vim; 2.</description>
    </item>
    
    <item>
      <title>在win10上安装spacemacs的常见问题</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-install-faq-with-win10.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-install-faq-with-win10.html</guid>
      <description>在win10上安装spacemacs后，出现的问题
Warning 提示如下： Error (use-package): Cannot load highlight-global Warning (magit): Magit no longer uses Magit-Popup. It now uses Transient. See https://emacsair.me/2019/02/14/transient-0.1. However your configuration and/or some third-party package that you use still depends on the `magit-popup&#39; package. But because `magit&#39; no longer depends on that, `package&#39; has removed it from your system. If some package that you use still depends on `magit-popup&#39; but does not declare it as a dependency, then please contact its maintainer about that and install `magit-popup&#39; explicitly.</description>
    </item>
    
    <item>
      <title>mkfs.xfs command not found</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/mkfs-xfs-command-not-found.html</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/mkfs-xfs-command-not-found.html</guid>
      <description> 如果 mkfs.xfs /dev/sdb1 出现 mkfs.xfs command not found , 则运行下面命令安装 mkfs.xfs
apt-get install xfsprogs  ref  http://blog.51cto.com/yangzhiming/2117942  </description>
    </item>
    
    <item>
      <title>org-mode-set-org-directory</title>
      <link>https://eiuapp.github.io/eiuapp-learn/org/org-mode-set-org-directory.html</link>
      <pubDate>Tue, 13 Nov 2018 14:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/org/org-mode-set-org-directory.html</guid>
      <description>做 软连接 这个方法比较方便，不需要另外再去修改spacemacs或emacs配置。
➜ tomtsang-rootsongjc-hugo git:(master) ✗ echo `pwd`/org /Users/tomtsang/bitbucket/qqbb/tomtsang-rootsongjc-hugo/org ➜ tomtsang-rootsongjc-hugo git:(master) ✗ ln -s `pwd`/org/ ~/org ➜ tomtsang-rootsongjc-hugo git:(master) ✗ l ~/org lrwxr-xr-x 1 tomtsang 60 Nov 13 14:55 /Users/tomtsang/org -&amp;gt; /Users/tomtsang/bitbucket/qqbb/tomtsang-rootsongjc-hugo/org/ ➜ tomtsang-rootsongjc-hugo git:(master) ✗ l ~/org/ total 48K drwxr-xr-x 13 tomtsang 416 Nov 13 14:53 . drwxr-xr-x 24 tomtsang 768 Nov 12 01:56 .. -rw-r--r-- 1 tomtsang 1.5K Nov 13 14:52 all-posts.org -rw-r--r-- 1 tomtsang 758 Nov 13 00:27 emacs-install-base-ubuntu.</description>
    </item>
    
    <item>
      <title>ubuntu安装最新emacs</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-install-base-ubuntu.html</link>
      <pubDate>Mon, 12 Nov 2018 20:08:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-install-base-ubuntu.html</guid>
      <description>Env  os: ubuntu  Step $sudo add-apt-repository ppa:ubuntu-elisp/ppa $sudo apt update $sudo apt install emacs-snapshot emacs-snapshot-el $emacs --version #查看emacs版本  REF ubuntu安装最新emacs</description>
    </item>
    
    <item>
      <title>emacs下使用hugo写文档</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-emacs.html</link>
      <pubDate>Mon, 12 Nov 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-emacs.html</guid>
      <description> emacs下使用hugo写文档, 主要有以下几种方式
无论是写哪种文档，都建议使用easy-mode创建,管理文档
写org文档 用ox-hugo写org文档 安装 使用 用org-mode写org文档 TODO 直接用easy-mode创建新的.org文档，header不正常 看了一下代码，好像是源码里写死，没有使用到 archetype/default.org文件呀。
 直接用easy-mode preview
可以看到，
TODO 避免删除后重新安装
这样子的信息。
  导出成markdown 发现写成org文档后，导出成markdown，会有content-table,这样，会有2个大纲，且，文章的时间不对。
直接导出成html 这时，没有大纲。但是，其它都还正常。
TODO Orgmode利用ox-pandoc导出成markdown Orgmode利用ox-pandoc导出hugo博客的workflow
写markdown文档 用markdown-mode写markdown文档 </description>
    </item>
    
    <item>
      <title>关于配置</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/env.html</link>
      <pubDate>Mon, 12 Nov 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/env.html</guid>
      <description> 因为我不希望总是去重复写我的配置，所以，我集中地把配置信息放在这里。
Env  os: mac Emacs: 26.1 Spacemacs: 0.300.0 Org: 9.1.2 Hugo: v0.41 ox-hugo: 20181106.2350 prodigy: 20180511.938  </description>
    </item>
    
    <item>
      <title>quickly create a new draft post</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/ox-hugo-quickly-create-a-draft-post.html</link>
      <pubDate>Mon, 12 Nov 2018 09:20:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/ox-hugo-quickly-create-a-draft-post.html</guid>
      <description>Of course I’m using a handy capture template, as provided by the ox-hugo docs. This lets me type `C-c c h` to quickly create a new draft post.
(with-eval-after-load &#39;org-capture (defun org-hugo-new-subtree-post-capture-template () &amp;quot;Returns `org-capture&#39; template string for new Hugo post. See `org-capture-templates&#39; for more information.&amp;quot; (let* ((title (read-from-minibuffer &amp;quot;Post Title: &amp;quot;)) ;Prompt to enter the post title (fname (org-hugo-slug title))) (mapconcat #&#39;identity `( ,(concat &amp;quot;* TODO &amp;quot; title) &amp;quot;:PROPERTIES:&amp;quot; ,(concat &amp;quot;:EXPORT_FILE_NAME: &amp;quot; fname) &amp;quot;:END:&amp;quot; &amp;quot;%?</description>
    </item>
    
    <item>
      <title>使用Org写Blog</title>
      <link>https://eiuapp.github.io/eiuapp-learn/org/org-blog-why.html</link>
      <pubDate>Fri, 09 Nov 2018 23:32:18 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/org/org-blog-why.html</guid>
      <description> Env    Step why  http://ju.outofmemory.cn/entry/204743  Ref  http://ju.outofmemory.cn/entry/204743  </description>
    </item>
    
    <item>
      <title>解决Mac下emacs中alt键不能使用问题</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-melt-no-use.html</link>
      <pubDate>Sat, 27 Oct 2018 13:16:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-melt-no-use.html</guid>
      <description> Env  os: mac  Step iTerm preferences-&amp;gt;Profiles
找到Left option key acts as一栏 选中+Esc选项
Terminal preferences-&amp;gt;Profiles-&amp;gt;keyboard
在使用Option键作为Meta一栏上打钩
Ref  https://www.jianshu.com/p/7432c3bfcc99  </description>
    </item>
    
    <item>
      <title>量化小学Lecture4的笔记</title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/jaqs-lecture4.html</link>
      <pubDate>Wed, 17 Oct 2018 09:18:35 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/jaqs-lecture4.html</guid>
      <description>Env  os: mac  Step 尝试用python做个股票绘图软件，要用到 finance 库，于是开始导入：
import matplotlib.finance as mpf  结果执行的时候直接报错：
ModuleNotFoundError: No module named &#39;matplotlib.finance&#39;  那么我们可以到 ipython 环境中去测试一下。
➜ ~ ipython Python 3.7.0 (default, Jun 28 2018, 07:39:16) Type &#39;copyright&#39;, &#39;credits&#39; or &#39;license&#39; for more information IPython 6.5.0 -- An enhanced Interactive Python. Type &#39;?&#39; for help. In [1]: from matplotlib.finance import candlestick_ohlc --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) &amp;lt;ipython-input-1-7ea83a59eaf3&amp;gt; in &amp;lt;module&amp;gt;() ----&amp;gt; 1 from matplotlib.</description>
    </item>
    
    <item>
      <title>Jaqs安装笔记</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-jaqs-install.html</link>
      <pubDate>Tue, 16 Oct 2018 11:38:26 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-jaqs-install.html</guid>
      <description>Env    Step ## 下载并安装 Anaconda chmod +x Anaconda3-5.3.0-MacOSX-x86_64.sh which sh sh ./Anaconda3-5.3.0-MacOSX-x86_64.sh ## 配置环境 cat /Users/tomtsang/.bash_profile source /Users/tomtsang/.bash_profile which python which python3 which python2 ## 这个还是原来的路径 python3 python which ipython ipython workon quant-py3 ## 验证，不影响其它环境 which python which python3 which python2 which deactivate deactivate ## 退出 virtualenv ## 安装依赖 snappy brew install snappy CPPFLAGS=&amp;quot;-I/usr/local/include -L/usr/local/lib&amp;quot; pip install python-snappy pip install PyHamcrest ## 安装 jaqs pip install jaqs ## 验证 ipython ## 输入 import jaqs ##  Ref  https://mirrors.</description>
    </item>
    
    <item>
      <title>python搭建多个互不干扰的开发环境</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-env-virtualenv.html</link>
      <pubDate>Mon, 15 Oct 2018 11:47:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-env-virtualenv.html</guid>
      <description>Env  os: mac  Step 安装 python3 Mac安装Python2和Python3、pip2和pip3、ipython2和ipython3
一、Homebrew的安装及使用  Homebrew的安装 Homebrew的使用  安装软件：brew install 软件名，例：brew install wget 搜索软件：brew search 软件名，例：brew search wget 卸载软件：brew uninstall 软件名，例：brew uninstall wget 更新所有软件：brew update ⚠️通过 update 可以把包信息更新到最新，不过包更新是通过git命令，所以要先通过 brew install git 命令安装git。 安装git 更新具体软件：brew upgrade 软件名 ，例：brew upgrade git 显示已安装软件：brew list 查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git ⚠️brew home指令是用浏览器打开官方网页查看软件信息 查看那些已安装的程序需要更新： brew outdated 显示包依赖：brew reps  二、安装Python3和pip3  安装Python3
  brew install python   测试  安装pip2</description>
    </item>
    
    <item>
      <title>Mac Sed</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-sed.html</link>
      <pubDate>Mon, 08 Oct 2018 12:08:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-sed.html</guid>
      <description>由于Mac OS X自带的sed等命令行工具是基于BSD的，有一些缺陷和不足，比如sed不支持\t来表示TAB
Env  os: mac  报错如下：
➜ home git:(master) ✗ grep &amp;quot;finsoft.info&amp;quot; -rl ./CNAME ./CNAME ➜ home git:(master) ✗ ➜ home git:(master) ✗ grep &amp;quot;finsoft.info&amp;quot; -rl ./CNAME | xargs sed -i &amp;quot;s/finsoft.info/qqbb.app/g&amp;quot; sed: 1: &amp;quot;./CNAME&amp;quot;: invalid command code . ➜ home git:(master) ✗  Step ➜ ~ brew install coreutils ➜ ~ vi ~/.zshrc ➜ ~ source ~/.zshrc ➜ ~ tail ~/.zshrc ## coreutil export PATH=&amp;quot;$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH&amp;quot; export MANPATH=&amp;quot;$(brew --prefix coreutils)/libexec/gnuman:$MANPATH&amp;quot; ➜ ~ brew install gnu-sed --with-default-names ➜ ~  Ref  https://blog.</description>
    </item>
    
    <item>
      <title>Spacemacs Use Zilongshanren Spacemacs Private</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-use-zilongshanren-spacemacs-private.html</link>
      <pubDate>Tue, 28 Aug 2018 23:53:02 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-use-zilongshanren-spacemacs-private.html</guid>
      <description>想直接使用，zilongshanren的 配置
Env  os: mac os 10.13.3 emacs: 26.1 spacemacs： 0.200.13@26.1  prepare 在使用前，我们可以安装一些软件
brew install emacs brew install ispell brew install trash brew tap caskroom/fonts &amp;amp;&amp;amp; brew cask install font-source-code-pro brew install ctags-exuberant  Step 现在直接就报了一个错误。见 https://github.com/zilongshanren/spacemacs-private/issues/180
然后，这个时候，从各地方，获知，要用 spacemacs 源码的 devlop分支，而不是master分支。所以。要重新clone一下。
➜ .emacs.d git:(develop) pwd /Users/tomtsang/.emacs.d ➜ .emacs.d git:(develop) git remote -v origin	https://github.com/syl20bnr/spacemacs.git (fetch) origin	https://github.com/syl20bnr/spacemacs.git (push) ➜ .emacs.d git:(develop) git branch -v * develop c122eb6a0 lsp-layer configuration and building blocks for derived layers.</description>
    </item>
    
    <item>
      <title>Spacemacs Qa 1</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-qa-1.html</link>
      <pubDate>Sat, 25 Aug 2018 12:33:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-qa-1.html</guid>
      <description> Env  os: mac os 10.13.3 emacs: 26.1 spacemacs： 0.200.13@26.1  Step QA Q:
Description :octocat:
Error (use-package): org-projectile :config: Symbol&#39;s function definition is void: org-projectile-per-project  A:
参考 https://github.com/syl20bnr/spacemacs/issues/9374 知道
I also faced this issue today after updating all packages.
find ~/.emacs.d/elpa/org-projectile-20180601.242/ -name &amp;quot;*elc&amp;quot; -delete and restarting fixed it.
Ref  https://github.com/syl20bnr/spacemacs/issues/9374  </description>
    </item>
    
    <item>
      <title>Emacs Flycheck Eslint</title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-flycheck-eslint.html</link>
      <pubDate>Thu, 23 Aug 2018 15:05:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs-flycheck-eslint.html</guid>
      <description>Env  os: mac emacs: GNU Emacs 22.1.1  Step https://github.com/flycheck/flycheck/issues/1195
遇到下面的情形，就按提示，把这些个包，一个一个地安装。
➜ tmp git:(master) ✗ eslint -v v5.4.0 { ➜ tmp git:(master) ✗ ls test.js ➜ tmp git:(master) ✗ cat test.js var a=1; var b = 2; vardf c=a+b; function a(){ console.log(&amp;quot;hello world&amp;quot;) } ➜ tmp git:(master) ✗ eslint test.js Oops! Something went wrong! :( ESLint: 5.4.0. ESLint couldn&#39;t find the plugin &amp;quot;eslint-plugin-import&amp;quot;. This can happen for a couple different reasons: 1.</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/proxy.html</link>
      <pubDate>Fri, 10 Aug 2018 09:49:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/proxy.html</guid>
      <description>正确的设置代理
Env  os: linux  Step root@tom:~/proxy# cat ./proxy_on.sh #!/bin/sh # for terminal export proxyserveraddr=127.0.0.1 export proxyserverport=8118 export HTTP_PROXY=&amp;quot;http://$proxyserveraddr:$proxyserverport/&amp;quot; export HTTPS_PROXY=&amp;quot;https://$proxyserveraddr:$proxyserverport/&amp;quot; export FTP_PROXY=&amp;quot;ftp://$proxyserveraddr:$proxyserverport/&amp;quot; export SOCKS_PROXY=&amp;quot;socks://$proxyserveraddr:$proxyserverport/&amp;quot; export NO_PROXY=&amp;quot;localhost,127.0.0.1,localaddress,.localdomain.com,200.200..;11.11.0.0;&amp;quot; export http_proxy=&amp;quot;http://$proxyserveraddr:$proxyserverport/&amp;quot; export https_proxy=&amp;quot;https://$proxyserveraddr:$proxyserverport/&amp;quot; export ftp_proxy=&amp;quot;ftp://$proxyserveraddr:$proxyserverport/&amp;quot; export socks_proxy=&amp;quot;socks://$proxyserveraddr:$proxyserverport/&amp;quot; export no_proxy=&amp;quot;localhost,127.0.0.1,localaddress,.localdomain.com,200.200..;11.11.0.0,10.88..;&amp;quot; # for chrome,firefox gsettings set org.gnome.system.proxy ignore-hosts &amp;quot;[&#39;localhost&#39;, &#39;11.11.0.0/16&#39;, &#39;200.200.0.0/16&#39;, &#39;*.localdomain.com&#39;, &#39;10.88.0.0/16&#39;, &#39;10.88.88.116&#39; ]&amp;quot; # for apt-get cat &amp;lt;&amp;lt;-EOF| sudo tee /etc/apt/apt.conf Acquire::http::proxy &amp;quot;http://$proxyserveraddr:$proxyserverport/&amp;quot;; Acquire::https::proxy &amp;quot;https://$proxyserveraddr:$proxyserverport/&amp;quot;; Acquire::ftp::proxy &amp;quot;ftp://$proxyserveraddr:$proxyserverport/&amp;quot;; Acquire::socks::proxy &amp;quot;socks://$proxyserveraddr:$proxyserverport/&amp;quot;; EOF  root@tom:~/proxy# cat proxy_off.</description>
    </item>
    
    <item>
      <title>Gamil Mail Server Domain</title>
      <link>https://eiuapp.github.io/eiuapp-learn/google/gamil-mail-server-domain.html</link>
      <pubDate>Thu, 09 Aug 2018 15:44:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/google/gamil-mail-server-domain.html</guid>
      <description> Env    Step 因为我们 bitspace.link 的域名，注册国家为香港，因此您无法使用中国电话进行验证。
owen 您好， 感谢您接听我的电话。很高兴与您取得联系。 我了解您无法完成手机验证。由于您注册国家为香港，因此您无法使用中国电话进行验证。 经调查，您可等待九天让系统自动删除帐户后再重新注册。或者您也可以通过以下所提供的CNAME纪录值来验证您的网域拥有权以让我协助您删除帐户： 将以下的CNAME 纪录值根据主机及指向所需的DNS纪录值添加至您的网域管理控制台： -主机: deleteGAPPSnotBefore20180809utc -目标/指向: case-16595399-for-bitspace.link-at.google.com -Time to live (TTL): 3600 如果您的网域代管商并非您的网域注册商，请确保您是透过网域代管商修改您的CNAME 记录值。更多关于建立CNAME记录值的步骤与相关资讯，请点阅支援中心文章： https://support.google.com/a/answer/47283?hl=zh-Hant 。若您在建立CNAME 记录值时需要协助，请联系您的网域代管商进一步协助进行操作。 一旦完成了以上的验证，请回信告知以便我可以验证您对于“bitspace.link” 的拥有权。 同时请您提供您无法使用电话号码验证的错误信息截图，之后我将协助进行删除帐户。之后我将协助进行删除帐户。 若您还有其他疑问，您可以回覆此邮件以让我知道。我很乐意继续为您提供协助。  与google沟通，需要在Domain Name中配置
配置如下：
Ref    </description>
    </item>
    
    <item>
      <title>Keyboard Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/keyboard/keyboard-ubuntu.html</link>
      <pubDate>Wed, 08 Aug 2018 00:29:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/keyboard/keyboard-ubuntu.html</guid>
      <description>通过xmodmap修改ubuntu系统下的键盘布局
因为某种需求，需要把 右ctrl与右alt 互换
Env  os: ubuntu desktop 16.04 target: swap Right Ctrl with Right Alt on my keyboard  xmodmap Installation tom@tom:~$ cat ~/.Xmodmap clear control clear mod1 keycode 105 = Alt_R Meta_R keycode 108 = Control_R add control = Control_L Control_R add mod1 = Alt_R Meta_R tom@tom:~$ tom@tom:~$ xmodmap ~/.Xmodmap tom@tom:~$  这样，成功了。
然后放到.bashrc中，这个文件每次启动shell都会执行，但结果确是：每启动一次shell,Ctrl和CapLock就交换一次，意味着我不知道下一时刻,哪个是Ctrl键，哪个是CapLock键。
最后发现，在~目录添加一个.bash_profile文件，并将xmodmap脚本的执行放入其中。问题就解决了。
tom@tom:~$ cat .bash_profile xmodmap ~/.Xmodmap tom@tom:~$ source .bash_profile  gnome-tweak-tool(不成功) gnome-tweak-tool 可以方便地修改某些键盘，如：互换 左ctrl与CapsLock</description>
    </item>
    
    <item>
      <title>Keyboard</title>
      <link>https://eiuapp.github.io/eiuapp-learn/keyboard/keyboard.html</link>
      <pubDate>Wed, 08 Aug 2018 00:28:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/keyboard/keyboard.html</guid>
      <description> Step ubuntu  xmodmap gnome-tweak-tool  mac  Karabiner Elements  windows  autohotkey  Ref    </description>
    </item>
    
    <item>
      <title>Ubuntu Share File to Virtulbox Win7</title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/ubuntu-share-file-to-virtulbox-win7.html</link>
      <pubDate>Fri, 03 Aug 2018 23:10:46 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/ubuntu-share-file-to-virtulbox-win7.html</guid>
      <description> Env  宿主机: ubuntu desktop 16 虚拟机软件: virtualbox 虚拟机: win7  Step 思路1 因为虚拟机是win7,那就直接通过 ubuntu如何访问windows共享文件夹 完成就可以了。
思路2  https://www.linuxidc.com/Linux/2012-11/74195p3.htm http://xylonwang.iteye.com/blog/2221475  上面的方法，尝试，没有成功。
Ref  https://www.linuxidc.com/Linux/2012-11/74195p3.htm http://xylonwang.iteye.com/blog/2221475  </description>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/emacs.html</link>
      <pubDate>Wed, 01 Aug 2018 00:09:53 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/emacs.html</guid>
      <description> Step  Emacs 快速指南 - 原生中文手册 怎样学习 Emacs？ ergoemacs.org popkit evil  已经看过的  spacemacs 快捷键 spacemacs快捷键2 Emacs中那些不常用的行操作命令 写给 Pythonist 的 Spacemacs 入门指北 Spacemacs 使用总结  21天学会Emacs  21天学会Emacs http://book.emacs-china.org/  spacemacs  Spacemacs 使用总结 Spacemacs 基础 spacemacs 系列&amp;ndash;安装和基础配置  Ref  https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/  </description>
    </item>
    
    <item>
      <title>Markdown Style Guide</title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/markdown-style-guide.html</link>
      <pubDate>Wed, 01 Aug 2018 00:00:23 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/markdown-style-guide.html</guid>
      <description> Step http://einverne.github.io/markdown-style-guide/zh.html
Ref  http://einverne.github.io/markdown-style-guide/zh.html  </description>
    </item>
    
    <item>
      <title>Privoxy Mac</title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/privoxy-mac.html</link>
      <pubDate>Sun, 15 Jul 2018 14:16:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/privoxy-mac.html</guid>
      <description>mac osx 下面通过 privoxy 把shadowsocks 转换成http代理
Env  os: mac  Step ➜ ~ brew install privoxy ... ... To have launchd start privoxy now and restart at login: brew services start privoxy Or, if you don&#39;t want/need a background service you can just run: privoxy /usr/local/etc/privoxy/config ==&amp;gt; Summary 🍺 /usr/local/Cellar/privoxy/3.0.26: 99 files, 2.2MB ==&amp;gt; Caveats ==&amp;gt; privoxy To have launchd start privoxy now and restart at login: brew services start privoxy Or, if you don&#39;t want/need a background service you can just run: privoxy /usr/local/etc/privoxy/config ➜ ~  修改配置文件/usr/local/etc/privoxy/config</description>
    </item>
    
    <item>
      <title>Golang Gvm</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang-gvm.html</link>
      <pubDate>Sun, 15 Jul 2018 14:09:03 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang-gvm.html</guid>
      <description>Go 语言多版本安装及管理利器 - GVM
Env  golang  Step ### 安装指定版本 golang
这里要科学上网
通过 gvm 安装指定 go版本
➜ ~ gvm install go1.10 Downloading Go source...  但是这个时候，没有指定你会使用哪个版本
➜ ~ gvm list gvm gos (installed) go1.10 system ➜ ~  通过 gvm 指定 默认使用版本
➜ ~ gvm use go1.10 --default Now using version go1.10 ➜ ~ gvm list gvm gos (installed) =&amp;gt; go1.10 system ➜ ~  看一下go的环境吧
➜ ~ go env GOARCH=&amp;quot;amd64&amp;quot; GOBIN=&amp;quot;&amp;quot; GOCACHE=&amp;quot;/Users/tomtsang/Library/Caches/go-build&amp;quot; GOEXE=&amp;quot;&amp;quot; GOHOSTARCH=&amp;quot;amd64&amp;quot; GOHOSTOS=&amp;quot;darwin&amp;quot; GOOS=&amp;quot;darwin&amp;quot; GOPATH=&amp;quot;/Users/tomtsang/.</description>
    </item>
    
    <item>
      <title>Golang Ide Gogland</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang-ide-gogland.html</link>
      <pubDate>Sun, 15 Jul 2018 13:55:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang-ide-gogland.html</guid>
      <description> Jetbrains 家族利器之 Gogland 简明教程
Env  os: mac  Step 安装 gvm 参考 Go 语言多版本安装及管理利器 - GVM
并 通过 gvm 安装指定 go版本
安装 goland 略
激活 gogland mac版本 从 GoLand注册码 找到 https://www.imsxm.com/jetbrains-license-server.html ，从而知道了 在 JetBrains 授权服务器(License Server):填入 http://www.activejetbrains.gq，即可完成激活。
win10 版本 尝试 https://blog.csdn.net/sunylat/article/details/55096944
三、设置 Gogland 的 GOROOT 如果之前已安装 gvm 则，这里会自动识别出来。
这里如果说没有自动找到之前 gvm 安装的go版本，要重启一下mac。
Ref  https://www.imsxm.com/jetbrains-license-server.html https://bingohuang.com/go-gvm/ https://gocn.vip/article/445  </description>
    </item>
    
    <item>
      <title>Win10 Share Files</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/win10-share-files.html</link>
      <pubDate>Sat, 14 Jul 2018 17:51:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/win10-share-files.html</guid>
      <description> 两台win10 电脑怎么共享文件夹
Env  os: win10  Step 两台win10 电脑怎么共享文件夹
Ref  https://jingyan.baidu.com/article/495ba841b42de438b20ede5e.html https://jingyan.baidu.com/article/358570f6633ba4ce4624fc48.html  </description>
    </item>
    
    <item>
      <title>U Shendu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/u-shendu.html</link>
      <pubDate>Sat, 14 Jul 2018 17:49:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/u-shendu.html</guid>
      <description> 当你忘记了密码，可以使用u深度重置用户密码
Env  os: win10  Step u深度u盘启动盘制作教程
u深度重置用户密码
Ref  https://jingyan.baidu.com/article/6b97984da3b9851ca2b0bfec.html http://upzxt.win7qjb.com/upzxtjc/794.html https://jingyan.baidu.com/article/90808022f724c6fd91c80fa6.html https://jingyan.baidu.com/article/6b97984da3b9851ca2b0bfec.html  </description>
    </item>
    
    <item>
      <title>Linux No Passwd Login</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-no-passwd-login.html</link>
      <pubDate>Sat, 14 Jul 2018 17:44:08 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-no-passwd-login.html</guid>
      <description>关闭SSH传统密码登陆方式
Env  os: linux  Step 加入登录公钥 自己创建 或 从其它地方导入 .ssh/authorized_keys 文件
root@ubuntu:/home/ubuntu# mv ssh/ .ssh/ root@ubuntu:/home/ubuntu# chmod 600 .ssh/authorized_keys  修改SSH的配置文件/etc/ssh/sshd_config root@ubuntu:/home/ubuntu# vi /etc/ssh/sshd_config root@ubuntu:/home/ubuntu# grep PasswordAuthentication -rn /etc/ssh/sshd_config 52:#PasswordAuthentication yes 53:PasswordAuthentication no 83:# PasswordAuthentication. Depending on your PAM configuration, 87:# PAM authentication, then enable this but set PasswordAuthentication root@ubuntu:/home/ubuntu#  注意，这个地方，一定要把 .ssh 文件夹的属性设置正确，然后重启sshd服务，否则会有如下错误
ubuntu@ubuntu:~$ sudo systemctl status sshd ● ssh.service - OpenBSD Secure Shell server Loaded: loaded (/lib/systemd/system/ssh.</description>
    </item>
    
    <item>
      <title>Gitlab Authority</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-authority.html</link>
      <pubDate>Thu, 12 Jul 2018 11:07:08 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-authority.html</guid>
      <description> Env  gitlab: 10.0.8  Step 公司切入Gitlab来管理代码已经有一年多了，其中遇到很多权限问题，如没有权限clone、没有权限提交代码等等，这里做个总结. 权限分为访问权限和行为权限两个层次.
访问权限 – Visibility Level 这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含3种
 Private – 私有，只有属于该项目成员才有原先查看 Internal – 内部，用个Gitlab账号的人都可以clone Public – 公开，任何人可以clone  行为权限 在满足行为权限之前，必须具备访问权限（如果没有访问权限，那就无所谓行为权限了），行为权限是指对该项目进行某些操作，比如提交、创建问题、创建新分支、删除分支、创建标签、删除标签等.
角色 Gitlab定义了以下几个角色:
 Guest – 访客 Reporter – 报告者; 可以理解为测试员、产品经理等，一般负责提交issue等 Developer – 开发者; 负责开发 Master – 主人; 一般是组长，负责对Master分支进行维护 Owner – 拥有者; 一般是项目经理  权限 不同角色，拥有不同权限，下面列出Gitlab各角色权限
Ref  https://www.cnblogs.com/dzcWeb/p/8919970.html http://ju.outofmemory.cn/entry/273281  </description>
    </item>
    
    <item>
      <title>Vscode Change File Eol</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-change-file-eol.html</link>
      <pubDate>Wed, 11 Jul 2018 11:21:21 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-change-file-eol.html</guid>
      <description> vscode 编辑器如何在用户配置文件里修改 行尾序列
Env  vscode  Step 文件，首选项，设置，搜索“files.eol”，然后编辑，然后就保存在用户设置或者工作区设置。
下次打开一个新的文件时，就是 LF(\n)结尾的换行符了。
对于已有的文件，想批量转换的，请使用：
另外一个方法是使用git-windows自带有dos2unix.exe, 在git bash中执行 find . -type f -exec dos2unix {} \;批量转换
Ref  https://segmentfault.com/q/1010000006886783/a-1020000006890519 https://segmentfault.com/q/1010000011799577  </description>
    </item>
    
    <item>
      <title>Change System Datetime Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/change-system-datetime-base-ubuntu.html</link>
      <pubDate>Wed, 11 Jul 2018 10:40:10 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/change-system-datetime-base-ubuntu.html</guid>
      <description>Env  os: ubuntu16  Step 原理 需要取消自动从互联网同步时间才可以的
timedatectl set-ntp 0  上面的命令可以关闭自动同步，然后你再设置就好了
如果又要打开可以运行
timedatectl set-ntp 1  示例 ubuntu@ip-172-31-46-220:~$ date Wed Jul 11 02:08:35 UTC 2018 ubuntu@ip-172-31-46-220:~$ sudo su root@ip-172-31-46-220:/home/ubuntu# timedatectl set-ntp 0 root@ip-172-31-46-220:/home/ubuntu# date -s &amp;quot;2018-07-12 02:08&amp;quot; Thu Jul 12 02:08:00 UTC 2018 root@ip-172-31-46-220:/home/ubuntu# hwclock --systohc root@ip-172-31-46-220:/home/ubuntu# date Thu Jul 12 02:08:06 UTC 2018 root@ip-172-31-46-220:/home/ubuntu# date -s &amp;quot;2018-07-12 02:10&amp;quot; Thu Jul 12 02:10:00 UTC 2018 root@ip-172-31-46-220:/home/ubuntu#  修改成功了</description>
    </item>
    
    <item>
      <title>Hugo Install Base Win10</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-install-base-win10.html</link>
      <pubDate>Wed, 11 Jul 2018 10:34:04 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-install-base-win10.html</guid>
      <description> win10中安装hugo
Env  os: win10 sh: bash  Step Chocolatey (Windows) If you are on a Windows machine and use Chocolatey for package management, you can install Hugo with the following one-liner:
choco install hugo -confirm  安装之后，很重要的一步，是重启 git shell或者是cmd
Ref  https://gohugo.io/getting-started/installing https://www.howtogeek.com/194041/how-to-open-the-command-prompt-as-administrator-in-windows-8.1/  </description>
    </item>
    
    <item>
      <title>Gitlab CI Step by Step</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-ci-step-by-step.html</link>
      <pubDate>Tue, 10 Jul 2018 22:26:33 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-ci-step-by-step.html</guid>
      <description>gitlab-ci 一步一步学
Env  os: ubuntu docker: 17.03.2 gitlab: 10.2.8(比特空间提供)
 gitlab-runner:
  Step 理论 了解  用 GitLab CI 进行持续集成, 这篇文章是写得我认为最合适入门的。
 gitlab ci quick-start有一个对应的中文版本-GitLab CI/CD快速入门。
  安装 gitlab 略
安装 gitlab-runner  可以先直接看 一步一步完成GitLab Runner持续化自动部署 的前3大点，就是安装的过程，我也就是这么安装成功的。  从 https://docs.gitlab.com/runner/install/ 了解到 docker 安装 gitlab-runner
docker run -d --name gitlab-runner --restart always \ -v /srv/gitlab-runner/config:/etc/gitlab-runner \ -v /var/run/docker.sock:/var/run/docker.sock \ gitlab/gitlab-runner:v11.0.0  registering-a-specific-runner 获取Gitlab项目的Token https://blog.csdn.net/u011215669/article/details/80458972
register https://docs.gitlab.com/ce/ci/runners/README.html#registering-a-specific-runner
找到</description>
    </item>
    
    <item>
      <title>Bitbucket User Share Repo</title>
      <link>https://eiuapp.github.io/eiuapp-learn/bitbucket/bitbucket-user-share-repo.html</link>
      <pubDate>Sat, 07 Jul 2018 16:29:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/bitbucket/bitbucket-user-share-repo.html</guid>
      <description> bitbucket组来实现不同用户间的共同管理某一个具体repo
Env 2个bitbucket
 R: repo, 仓库R G: 组 A: UserA, 拥有仓库R，拥有组G，要分享给用户B B：UserB, 接受分享，来管理R  Step 登录A用户，新建立一个分组G
管理组G, 添加用户B
登录bitbucket&amp;gt;进入仓库R&amp;gt;设置&amp;gt;用户和组的访问&amp;gt;用户组&amp;gt;选择一个组G&amp;gt;管理&amp;gt;添加
退出登录
登录B用户, 确认加入组G
git clone git@bitbucket.org:UserA/Repo.git
这样就实现了不同用户间的共同管理某一个具体repo, 而且，如果不希望用户B继续管理repo,则只需要从 组G中把 用户B 删除就可以了。
TODO 后续，真的是可以直接将gitee中的私有项目放到 bitbucket中
gitee 只有一个优点，拉取速度还行，但是，这个好像没有什么用。 - 开放项目，没必要放上面，比不过github - 私有项目，限制多，而且功能没有bitbucket强
Ref    </description>
    </item>
    
    <item>
      <title>Mysql User Create</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-user-create.html</link>
      <pubDate>Wed, 04 Jul 2018 14:40:22 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-user-create.html</guid>
      <description> mysql创建用户
Env  mysql: 5.7  Step MariaDB [(none)]&amp;gt; create user &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&amp;gt; grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&amp;gt; flush privileges; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&amp;gt;  Ref    </description>
    </item>
    
    <item>
      <title>Qor Character Set Database Utf8</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-character-set-database-utf8.html</link>
      <pubDate>Wed, 04 Jul 2018 10:53:56 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-character-set-database-utf8.html</guid>
      <description>qor通过字符集解决输入中文报错
Env  os: ubuntu16 go: 1.10.2  Step 输入中文会有 Error 1366: Incorrect string value: &#39;\xE4\xB8\xAD&#39; for column &#39;name&#39; at row 1这样的报错。
这个错误主要的原因，就是插入数据的时候，数据库不认这个数据。那我们第一个想到的就是字符集的问题了。（可以先手动 insert into 方式测试）
mysql 查看字符集 新安装的mysql数据库, 默认字符集是 latin1.
mysql&amp;gt; show collation like &#39;gbk%&#39;; +----------------+---------+----+---------+----------+---------+ | Collation | Charset | Id | Default | Compiled | Sortlen | +----------------+---------+----+---------+----------+---------+ | gbk_chinese_ci | gbk | 28 | Yes | Yes | 1 | | gbk_bin | gbk | 87 | | Yes | 1 | +----------------+---------+----+---------+----------+---------+ 2 rows in set (0.</description>
    </item>
    
    <item>
      <title>Qor Admin Test Change Sidebar</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test-change-sidebar.html</link>
      <pubDate>Tue, 03 Jul 2018 19:02:41 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test-change-sidebar.html</guid>
      <description>qor/admin 项目的个性化配置(sidebar)
这里使用 qor/admin 项目的 test 文件夹中的用例，启动。
Env  os: ubuntu16 go: 1.10.2  Step 总共修改3个文件
 dummy/admin.go dummy/models.go main.go  tom@tom-w10vbud16:~/golang/qor/src/qor/tom/admin/admin/tests$ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) modified: dummy/admin.go modified: dummy/models.go modified: main.go no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;) tom@tom-w10vbud16:~/golang/qor/src/qor/tom/admin/admin/tests$  修改 main.</description>
    </item>
    
    <item>
      <title>Qor Admin Test Change Title</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test-change-title.html</link>
      <pubDate>Tue, 03 Jul 2018 18:45:58 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test-change-title.html</guid>
      <description>qor/admin 项目的个性化配置(依赖包)
这里使用 qor/admin 项目的 test 文件夹中的用例，启动。
Env  os: ubuntu16 go: 1.10.2  Step 现在我们启动项目后，会先安装依赖，再配置依赖包。
安装依赖 查看 test文件夹下的文件，找出依赖包，整理一下，安装
go get github.com/qor/media go get github.com/jinzhu/gorm go get github.com/qor/admin go get github.com/qor/qor  个性化配置 找到go get文件 以我的代码习惯，go get文件放在了 $HOME/golang/lib 中
所以qor/admin项目文件，就在 $HOME/golang/lib/src/github.com/qor/admin 中
cd ~/golang/lib/src/github.com/qor/admin  配置logo logo 在 views/assets/images/logo.png 中，替换就可以了。
配置左下角的 Powered by Powered by 在 views/shared/sidebar.tmpl
配置标签页面的标题 标签页面的标题 在 views/layout.tmpl
Command ubuntu@VM-0-12-ubuntu:~/golang/lib/src/github.com/qor/admin$ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;.</description>
    </item>
    
    <item>
      <title>Qor Admin Test</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test.html</link>
      <pubDate>Tue, 03 Jul 2018 18:16:42 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-admin-test.html</guid>
      <description>qor/admin 项目的 test 文件夹中的用例
Env  os: ubuntu16 go: 1.10.2  Step 安装依赖 查看 test文件夹下的文件，找出依赖包，整理一下，安装
go get github.com/qor/media go get github.com/jinzhu/gorm go get github.com/qor/admin go get github.com/qor/qor  配置mysql tom@tom-w10vbud16:~/golang/qor/src/qor/tom/admin/admin/tests$ go run main.go Listening on: 3000 panic: Error 1045: Access denied for user &#39;qor&#39;@&#39;localhost&#39; (using password: YES) goroutine 1 [running]: github.com/qor/qor/test/utils.TestDB(0x30) /home/tom/golang/lib/src/github.com/qor/qor/test/utils/test_db.go:36 +0x585 github.com/qor/admin/tests/dummy.NewDummyAdmin(0xc42031bf1f, 0x1, 0x1, 0xa791a0) /home/tom/golang/lib/src/github.com/qor/admin/tests/dummy/admin.go:15 +0x37 main.main() /home/tom/golang/qor/src/qor/tom/admin/admin/tests/main.go:22 +0x187 exit status 2 tom@tom-w10vbud16:~/golang/qor/src/qor/tom/admin/admin/tests$  有报错了。报错，说明了，在我们的 go get github.</description>
    </item>
    
    <item>
      <title>Grep Exclude Many File</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/grep-exclude-many-file.html</link>
      <pubDate>Tue, 03 Jul 2018 11:20:35 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/grep-exclude-many-file.html</guid>
      <description> grep 同时排除多个关键字,多个文件
Step grep -v 排除文件 | grep -v 排除文件
tom@tom-w10vbud16:~$ ifconfig | grep inet | grep -v inet6 | grep -v 127.0.0.1 inet addr:172.17.0.1 Bcast:0.0.0.0 Mask:255.255.0.0 inet addr:10.88.88.130 Bcast:10.88.88.255 Mask:255.255.255.0 inet addr:10.42.0.0 Bcast:0.0.0.0 Mask:255.255.255.255 tom@tom-w10vbud16:~$  Ref  https://blog.csdn.net/qq70945934/article/details/77573870  </description>
    </item>
    
    <item>
      <title>Qor Doc Get Started</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-doc-get-started.html</link>
      <pubDate>Mon, 02 Jul 2018 18:54:49 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-doc-get-started.html</guid>
      <description>qor step by step
Qor Doc中的Get Started
Env  os: ubuntu16 go: 1.10.2  Step root@tom-w10vbud16:/home/tom/test# cd /home/tom/golang/ root@tom-w10vbud16:/home/tom/golang# mkdir qor/src -p root@tom-w10vbud16:/home/tom/golang# cd qor/src/ root@tom-w10vbud16:/home/tom/golang/qor/src# git clone https://github.com/qor/qor root@tom-w10vbud16:/home/tom/golang/qor/src# ls qor/ bower.json config.go context.go errors.go gulpfile.js LICENSE.txt package.json README.md resource test test_all.sh update_all_qor_repos.sh utils yarn.lock  get_started https://doc.getqor.com/get_started.html
配置 GOPATH 把 /home/tom/golang/qor 加入 GOPATH
root@tom-w10vbud16:/home/tom/golang/qor/src# vi ~/.bashrc root@tom-w10vbud16:/home/tom/golang/qor/src# source ~/.bashrc root@tom-w10vbud16:/home/tom/golang/qor/src# export | grep go declare -x GOPATH=&amp;quot;/home/tom/golang/lib:/home/tom/golang/goc2p:/home/tom/ztom/project/github/ERP/goERP:/home/tom/golang/qor&amp;quot; declare -x GOROOT=&amp;quot;/usr/local/go&amp;quot; declare -x OLDPWD=&amp;quot;/home/tom/golang&amp;quot; declare -x PATH=&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/go/bin:/home/tom/golang/lib/bin:/usr/local/go/bin:/home/tom/golang/lib/bin&amp;quot; declare -x PWD=&amp;quot;/home/tom/golang/qor/src&amp;quot;  root@tom-w10vbud16:/home/tom/golang/qor/src# vi main.</description>
    </item>
    
    <item>
      <title>Erp Golang</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/erp-golang.html</link>
      <pubDate>Mon, 02 Jul 2018 16:51:41 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/erp-golang.html</guid>
      <description>Any ERP system written in Go
非开源 https://www.obs2go.com/
open source https://golanglibs.com/search?q=erp&amp;amp;sort=top
中英文 https://getqor.com/cn https://github.com/qor/qor https://github.com/reechou/erp
中文版 https://github.com/hexiaoyun128/ERP.git https://www.ctolib.com/hexiaoyun128-ERP.html
hexya 无中文 http://hexya.io/
中文版 https://github.com/JoyiSystem/goerp
golang-erp https://github.com/odenktools/golang-erp</description>
    </item>
    
    <item>
      <title>Qor Example Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor-example-install.html</link>
      <pubDate>Mon, 02 Jul 2018 16:32:56 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor-example-install.html</guid>
      <description>qor-example 安装启动
Env  os: ubuntu16 go: 1.10.2  Step 设置 GOPATH 添加 /home/tom/golang/qor为GOPATH
root@tom-w10vbud16:/home/tom/ztom/bits/pem/aws/aws-account-b/pem# export | grep go declare -x GOPATH=&amp;quot;/home/tom/golang/lib:/home/tom/golang/goc2p:/home/tom/ztom/project/github/ERP/goERP:/home/tom/golang/qor&amp;quot; declare -x GOROOT=&amp;quot;/usr/local/go&amp;quot; declare -x PATH=&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/go/bin:/home/tom/golang/lib/bin&amp;quot; root@tom-w10vbud16:/home/tom/ztom/bits/pem/aws/aws-account-b/pem#  安装 # Get example app $ go get -u github.com/qor/qor-example # Setup database $ mysql -uroot -p mysql&amp;gt; CREATE DATABASE IF NOT EXISTS qor_example DEFAULT CHARSET utf8 COLLATE utf8_general_ci; # Run Application $ cd $GOPATH/src/github.com/qor/qor-example $ go run main.go  注意，这里不能直接使用 mysql&amp;gt; CREATE DATABASE qor_example;因为这样会使用默认字符集latin1，导致中文无法输入，且会报错。</description>
    </item>
    
    <item>
      <title>Kubernetes Role</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-role.html</link>
      <pubDate>Sun, 01 Jul 2018 20:50:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-role.html</guid>
      <description> Env  kubernetes: 1.10  Step &amp;ldquo;我打你&amp;rdquo;,
 动作执行对象是 我, 动作是 打 动作被执行对象是 你  在namespace级别：
role: 是`动作`与`动作被执行对象`的规则，比如：&amp;quot;打你&amp;quot; rolebing: 是绑定`动作`与`动作对象`，比如：指定 &amp;quot;我&amp;quot;与&amp;quot;打你&amp;quot; 相绑定。  在cluster级别：
clusterrole clusterrolebing  Ref  https://live.vhall.com/829906699  </description>
    </item>
    
    <item>
      <title>Mac</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/mac.html</link>
      <pubDate>Sat, 30 Jun 2018 10:46:27 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/mac.html</guid>
      <description> Env    Step mysql  sequelpro  Karabiner Elements  https://pqrs.org/osx/karabiner/ Karabiner Elements 键位定制神器 https://www.jianshu.com/p/47d5de7f12bc https://github.com/tekezo/Karabiner-Elements https://note.wuze.me/liu-shui/macos-zhi-wai-jie-hhkb-jian-pan-karabiner-elements-pei-zhi  ###
 Manico, 一款快速启动及切换 Mac App 的工具 KeyCastr: 录屏好帮手，实时显示按键操作的小工具
 dash
  Ref  https://zhuanlan.zhihu.com/p/29982257  </description>
    </item>
    
    <item>
      <title>Rancher Add Worker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-add-worker.html</link>
      <pubDate>Sat, 30 Jun 2018 10:22:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-add-worker.html</guid>
      <description> Env    Step QA 报 certificate has expired or is not yet valid 错误 Q: 希望新添加1个 worker， 报 certificate has expired or is not yet valid 错误，应该如何修正？ A:
Ref  https://www.cnblogs.com/xzkzzz/p/9106218.html  </description>
    </item>
    
    <item>
      <title>Rancher Service Discovery</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-service-discovery.html</link>
      <pubDate>Sat, 30 Jun 2018 09:06:04 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-service-discovery.html</guid>
      <description> rancher 中的 service discovery
Env  rancher: v2.0.2  Step service discovery对应于 k8s的service
 external IP addresses 相当于 DNS的A记录的解析 An external hostname 相当于 DNS的CNAME的域名转换 Alias of another DNS record&amp;rsquo;s value 相当于 指向另外一个DNS的记录 One or more workloads 指向其它的workloads The set of pods which match a selector 通过selector作转换, 实现内部的负载均衡，升级时就可使用。  Ref  http://live.vhall.com/209459630  </description>
    </item>
    
    <item>
      <title>Rancher Node Driver Add Aliyun</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-node-driver-add-aliyun.html</link>
      <pubDate>Fri, 29 Jun 2018 20:53:32 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-node-driver-add-aliyun.html</guid>
      <description> rancher添加node drivers(阿里云)
Env  rancher: v2.0.2  Step Global, Node Drivers, Add Node Drivers, 把下图填写完，OK了。
Ref  http://live.vhall.com/431874021  </description>
    </item>
    
    <item>
      <title>Gitlab Workflow</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-workflow.html</link>
      <pubDate>Fri, 29 Jun 2018 09:08:02 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-workflow.html</guid>
      <description> gitlab流程
Env    Step Ref  https://www.cnblogs.com/coderzl/p/7491143.html https://blog.csdn.net/liumiaocn/article/details/79256312  </description>
    </item>
    
    <item>
      <title>Yapi Install Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-install-base-ubuntu.html</link>
      <pubDate>Thu, 28 Jun 2018 18:37:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-install-base-ubuntu.html</guid>
      <description>Env    Step  177 yum install -y mongodb-org 178 mongo -v 179 systemctl start mongod 180 /etc/init.d/mongod start 181 npm install -g yapi-cli --registry https://registry.npm.taobao.org 182 yapi server 183 ls 184 rm -rf my-yapi/ 185 clear 186 ls 187 node -v 188 mongo 189 git 190 yum install git 191 /etc/init.d/mongod restart 192 mongod -v 193 mongo 194 clear 195 npm install -g yapi-cli --registry https://registry.npm.taobao.org 196 yapi server 197 ls 198 node my-yapi/vendors/server/app.</description>
    </item>
    
    <item>
      <title>Yapi Transfer Base Docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-docker-transfer-data-install.html</link>
      <pubDate>Thu, 28 Jun 2018 18:37:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-docker-transfer-data-install.html</guid>
      <description>记一次yapi的迁移过程
Env 原来有一个docker安装在 192.168.168.162. 现在希望迁移至 192.168.168.137
原来 docker 的安装方式,见, https://github.com/eiuapp/docker-yapi
同时也可以参考一下 https://www.cnblogs.com/woshimrf/p/docker-install-yapi.html
Step 安装文件与容器数据迁移 tar -zcvf yapi.tar.gz ./yapi/ tar zcvf ./data.opt.mongodb.data.tar.gz /data/opt/mongodb/data/ scp -P 2222 data.opt.mongodb.data.tar.gz yapi.tar.gz ubuntu@192.168.168.137:/home/ubuntu/  新机器安装docker网络与相关镜像 tar -zxvf yapi.tar.gz tar -zxvf data.opt.mongodb.data.tar.gz sudo mv data/opt/ /data/opt/ ls /data/opt/mongodb/data/ cd yapi/ cp index.sh rindex.sh vi rindex.sh  修改一下rindex.sh文件
ubuntu@utuntu:~/yapi$ cat rindex.sh #!/bin/bash #git clone https://github.com/Ryan-Miao/docker-yapi.git cd docker-yapi bash build.sh 1.5.10 bash start.sh init-network bash start.sh start-mongo #bash start.</description>
    </item>
    
    <item>
      <title>Svn Remove User Name Passwd</title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn-remove-user-name-passwd.html</link>
      <pubDate>Thu, 28 Jun 2018 18:33:41 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn-remove-user-name-passwd.html</guid>
      <description> TortoiseSVN如何去掉记住的用户名密码
Env  svn: 1.9.7 os: win10  Step 直接看 https://jingyan.baidu.com/article/a17d5285cc80cf8099c8f25a.html
Ref  https://jingyan.baidu.com/article/a17d5285cc80cf8099c8f25a.html  </description>
    </item>
    
    <item>
      <title>Svn Authorization Failed</title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn-authorization-failed.html</link>
      <pubDate>Thu, 28 Jun 2018 18:10:29 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn-authorization-failed.html</guid>
      <description> 如何解决svn Authorization failed错误
Env  svn: 1.9.7  Step 出现这种问题肯定是
 SVN服务器 清除一下svn的缓存  SVN服务器 SVN服务器出现了问题，需要修改其三个配置文件：
1、svnserve.conf:
[general] anon-access = read auth-access = write password-db = passwd authz-db = authz  2、passwd:
[users] admin=123  3、authz:
[groups] [/] admin= rw  出现authorization failed异常，一般都是authz文件或者svnserve.conf里，用户组或者用户权限没有配置好，只要设置[/]就可以，代表根目录下所有的资源，如果要限定资源，可以加上 子目录即可。
清除一下svn的缓存 右击桌面，找到TortoiseSVN下面的Settings，Saved data, Authentication data点击clear
注意：这里不要全部清除，清除你刚才输入的那个svn地址的缓存，然后确定退出。
Ref  https://blog.csdn.net/qq_26291823/article/details/70846732 https://blog.csdn.net/zhouchenxuan/article/details/71249655  </description>
    </item>
    
    <item>
      <title>Svn Add Projects</title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn-add-projects.html</link>
      <pubDate>Thu, 28 Jun 2018 18:02:21 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn-add-projects.html</guid>
      <description>svn增加工程
Env  os: ubuntu16 svn: 1.9.7  Step 下面以 ValueAddedChain 工程为例
加工程 [root@vachain ~]# svnadmin create /application/svndata/ValueAddedChain [root@vachain ~]# cd /application/svndata/ [root@vachain svndata]# ls ValueAddedChain [root@vachain svndata]#  改配置 配置交由全局配置文件
[root@vachain svndata]# pwd /application/svndata/ [root@vachain svndata]# vi ValueAddedChain/conf/  这里面修改的内容是
[general] anon-access = none auth-access = write password-db = /application/svnpasswd/passwd authz-db = /application/svnpasswd/authz  这里的 password-db, authz-db可以是从其它地方copy过来，后，修改
cd /application/svndata/sadoc/ cp authz passwd /application/svnpasswd/ cd svnpasswd/  当然，你可以直接把已经配置好的文件，copy过来就行了
[root@vachain svndata]# cp doc/conf/svnserve.</description>
    </item>
    
    <item>
      <title>Svn Permission Configuration</title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn-permission-configuration.html</link>
      <pubDate>Thu, 28 Jun 2018 17:42:24 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn-permission-configuration.html</guid>
      <description>svn 修改权限
Env  os: ubuntu16 svn: 1.9.7 目录： /application/  Step 修改权限文件 authz
[root@vachain application]# pwd /application [root@vachain application]# vi svnpasswd/authz  配置组及组员
[groups] # harry_and_sally = harry,sally # harry_sally_and_joe = harry,sally,&amp;amp;joe # [/foo/bar] # harry = rw # &amp;amp;joe = r # * = vachain=zhaoguofen,yangqing,wutao,zengxianwen,gaojunying,liujiansen,liruizhang,huangyanya,aichao admin1=zengyunlong,liuchao,hezhengwen chainexchange=gaojunying chaintrack=zhaoguofen chainvac=yangqing,liujiansen chainpaper=zengxianwen  配置项目的权限(以ripple-1.0为例)
[ripple-1.0:/] @admin1=rw @vachain=rw liuchao=rw zhouxiaoming=rw liujiansen=rw  配置完了，要重启哟。
[root@vachain svndata]# netstat -tlpn | grep svn tcp 0 0 0.</description>
    </item>
    
    <item>
      <title>Linux Add Format Mount Harddisk</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-add-format-mount-harddisk.html</link>
      <pubDate>Thu, 28 Jun 2018 14:16:58 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-add-format-mount-harddisk.html</guid>
      <description>替 Linux 新增硬碟（磁碟分割、格式化與掛載）
最近要替我的 Linux Server 增加一顆硬碟，一般若是在安裝 Linux 時就將硬碟裝上去的話，就可以直接在安裝時設定好硬碟的格式化與掛載，但若是後來要加掛新的硬碟，就要自己動手設定了。
這裡示範在 Ubuntu Linux 下面新增加硬碟的做法，首先當然是買一顆新硬碟囉。
Env  os: ubuntu16 新硬盘: sdb  Step 查看 root@ubuntu:~# fdisk -l Disk /dev/sda: 111.8 GiB, 120034123776 bytes, 234441648 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 846C81DB-5DB9-4853-94E9-CC1192592FC9 Device Start End Sectors Size Type /dev/sda1 2048 1050623 1048576 512M EFI System /dev/sda2 1050624 2050047 999424 488M Linux filesystem /dev/sda3 2050048 234440703 232390656 110.</description>
    </item>
    
    <item>
      <title>Ubuntu Install Faq A</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-install-faq-a.html</link>
      <pubDate>Tue, 26 Jun 2018 18:51:29 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-install-faq-a.html</guid>
      <description> U盘安装Ubuntu16.04 server版 提示无法挂载cd-rom数据的解决办法
Step 错误：
使用类似ultraiso的刻录软件会出现这个错误 Failed to copy files from CD-ROM, retry?
解决：
解决的办法是使用win32diskimager制作U盘安装程序，就可以正常安装Ubuntu 16.04 Server。
下载地址win32diskimager
文本框用来输入文件完整地址，后面的文件夹图标是浏览窗口，默认只能识别img文件。 只需要将iso文件全路径输入在Image File中。 填好镜像的完整地址后右边有个下拉列表用来选择移动设备，千万别选错了！
建议只插一个U盘，以免误操作。之后点击Wirte按钮就开始写入。写入后就能够使用U盘安装了。
Ref  http://blog.51cto.com/gentle/1743114 https://blog.csdn.net/w_ww_w/article/details/18219911 https://sourceforge.net/projects/win32diskimager/?source=typ_redirect  </description>
    </item>
    
    <item>
      <title>Nginx Servername</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-servername.html</link>
      <pubDate>Mon, 25 Jun 2018 14:13:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-servername.html</guid>
      <description>nginx中servername的作用
Env  os: ubuntu16 外网ip: 13.209.68.247 domain name: link.devs1.xsl.ph  Step 当配置了servername后，只能通过 servername 访问被代理URL
看配置
root@ip-172-31-21-164:/etc/nginx/sites-enabled# cat links server{ listen 80; server_name link.devs1.xsl.ph; client_max_body_size 80m; location /spider { proxy_pass http://127.0.0.1:9003/spider; proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; } } root@ip-172-31-21-164:/etc/nginx/sites-enabled# /etc/init.d/nginx restart [ ok ] Restarting nginx (via systemctl): nginx.service root@ip-172-31-21-164:/etc/nginx/sites-enabled#  请求
root@ip-172-31-21-164:/etc/nginx/sites-enabled# curl link.devs1.xsl.ph/spider/news/hello hello,null.server.port==9003spring.profiles.active==testspring.datasource.url==jdbc:mysql://localhost:3306/link?useUnicode=true&amp;amp;characterEncoding=utf-8 root@ip-172-31-21-164:/etc/nginx/sites-enabled#  但是通过其它都不行。127.0.0.1,localhost,外网IP13.209.68.247都不可以的。都会返回404错误。
root@ip-172-31-21-164:/etc/nginx/sites-enabled# curl 13.209.68.247/spider/news/hello &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body bgcolor=&amp;quot;white&amp;quot;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.</description>
    </item>
    
    <item>
      <title>Mastercard Icard Tapngo Registry</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/life/mastercard-icard-tapngo-registry.html</link>
      <pubDate>Sun, 24 Jun 2018 11:45:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/life/mastercard-icard-tapngo-registry.html</guid>
      <description>注册拍住赏TAP&amp;amp;GO免费获得一张虚拟卡
原以为拍住赏TAP&amp;amp;GO是一种实体的预付卡，但事实证明我Too young too simple了。原来拍住赏是一种电子钱包，有手机和护照或者港澳通行证就可以使用，这个电子钱包有个功能叫 i.Card，是一张虚拟卡，有卡号，有效日期及cvc2验证码，在线消费时和实体卡一样使用，非常方便。注册成功即可获得一张虚拟卡，甚至不需要充值。
拍住赏的官方介绍如下
拍住赏是一种全新付款方式，将手机变成电子钱包。客户只要使用指定的iPhone或Android制式智能手机下载拍住赏手机钱包， 配合商户的MasterCard® 终端机(包括MasterCard® 感应式支付终端机)或拍住赏付款终端机， 便可拍卡或于网上消费。
你不需要去淘宝买卡，也不需要人肉去香港，你只需要拿出你的手机，下载一个app，在手机上完成以下操作就可以了。
Env  iphone  Step 下载App 掏出你的手机，如果是iPhone，打开App Store，搜索 tap &amp;amp; go 注意中间要有空格，如图：
注册拍住赏帐号 安装这个电子钱包，然后打开，选择 中国（+86），输入你的手机号码，并点“新帐户”进行注册
拍住赏会发一条短信验证码给你，输入验证码并点”确定”
然后创建一个密码（一定要记好这个密码），以后都是用这个密码来登录，要查看 i.Card或者进行其他一行重要操作，都需要输入这个密码。
接下来就要上传身份证明文件，对于大陆的朋友，可以使用护照或者港澳通行证。
我的护照寄出去办签证了，只好使用港澳通行证。上传了证件以后，拍住赏就注册成功了。
不用等待资料审核完成，进入主界面，点击侧边栏的 “卡资料” 选项，往下拉选取 “提取 i.Card”，输入密码，就能获取到 Tap&amp;amp;Go 给你分配的虚拟卡号，还有 CVV2验证码、有效日期等信息。
获得虚拟卡号 在菜单上的”卡资料”这个选项里，可以查看余额，提取你的i.Card虚拟卡号，如图：
点下面的 Mastercard, 里面就是iCard 信息，需要输入之前注册时的密码。
如何充值 因为目前卡内无余额，目前暂时还不能做为 Apple ID 付款方式. 所以如果你是这个时候在申请Apple ID,会提示 你的卡 无效。但是不要紧张，充值吧少年。
充值方式 现在你的钱包里是没有钱的，但是你可以
 让朋友通过PayBuddy功能转钱给你，PayBuddy功能和支付宝的转帐功能是一样的。 中国银行(香港)在线实时充值 银行转帐 现金 可以是招行一卡通转账、 去香港便利店和 淘宝JS  可以通过以下方法充值，如图：
可以通过中国银行(香港)在线实时充值，也可以通过银行转帐，现金等方式充值。</description>
    </item>
    
    <item>
      <title>Apple Id Register Hongkong</title>
      <link>https://eiuapp.github.io/eiuapp-learn/apple/apple-id-register-hongkong.html</link>
      <pubDate>Sun, 24 Jun 2018 10:42:55 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/apple/apple-id-register-hongkong.html</guid>
      <description>因为苹果ios系统升级的原因，之前的注册香港苹果ID的方法不再有效。本教程介绍一种新的注册香港苹果ID的方法。
Env  电脑 iphone 香港信用卡虚拟卡  适应人群：不想淘宝买，想拥有属于自己的香港苹果ID的伙伴；需要经常使用非大陆苹果ID下载或者更新相关软件的伙伴。
注意事项：
 1）本教程中的手机端完善时需要科学上网，电脑端注册时最好也是科学上网，PC+手机都科学上网可以提高注册成功的概率。 2）本方法相对于以前稍微复杂一些，不一定100%能注册成功 3）本人在实操时，使用的是英文版。  Step 本教程分为三部分：
 注册拍住赏TAP&amp;amp;GO免费获得一张香港信用卡虚拟卡 电脑端注册账号 退出原有APPLE ID 手机端完善账号  注册拍住赏TAP&amp;amp;GO免费获得一张香港信用卡虚拟卡 直接参考这里
电脑端注册账号（最好科学上网） 1，百度苹果官网，点击进入
2，进入官网后
3, 下滑到页面最底部，点击右下角【中国】
4, 选择【HongKong】
注意，这里必须点击英文Hong Kong, 而不是中文香港。
5, 申请ID页面
点击后，会有新页面，https://appleid.apple.com/#!&amp;amp;page=signin ，下滑到最下方，点击Create your Apple ID
6，资料填写
这时我们到了 https://appleid.apple.com/account#!&amp;amp;page=create
7，输入邮箱收到的验证码
8，输入上面验证码后，页面自动跳到登录页面，输入账号密码，如果能登录表示注册成功。
退出原有APPLE ID 打开手机，设置 &amp;gt; Apple ID &amp;gt; 退出（sign out)
手机端完善账号（需要科学上网） 1，手机设置中退出原来apple id之后，打开Apple Store，点击右侧蓝色头像
2，输入自己在电脑端注册的账号和密码
3, 点击【检查】
4, 同意协议，点击下一页
5，选取先生或者女士，点击下一页
6，付款方式选择信用卡/记账卡，姓名可以随便编写，街道可以写女人街，电话可以输入默认的号码。当然，你还可以通过百度地图，进入香港，在地图中选择一个地址和电话（区号是852)。如果完之后，点击下一页。
7，出现下图，表示大功告成，注册成功！
确认 退出科学上网（只有退出了，才能证明哈），退出网络，连接网络。</description>
    </item>
    
    <item>
      <title>Linux Swap</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-swap.html</link>
      <pubDate>Fri, 22 Jun 2018 18:56:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-swap.html</guid>
      <description> Env  os: linux  Step 有时运行大量的进程后swap大量占用，达到30%的话机器会变得很慢
可以用以下两个命令清除刷新swap
swapoff -a swapon -a  这样swap就还原到初始状态
Ref  http://blog.163.com/zhao_jw/blog/static/18058736620121027102932108/  </description>
    </item>
    
    <item>
      <title>Docker Registry Mirrors Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-mirrors-base-ubuntu.html</link>
      <pubDate>Fri, 22 Jun 2018 16:38:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-mirrors-base-ubuntu.html</guid>
      <description> 如何配置镜像加速器
Env  docker: 17.03.2+ os: ubuntu16.04  Step 打开 https://cr.console.aliyun.com/#/imageList 找到 镜像加速器
可以根据自己OS选择，下面的是ubuntu, registry-mirrors中的内容已失效，请替换成您自己的。
针对Docker客户端版本大于1.10.0的用户 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：
sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&#39;EOF&#39; { &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://0d6wdn2yzz.mirror.aliyuncs.com&amp;quot;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker  Ref  https://cr.console.aliyun.com/?spm=a2c4e.11153940.blogcont29941.9.520269d6m3p5Xn&amp;amp;accounttraceid=1843b6a4-8ded-4ec5-bdd5-fc17fcffbf8f&amp;amp;accounttraceid=93aba21f-da4b-41b2-ba82-c692f6d5c65f#/accelerator https://cr.console.aliyun.com/#/imageList  </description>
    </item>
    
    <item>
      <title>Update Kernel Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/update-kernel-base-centos.html</link>
      <pubDate>Fri, 22 Jun 2018 11:34:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/update-kernel-base-centos.html</guid>
      <description>如何在 CentOS 7 中安装或升级最新的内核
请直接看 https://linux.cn/article-8310-1.html
下文只是记录
Env  os: centos7  Step 虽然有些人使用 Linux 来表示整个操作系统，但要注意的是，严格地来说，Linux 只是个内核。另一方面，发行版是一个完整功能的系统，它建立在内核之上，具有各种各样的应用程序工具和库。
在正常操作期间，内核负责执行两个重要任务：
 作为硬件和系统上运行的软件之间的接口。 尽可能高效地管理系统资源。  为此，内核通过内置的驱动程序或以后可作为模块安装的驱动程序与硬件通信。
例如，当你计算机上运行的程序想要连接到无线网络时，它会将该请求提交给内核，后者又会使用正确的驱动程序连接到网络。
建议阅读： 如何在 Ubuntu 中升级内核
随着新的设备和技术定期出来，如果我们想充分利用它们，保持最新的内核就很重要。此外，更新内核将帮助我们利用新的内核函数，并保护自己免受先前版本中发现的漏洞的攻击。
准备好了在 CentOS 7 或其衍生产品（如 RHEL 7和 Fedora）上更新内核了么？如果是这样，请继续阅读！
步骤 1：检查已安装的内核版本 让我们安装了一个发行版，它包含了一个特定版本的内核。为了展示当前系统中已安装的版本，我们可以：
# uname -sr  如果我们现在进入 https://www.kernel.org/，在撰写本文时，我们看到最新的内核版本是4.10.1（其他版本可以从同一网站获得）。
还要考虑的一个重要的事情是内核版本的生命周期 - 如果你当前使用的版本接近它的生命周期结束，那么在该日期后将不会提供更多的 bug 修复。关于更多信息，请参阅内核发布页。
步骤 2：在 CentOS 7 中升级内核 大多数现代发行版提供了一种使用 yum 等包管理系统和官方支持的仓库升级内核的方法。
但是，这只会升级内核到仓库中可用的最新版本 - 而不是在 https://www.kernel.org/ 中可用的最新版本。不幸的是，Red Hat 只允许使用前者升级内核。
与 Red Hat 不同，CentOS 允许使用 ELRepo，这是一个第三方仓库，可以将内核升级到最新版本。</description>
    </item>
    
    <item>
      <title>How to Install Certificates for Command Line</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/how-to-install-certificates-for-command-line.html</link>
      <pubDate>Thu, 21 Jun 2018 22:32:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/how-to-install-certificates-for-command-line.html</guid>
      <description>当你有一个 CA.crt 文件时，怎么安装它，然后使用呢？我遇到了这个问题。
Env  os: ubuntu16 192.168.31.120  Step 尝试直接 apt install
jlch@km:~$ sudo apt install ./CA.crt [sudo] password for jlch: Reading package lists... Done E: Unsupported file ./CA.crt given on commandline jlch@km:~$  不行，那尝试一下
jlch@km:~$ dpkg-query -L ca-certificates /. /etc /etc/ssl /etc/ssl/certs /etc/ca-certificates /etc/ca-certificates/update.d /usr /usr/sbin /usr/sbin/update-ca-certificates /usr/share /usr/share/ca-certificates /usr/share/ca-certificates/mozilla ... # 看到了好多 mozilla 的证书相关信息呀。 /usr/share/ca-certificates/mozilla/DigiCert_Global_Root_CA.crt /usr/share/doc /usr/share/doc/ca-certificates /usr/share/doc/ca-certificates/examples ... # 好多 examples /usr/share/doc/ca-certificates/examples/ca-certificates-local/README /usr/share/doc/ca-certificates/changelog.gz /usr/share/doc/ca-certificates/copyright /usr/share/doc/ca-certificates/README.Debian /usr/share/doc/ca-certificates/NEWS.</description>
    </item>
    
    <item>
      <title>How to Install Certificates for Command Line</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/how-to-install-certificates-for-command-line.html</link>
      <pubDate>Thu, 21 Jun 2018 22:32:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/how-to-install-certificates-for-command-line.html</guid>
      <description>当你有一个 CA.crt 文件时，怎么安装它，然后使用呢？我遇到了这个问题。
Env  os: ubuntu16 192.168.31.120  Step 尝试直接 apt install
jlch@km:~$ sudo apt install ./CA.crt [sudo] password for jlch: Reading package lists... Done E: Unsupported file ./CA.crt given on commandline jlch@km:~$  不行，那尝试一下
jlch@km:~$ dpkg-query -L ca-certificates /. /etc /etc/ssl /etc/ssl/certs /etc/ca-certificates /etc/ca-certificates/update.d /usr /usr/sbin /usr/sbin/update-ca-certificates /usr/share /usr/share/ca-certificates /usr/share/ca-certificates/mozilla ... # 看到了好多 mozilla 的证书相关信息呀。 /usr/share/ca-certificates/mozilla/DigiCert_Global_Root_CA.crt /usr/share/doc /usr/share/doc/ca-certificates /usr/share/doc/ca-certificates/examples ... # 好多 examples /usr/share/doc/ca-certificates/examples/ca-certificates-local/README /usr/share/doc/ca-certificates/changelog.gz /usr/share/doc/ca-certificates/copyright /usr/share/doc/ca-certificates/README.Debian /usr/share/doc/ca-certificates/NEWS.</description>
    </item>
    
    <item>
      <title>Convert Rst to Gfm Document Style</title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/convert-rst-to-gfm-document-style.html</link>
      <pubDate>Thu, 21 Jun 2018 22:02:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/convert-rst-to-gfm-document-style.html</guid>
      <description>RST(reStructuredText) 转换为 MD(Markdown)
Env  os: ubuntu16.04 ip: 192.168.31.199  Step 准备
安装 restbuilder https://pythonhosted.org/sphinxcontrib-restbuilder/
pip install sphinxcontrib-restbuilder  安装 pandoc https://pandoc.org/installing.html https://github.com/jgm/pandoc/releases/latest
我这里选择二进制安装包
wget https://github.com/jgm/pandoc/releases/download/2.2.1/pandoc-2.2.1-1-amd64.deb dpkg -i ./pandoc-2.2.1-1-amd64.deb  操作 生成 rst 文件：
make -e SPHINXOPTS=&amp;quot;-D language=&#39;zh_CN&#39;&amp;quot; rst  转换 rst 到 gfm或markdown 文件, 写成一个脚本。
root@ud-b:~# cat convert-doc-style.sh #!/usr/bin/env bash export pandoc=&amp;quot;pandoc +RTS -V0 -RTS&amp;quot; cd $1 FILES=&amp;quot;*.rst&amp;quot; for f in $FILES do filename=&amp;quot;${f%.*}&amp;quot; echo &amp;quot;Converting &#39;$f&#39; to &#39;$filename.</description>
    </item>
    
    <item>
      <title>Update Kernel Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/update-kernel-base-ubuntu.html</link>
      <pubDate>Thu, 21 Jun 2018 21:55:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/update-kernel-base-ubuntu.html</guid>
      <description> ubuntu16.04 update-kernel
Env  os: ubuntu16.04 ip: 192.168.31.118  Step 浏览器打开 http://kernel.ubuntu.com/~kernel-ppa/mainline/
找到适合的 内核版本（这时v4.12), 进入，
找到合适的内核文件(linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb)
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb  然后安装就可以了。
Ref  http://kernel.ubuntu.com/~kernel-ppa/mainline/  </description>
    </item>
    
    <item>
      <title>Host Protection</title>
      <link>https://eiuapp.github.io/eiuapp-learn/security/host-protection.html</link>
      <pubDate>Thu, 21 Jun 2018 17:18:24 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/security/host-protection.html</guid>
      <description> Step 所以啊，主机防护还是很重要的！不要小看了！提供几个方向给大家思考看看吧：
建立完善的登入密码规则限制； 完善的主机权限设定； 设定自动升级与修补软件漏洞、及移除危险软件； 在每项系统服务的设定当中，强化安全设定的项目； 利用 iptables, TCP_Wrappers 强化网络防火墙； 利用主机监控软件如 MRTG 与 logwatch 来分析主机状况与登录文件；  Ref    </description>
    </item>
    
    <item>
      <title>Teamviewer Install Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/tools/teamviewer-install-base-ubuntu.html</link>
      <pubDate>Thu, 21 Jun 2018 16:48:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tools/teamviewer-install-base-ubuntu.html</guid>
      <description>Ubuntu16.04 安装 Teamviewer
有时需要远程控制ubuntu系统的电脑，Teamviewer在linux下也可以进行安装，而且Teamviewer远程控制的流畅性一直不错，就选择安装Teamviewer。
Env  os: ubuntu16.04 teamviewer: 13.1  Step 下面给出具体的安装步骤：
首先到 https://www.teamviewer.com/zhcn/download/linux/ 下载相应linux版本的Teamviewer，版主选择的是ubuntu版本，下载完成之后，在你的下载路径中会有软件安装包teamviewer_12.0.85001_i386.deb。
安装依赖包，ternimal终端进入到下载路径中，执行命令：(博主是64位系统没有执行这个命令也成功，假如是32位的系统则需要执行)
sudo apt-get install libjpeg62:i386 libxinerama1:i386 libxrandr2:i386 libxtst6:i386 ca-certificates -y  安装deb软件包，执行命令：
sudo dpkg -i teamviewer_12.0.76279_i386.deb  安装成功之后在dash输入Teamviewer就可以打开了。
注意：在执行第三步安装deb包的时候，可能会遇到下面的问题：
wanglaotou@wanglaotou95:~/softwares/software-package$ sudo dpkg -i teamviewer_12.0.85001_i386.deb (正在读取数据库 ... 系统当前共安装有 215790 个文件和目录。) 正准备解包 teamviewer_12.0.85001_i386.deb ... 正在将 teamviewer:i386 (12.0.85001) 解包到 (12.0.85001) 上 ... dpkg: 依赖关系问题使得 teamviewer:i386 的配置工作不能继续： teamviewer:i386 依赖于 libasound2. teamviewer:i386 依赖于 libdbus-1-3. teamviewer:i386 依赖于 libexpat1. teamviewer:i386 依赖于 libfontconfig1.</description>
    </item>
    
    <item>
      <title>Ddos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/ddos.html</link>
      <pubDate>Tue, 19 Jun 2018 19:45:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/ddos.html</guid>
      <description> 公司被另一家公司给抄袭了。老板很生气。
Env 比特空间 site
 http://www.bitspace.link/ http://bitone.cc/#/  抄袭者 site
 http://www.vac-china.com/ https://vacc.vip/  IP
 104.18.42.57 47.90.52.55 香港特别行政区 阿里云  Step 为了防止我们被攻击，要做实验了。
ping攻击 无效。
DDos攻击 zanyarjamal的github 还真有一点干货。
先用xerxes
Ref  xerxes  </description>
    </item>
    
    <item>
      <title>Linux Kill Tty</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-kill-tty.html</link>
      <pubDate>Tue, 19 Jun 2018 17:41:03 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-kill-tty.html</guid>
      <description>linux 如何杀掉 tty终端
Step 1、用w -s命令可以得到终端名 root@bitzone:~# w 17:37:05 up 164 days, 1:13, 2 users, load average: 1.47, 0.83, 0.66 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 121.34.147.224 17:36 0.00s 0.02s 0.00s w root pts/2 121.34.147.224 11:58 5:37m 0.04s 0.04s -bash root@bitzone:~# w -s 17:38:38 up 164 days, 1:15, 2 users, load average: 0.65, 0.69, 0.62 USER TTY FROM IDLE WHAT root pts/0 121.34.147.224 2.00s w -s root pts/2 121.</description>
    </item>
    
    <item>
      <title>Backup Rancher</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/backup-rancher.html</link>
      <pubDate>Tue, 19 Jun 2018 00:18:49 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/backup-rancher.html</guid>
      <description>Single Node Backup And Restoration
Env    Step backup rancher server
root@bitzone:~/.tom# docker stop e3655bea211c^C root@bitzone:~/.tom# docker create --volumes-from e3655bea211c --name rancher-backup-v2.0.2 rancher/rancher:v2.0.2 464fd997687abe4cbc43fa39b30f4c246e620b6c33c8f032f32fdafebcd29c61 root@bitzone:~/.tom#  查看所有正在运行容器的hash-id
root@bitzone:~/.tom# docker ps -q 2211913af199 3cb7184995a4 5e50622bcc06 9e2549352d17 0287433011b0 2f7f9a341fcb 6b80dcdacaf5 d22d8ef3b283 a321ebd4941c 9c7e75ce47b3 0ea90d1c532f 1aec7af587f1 970a46ba0b57 698b46a9e3fb fc9270fe5d50 d41ae6d7fa22 aab01d4e1556 95d8b9f51555 7a07fd5c94ce a93266250acf 7b5c63b5de0e dfda4227277f 84804443cd2c e3655bea211c root@bitzone:~/.tom#  重启rancher及容器
docker start 2211913af199 docker start 3cb7184995a4 docker start 5e50622bcc06 docker start 9e2549352d17 docker start 0287433011b0 docker start 2f7f9a341fcb docker start 6b80dcdacaf5 docker start d22d8ef3b283 docker start a321ebd4941c docker start 9c7e75ce47b3 docker start 0ea90d1c532f docker start 1aec7af587f1 docker start 970a46ba0b57 docker start 698b46a9e3fb docker start fc9270fe5d50 docker start d41ae6d7fa22 docker start aab01d4e1556 docker start 95d8b9f51555 docker start 7a07fd5c94ce docker start a93266250acf docker start 7b5c63b5de0e docker start dfda4227277f docker start 84804443cd2c docker start e3655bea211c  docker 正常运行时</description>
    </item>
    
    <item>
      <title>Docker Pull With Proxy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-pull-with-proxy.html</link>
      <pubDate>Sun, 17 Jun 2018 23:38:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-pull-with-proxy.html</guid>
      <description> 透过proxy进行docker pull
Env  os: ubuntu16 os: centos  Step  对于Ubuntu 系统  sudo vi /etc/default/docker   对于Centos 系统  sudo vi /etc/sysconfig/docker  把下面的内容加到尾部
HTTP_PROXY=http://192.168.31.112:8118 http_proxy=${HTTP_PROXY} HTTPS_PROXY=${HTTP_PROXY} https_proxy=${HTTP_PROXY} export HTTP_PROXY HTTPS_PROXY http_proxy https_proxy  重启docker
sudo systemctl restart docker sudo systemctl status docker  然后再进行相关的 docker pull 操作就可以了。
Ref  https://blog.csdn.net/u011563903/article/details/52161648  </description>
    </item>
    
    <item>
      <title>Rancher Single Node Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-single-node-install.html</link>
      <pubDate>Sun, 17 Jun 2018 16:59:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher-single-node-install.html</guid>
      <description>rancher2.0单节点安装kubernetes
Env 无论哪个环境
 硬盘容量
 空闲 &amp;gt; 20G 空闲 &amp;gt; 20%  有网络
  Env-1(成功)  cloud: aws os: ubuntu16.04 rancher: v2.0.2 docker: docker-ce=17.03.2~ce-0~ubuntu-xenial post: 8088, 4443  实际上，我是直接把
 ufw: disable  Env-2(没有成功)可略过。 实验环境
4台vm，配置为2C，4G，100G 一台安装Rancher 一台作为Kubernets cted &amp;amp; control 两台作为Kubernets worker
 os: ubuntu16.04 rancher: v2.0.2  IP  ip: 192.168.31.189 rancher, win10（192.168.31.102）下的virtualbox ip: 192.168.31.188 k8s-etcd, ud-ssd（192.168.31.199）下的virtualbox ip: 192.168.31.187 k8s-worker, ud-ssd（192.168.31.199）下的virtualbox ip: 192.168.31.186 k8s-worker, ud-putong（192.168.31.112）下的virtualbox  后来发现，192.</description>
    </item>
    
    <item>
      <title>Markdown Comments</title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/markdown-comments.html</link>
      <pubDate>Sat, 16 Jun 2018 23:01:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/markdown-comments.html</guid>
      <description>概述 下面是我整理的在Markdown中写注释的几种方法，供自己开发时参考，相信对其他人也有用。
Step html标签 既然Markdown内嵌html语法，那么就可以用可以用隐藏的html标签。
注意：需要在前面空一行
&amp;lt;div style=&#39;display: none&#39;&amp;gt; 哈哈我是注释，不会在浏览器中显示。 我也是注释。 &amp;lt;/div&amp;gt;  html注释 既然支持html语法，那也支持html注释。
&amp;lt;!--哈哈我是注释，不会在浏览器中显示。--&amp;gt; &amp;lt;!-- 哈哈我是多段 注释， 不会在浏览器中显示。 --&amp;gt;  hack方法 hack方法就是利用markdown的解析原理来实现注释的。
一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。
hack方法比上面2种方法稳定得多，但是语义化太差。
[comment]: &amp;lt;&amp;gt; (哈哈我是注释，不会在浏览器中显示。) [comment]: &amp;lt;&amp;gt; (哈哈我是注释，不会在浏览器中显示。) [comment]: &amp;lt;&amp;gt; (哈哈我是注释，不会在浏览器中显示。) [//]: &amp;lt;&amp;gt; (哈哈我是注释，不会在浏览器中显示。) [//]: # (哈哈我是注释，不会在浏览器中显示。)  其中，这种方法最稳定，适用性最强：
[//]: # (哈哈我是注释，不会在浏览器中显示。)  这种最可爱，超级无敌萌啊：
[^_^]: # (哈哈我是注释，不会在浏览器中显示。)  更为关键的是，这种方法最强，支持多行注释，
[^_^]: commentted-out contents should be shift to right by four spaces (`&amp;gt;&amp;gt;`).  示例测试 1.html标签（你如果看不到下面的注释说明已经成功注释）
2.html注释（你如果看不到下面的注释说明已经成功注释）</description>
    </item>
    
    <item>
      <title>Static Ip Ubuntu18</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/static-ip-ubuntu18.html</link>
      <pubDate>Sat, 16 Jun 2018 21:52:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/static-ip-ubuntu18.html</guid>
      <description>ubuntu18设置固态IP
Env  os: ubuntu18  Step ubuntu16 ubuntu16是在/etc/network/interfaces 文件中设置固态IP 设置的方式类似下面
source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto ens160 #iface ens160 inet dhcp iface ens160 inet static address 192.168.31.120 gateway 192.168.31.1 #这个地址你要确认下 网关是不是这个地址 netmask 255.255.255.0 network 192.168.31.0 broadcast 192.168.31.255 dns-nameservers 202.96.134.133  ubuntu17及以上 但是，ubuntu17起，改成了etc/netplan/*.yaml来配置。
配置方式类似下面
tom@tom:~$ cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by # the datasource.</description>
    </item>
    
    <item>
      <title>Php Install Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/php/php-install-base-ubuntu.html</link>
      <pubDate>Sat, 16 Jun 2018 18:11:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/php/php-install-base-ubuntu.html</guid>
      <description> Env  os: ubuntu  Step sudo apt-get install -y language-pack-en-base sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt search php5 # 这个地方，会返回具体的版本号，不同的时间可能返回不同，比如20180616返回的是5.6，所以安装php5.6而不是php5.5 sudo apt-get install php5.6-common sudo apt-get install libapache2-mod-php5.6  Ref  https://www.zhihu.com/question/45999546/answer/100165171  </description>
    </item>
    
    <item>
      <title>Ubuntu Command Not Found</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-command-not-found.html</link>
      <pubDate>Sat, 16 Jun 2018 18:08:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-command-not-found.html</guid>
      <description> add-apt-repository: command not found When I run:
sudo add-apt-repository ppa:ubuntu-wine/ppa  Log here:
sudo: add-apt-repository: command not found  solved I tried to run:
sudo apt-get install software-properties-common  </description>
    </item>
    
    <item>
      <title>Google Chrome Setup</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/google-chrome-setup.html</link>
      <pubDate>Thu, 14 Jun 2018 20:53:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/google-chrome-setup.html</guid>
      <description> 通过这个小小的设置，能让我的mac不再那么热，不再那么响，说明优化chrome是一件值得做的事情。
11 Chrome Settings You Should Change Now! 看视频吧
 设置已不存在。 打开chrome://flags/ Show Saved Copy Button,选择Enabled:Primary Parallel downloading设置成 Enabled 设置已不存在。 设置已不存在。 Omnibox UI Show Suggestion Favicons,设置成Enabled Automatic tab discarding，设置成Enabled Tab audio muting UI control =》 Disabled, 无需修改 Fast tab/window close =》 Disabled, 无需修改 Scroll Anchoring，设置成Enabled  </description>
    </item>
    
    <item>
      <title>Google Chrome Helper</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/google-chrome-helper.html</link>
      <pubDate>Thu, 14 Jun 2018 20:17:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/google-chrome-helper.html</guid>
      <description>google chrome helper占用超多CPU资源
Env  os: mac  看视频的同学要先做到科学上网
Step 2014年前的chrome 如果能看视频的朋友，点这里
有一篇文章提过这个问题，这里面提到的解决方案如下
First, shut down all your Chrome windows without quitting the program. In the Chrome menu, go to “Preferences,” scroll all the way down in the menu, and click on “Show advanced settings…” The first item in the expanded advanced settings list will be “Privacy,” and click on the “Content Settings” button right under that. About halfway down the content settings list is a “Plug-ins” entry, which will likely be set to “Run automatically.</description>
    </item>
    
    <item>
      <title>Charts</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/charts.html</link>
      <pubDate>Thu, 14 Jun 2018 16:30:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/charts.html</guid>
      <description> tradingview，一个免费股票，数字货币图表网站 tradingview-cn  </description>
    </item>
    
    <item>
      <title>Git Faq A</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-faq-a.html</link>
      <pubDate>Thu, 14 Jun 2018 11:56:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-faq-a.html</guid>
      <description>git 报错 Updates were rejected because the tip of your current branch is behind
Env ➜ public git:(master) git push -u origin master To bitbucket.org:tomtsang/blog_tomtsang_hugo_html.git ! [rejected] master -&amp;gt; master (non-fast-forward) error: failed to push some refs to &#39;git@bitbucket.org:tomtsang/blog_tomtsang_hugo_html.git&#39; hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: &#39;git pull ...&#39;) before pushing again. hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</description>
    </item>
    
    <item>
      <title>Iterm2 Hotkey</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/iterm2-hotkey.html</link>
      <pubDate>Wed, 13 Jun 2018 16:15:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/iterm2-hotkey.html</guid>
      <description>Env  os: macOS  Content 标签 新建标签：command + t 关闭标签：command + w 切换标签：command + 数字 command + 左右方向键 切换全屏：command + enter 查找：command + f  分屏 垂直分屏：command + d 水平分屏：command + shift + d 切换屏幕：command + option + 方向键 command + [ 或 command + ] 查看历史命令：command + ; 查看剪贴板历史：command + shift + h  其他 清除当前行：ctrl + u 到行首：ctrl + a 到行尾：ctrl + e 前进后退：ctrl + f/b (相当于左右方向键) 上一条命令：ctrl + p 搜索命令历史：ctrl + r 删除当前光标的字符：ctrl + d 删除光标之前的字符：ctrl + h 删除光标之前的单词：ctrl + w 删除到文本末尾：ctrl + k 交换光标处文本：ctrl + t 清屏1：command + r 清屏2：ctrl + l  自带有哪些很实用的功能/快捷键 ⌘ + 数字在各 tab 标签直接来回切换 选择即复制 + 鼠标中键粘贴，这个很实用 ⌘ + f 所查找的内容会被自动复制 ⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏 ⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏 ctrl + u 清空当前行，无论光标在什么位置 输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令 ⌘ + shift + h 会列出剪切板历史 可以在 Preferences &amp;gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现  常用的一些快捷键 ⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了 ⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e ⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了 好像就这几个 设置方法如下 当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合 C+a / C+e 这个几乎在哪都可以使用 C+p / !</description>
    </item>
    
    <item>
      <title>Blockchain</title>
      <link>https://eiuapp.github.io/eiuapp-learn/blockchain/learn-blockchain.html</link>
      <pubDate>Wed, 13 Jun 2018 15:43:40 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/blockchain/learn-blockchain.html</guid>
      <description> 记录我的blockchain学习过程
区块链浏览器  区块链学习笔记-如何使用区块链浏览器 三分钟了解区块链浏览器 区块链浏览器是什么？  常识  浏览器都可以挖矿  实操 未操作  fabric中简单搭建区块链浏览器  </description>
    </item>
    
    <item>
      <title>Python Install Pip With Get Pip Py</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-install-pip-with-get-pip-py.html</link>
      <pubDate>Wed, 13 Jun 2018 13:12:16 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-install-pip-with-get-pip-py.html</guid>
      <description> 通过 get-pip.py 安装 pip
Env  os: ubuntu16  Step curl https://bootstrap.pypa.io/get-pip.py | sudo python  Ref  https://pip.pypa.io/en/stable/installing/  </description>
    </item>
    
    <item>
      <title>Python Faq Openssl</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-faq-openssl.html</link>
      <pubDate>Wed, 13 Jun 2018 13:00:01 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-faq-openssl.html</guid>
      <description>Env  os: ubuntu16  出错 /alg -Iscrypt-1.2.1/libcperciva/util -Iscrypt-1.2.1/libcperciva/crypto -I/usr/local/include -I/usr/include -I/usr/include/python2.7 -c scrypt-1.2.1/libcperciva/crypto/crypto_aes.c -o build/temp.linux-x86_64-2.7/scrypt-1.2.1/libcperciva/crypto/crypto_aes.o -O2 scrypt-1.2.1/libcperciva/crypto/crypto_aes.c:6:25: fatal error: openssl/aes.h: No such file or directory compilation terminated. error: command &#39;x86_64-linux-gnu-gcc&#39; failed with exit status 1 ---------------------------------------- Command &amp;quot;/usr/bin/python -u -c &amp;quot;import setuptools, tokenize;__file__=&#39;/tmp/pip-install-qN0XHo/scrypt/setup.py&#39;;f=getattr(tokenize, &#39;open&#39;, open)(__file__);code=f.read().replace(&#39;\r\n&#39;, &#39;\n&#39;);f.close();exec(compile(code, __file__, &#39;exec&#39;))&amp;quot; install --record /tmp/pip-record-8LxwEK/install-record.txt --single-version-externally-managed --compile&amp;quot; failed with error code 1 in /tmp/pip-install-qN0XHo/scrypt/ root@ip-172-31-23-102:/home/ubuntu/rpc#  Step 看错误。这里看的错误，不应该是error: command &#39;x86_64-linux-gnu-gcc&#39; failed with exit status 1,而应该是fatal error: openssl/aes.</description>
    </item>
    
    <item>
      <title>Tomcat Install Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/java/tomcat-install-base-ubuntu.html</link>
      <pubDate>Tue, 12 Jun 2018 20:51:29 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/java/tomcat-install-base-ubuntu.html</guid>
      <description> Env  os: ubuntu16 java:  root@ip-172-31-28-68:/home/ubuntu/java/sotre_app# java -version openjdk version &amp;quot;1.8.0_171&amp;quot; OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-0ubuntu0.16.04.1-b11) OpenJDK 64-Bit Server VM (build 25.171-b11, mixed mode) root@ip-172-31-28-68:/home/ubuntu/java/sotre_app#  nodejs: v8.11.2 tomcat: apache-tomcat-8.5.31 java-jre: openjdk-8-jdk  Step wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz ls tar zxvf apache-tomcat-8.5.31.tar.gz sudo mv apache-tomcat-8.5.31 /opt/ sudo ln -s /opt/apache-tomcat-8.5.31/ /opt/tomcat8 /opt/tomcat8/bin/startup.sh curl http://127.0.0.1:8080/  Ref  https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.31/bin/ https://www.cnblogs.com/EasonJim/p/7202844.html  </description>
    </item>
    
    <item>
      <title>Nginx Config Server_name</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-config-server_name.html</link>
      <pubDate>Tue, 12 Jun 2018 18:11:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-config-server_name.html</guid>
      <description>nginx 配合 godaddy 完成 3级域名
原理：godaddy, 配置3级域名解析，转到nginx配置中的 server_name
Env  os: ubuntu16 nginx: nginx/1.10.3 (Ubuntu) 2级域名: bitzone.space 3级域名: store1.bitzone.space godaddy  Step 配置nginx 在 nginx 的 sites-enabled 中配置
root@ip-172-31-28-68:~# cat sites-enabled/store1 server { listen 80; server_name store1.bitzone.space; client_max_body_size 80m; location / { index index.html; root /home/ubuntu/html/code_commit_vac_competition/APP; #root /home/dev/completition/code_commit_competition/code_commit_competition_food_blockChainCheck; } }  配置godaddy 打开相应地址(2级域名: bitzone.space)的DNS管理
增加
A	store1	52.78.79.111	600 秒  确认 浏览器访问http://store1.bitzone.space/index.html 就访问到了 http://52.78.79.111:80 , 根据nginx配置就知道， 拿到了 52.78.79.111:/home/ubuntu/html/code_commit_vac_competition/APP/index.html这里的资源</description>
    </item>
    
    <item>
      <title>Mac Rar Unrar</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-rar-unrar.html</link>
      <pubDate>Tue, 12 Jun 2018 17:15:24 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-rar-unrar.html</guid>
      <description> Mac上rar文件命令解压和压缩
Env  os: macOS  Step rar和unrar命令需要自己安装
可以直接通过brew安装，如果不清楚brew安装命令，可以查看《mac上安装类似 apt-get 的软件包管理器 &amp;ndash; Homebrew》
下面说下另外一种简单安装方式
1.下载mac上对应rar版本
http://www.rarlab.com/download.htm
2.利用tar名解压下载的rarosx-5.4.0.tar.gz，版本可能会更新
tar xzvf arosx-5.4.0.tar.gz . #解压到当前目录  3.安装rar和unrar命令
sudo install -c -o $USER rar /usr/local/bin/ ＃安装rar sudo install -c -o $USER unrar /usr/local/bin ＃安装unrar  如果安装失败可以看看/usr/local/bin 目录是不是存在rar或unrar的软链接
4.利用rar和unrar压缩和解压文件
rar和unrar文件的参数也很多，就不在一一介绍了，直接在Ternimal执行对应命令就能看到所有参数选项，下面列举几个常用的
解压文件：unrar x test.rar 压缩文件A和B：rar a 压缩后.rar A B
Ref  http://www.rarlab.com/download.htm https://blog.csdn.net/yin1031468524/article/details/68955194?locationNum=12&amp;amp;fps=1  </description>
    </item>
    
    <item>
      <title>Mac Iterm2 Ohmyzsh Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-iterm2-ohmyzsh-install.html</link>
      <pubDate>Tue, 12 Jun 2018 11:48:11 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-iterm2-ohmyzsh-install.html</guid>
      <description> Mac下如何安装iTerm2并使用zsh iTerm2
Env  os: macOS  Step 安装iterm2 安装iterm2只需要下载，解压安装就可以了。
安装zsh 方式1 brew install zsh zsh-completions  无brew的请先安装Homebrew，mac上的一个包管理工具，很有必要安装，省去安装软件的麻烦。
方式2 直接上官网查看安装方式
zsh --version  配置zsh 创建一个zsh的配置文件 注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。使用以下命令
cp ~/.zshrc ~/.zshrc.orig  然后开始创建zsh的配置文件
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  设置zsh为你的默认的shell chsh -s /bin/zsh  然后退出iterm2，再重启就ok。
期间报的问题不要管直接按照步骤来就行了。
Ref  http://www.jianshu.com/p/77a4349bf67b https://blog.csdn.net/sufubo/article/details/54988457  </description>
    </item>
    
    <item>
      <title>Network Proxy Shadowsocks Server</title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-shadowsocks-server.html</link>
      <pubDate>Mon, 11 Jun 2018 20:34:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-shadowsocks-server.html</guid>
      <description> Env  cloud: aws os: ubuntu16 ip: 美国IP  Ref 直接看下面文章就可以了 - https://github.com/flyzy2005/ss-fly - https://www.flyzy2005.com/fan-qiang/shadowsocks/install-shadowsocks-in-one-command/#shadowsocks
Step git clone https://github.com/Flyzy2005/ss-fly ss-fly/ss-fly.sh -i password 1024 ping www.youtube.com  修改配置文件：vim /etc/shadowsocks.json 停止ss服务：ssserver -c /etc/shadowsocks.json -d stop 启动ss服务：ssserver -c /etc/shadowsocks.json -d start 重启ss服务：ssserver -c /etc/shadowsocks.json -d restart  卸载ss服务
ss-fly/ss-fly.sh -uninstall  Article 注意：在特殊时期，一般是大会期间，即使是设置好了 SS,但是还是不能科学上网。 比如，我就遇到了一次，在 上合组织峰会第十八次峰会-青岛峰会（2018年6月9日到10日）之后的，2018-06-11号，就出现了（大佬们，有没有哪位，和我类似）情况：
 美国IP 不能科学上网 香港IP 能科学上网  还有一种可能性，IP段中的其他同志的IP搞歪东西，把我给扯到了。 GXB直接封的IP段，这个时候，IP段中的新机器也不行。
一键脚本搭建SS/搭建SSR服务并开启BBR加速
Ref  https://blog.csdn.net/ZhangAdo/article/details/50663527 https://blog.csdn.net/f59130/article/details/74014415 https://blog.csdn.net/amoscn/article/details/79364599  </description>
    </item>
    
    <item>
      <title>Ubuntu Network Proxy Shadowsocks Server</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-shadowsock-server.html</link>
      <pubDate>Mon, 11 Jun 2018 20:34:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-shadowsock-server.html</guid>
      <description>Env  os: ubuntu16 ip: 192.168.168.137  Ref cd sudo pip install shadowsocks which sslocal sudo vi /etc/shadowsocks.json sslocal -c /etc/shadowsocks.json start sslocal -c /etc/shadowsocks.json sslocal -c /etc/shadowsocks.json -d start vi /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py sslocal -c /etc/shadowsocks.json -d start sslocal -c /etc/shadowsocks.json -d stop sslocal -c /etc/shadowsocks.json -d start netstat -tlpnu vi /etc/shadowsocks.json cat /etc/shadowsocks.json sslocal -c /etc/shadowsocks.json -d stop sslocal -c /etc/shadowsocks.json -d start sudo vim /etc/systemd/system/shadowsocks.service sudo systemctl enable /etc/systemd/system/shadowsocks.</description>
    </item>
    
    <item>
      <title>Macos Apple Id America</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/macos-apple-id-america.html</link>
      <pubDate>Mon, 11 Jun 2018 20:02:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/macos-apple-id-america.html</guid>
      <description> 申请美国apple id
Env  os: macOS cloud: aws  Step Ref  https://zhuanlan.zhihu.com/p/36574047 https://www.zhihu.com/question/20422874/answer/413390698 https://blog.csdn.net/amoscn/article/details/79364599 https://zhuanlan.zhihu.com/p/33150135  </description>
    </item>
    
    <item>
      <title>Mac Install Software</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-install-software.html</link>
      <pubDate>Mon, 11 Jun 2018 19:54:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-install-software.html</guid>
      <description>记录mac-pro安装软件
安装截图 安装  git (直接输入git version) 这个时候，会自动安装Xcode的组件，请保持网络稳定且快速。 搜狗五笔拼音 homebrew [telnet]() brew install telnet Visual Studio Code hugo  这个时候，你需要的是科学上网
 shadowsocks chrome(美国版)，这里一定不要是google.cn下载的中文版。  无需科学上网
 [百度网盘](https://pan.baidu.com/download#pan） iterm2, 下载，解压，安装就行了，不是brew安装的 oh my zsh安装 RARLAB-osx用于解压rar文件  设置 mac输入法切换快捷键设置</description>
    </item>
    
    <item>
      <title>Network Proxy Win10</title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-win10.html</link>
      <pubDate>Mon, 11 Jun 2018 10:10:16 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-win10.html</guid>
      <description> 通过win10实现FQ
Env  os: win10  Step 先配置Shadowsocks privoxy or not 方法1 不配置 privoxy 其实可以不配置privoxy,而使得socks5生效。
具体步骤如下：
配置的过程中，可以通过一个pac 文件过滤url,这个地方，怎么设置的呢？看下图
方法2 配置 privoxy </description>
    </item>
    
    <item>
      <title>Aws Get Access Key Secret Key</title>
      <link>https://eiuapp.github.io/eiuapp-learn/aws/aws-get-access-key-secret-key.html</link>
      <pubDate>Thu, 07 Jun 2018 17:22:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/aws/aws-get-access-key-secret-key.html</guid>
      <description>教你如何找到AWS Access Key ID and Secret Access Key
Env  aws  Step 按照 教你如何找到AWS Access Key ID and Secret Access Key 完成 1-5
Step 1. Visit the Amazon Web Services web console. Step 2. Click My Account/Console at the top right corner of the web page. In this case User Name is Alexander. Step 3. In the drop-down list click the “Security Credentials” option. Step 4. Then you will be redirected to the “Your Security Credentials” page and see the following pop-up window: Step 5.</description>
    </item>
    
    <item>
      <title>Realtek Shengyin</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/realtek-shengyin.html</link>
      <pubDate>Thu, 07 Jun 2018 16:03:04 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/realtek-shengyin.html</guid>
      <description>Realtek高清晰音频管理器使耳机能听到声音
env  os: win10  step 总以为是声卡类驱动没有安装成功，哈哈！～～
直接看图操作吧</description>
    </item>
    
    <item>
      <title>Rancher2 Install Base Aws Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher2-install-base-aws-ubuntu.html</link>
      <pubDate>Wed, 06 Jun 2018 17:08:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher2-install-base-aws-ubuntu.html</guid>
      <description>aws中ubuntu安装rancher2.0
Env Env-a  cloud: aws os: ubuntu 16.04 docker: 17.03.2-ce  Env-b  cloud: aws os: Amazon Linux AMI 2018.03 docker: 17.12.1-ce  这里的env-b可以不看, 因为效果与env-a相同
Rancher versions:
rancher/server or rancher/rancher: rancher/server 2.0.2
**Docker version: 17.03.2-ce
**Operating system and kernel:
 ubuntu 16.04 Linux ip-172-31-12-229 4.4.0-1060-aws #69-Ubuntu SMP Sun May 20 13:42:07 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux  **Type/provider of hosts: AWS
**Setup details: single node rancher
**Environment Template: Kubernetes</description>
    </item>
    
    <item>
      <title>Mount Ntfs Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/mount-ntfs-base-centos.html</link>
      <pubDate>Wed, 06 Jun 2018 16:57:02 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/mount-ntfs-base-centos.html</guid>
      <description>centos挂载ntfs硬盘
Env  os: centos6.9  当前状态
[root@bitspace ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 931.5G 0 disk ├─sda1 8:1 0 220G 0 part ├─sda2 8:2 0 238G 0 part ├─sda3 8:3 0 237G 0 part └─sda4 8:4 0 236.5G 0 part sdb 8:16 0 111.8G 0 disk ├─sdb1 8:17 0 500M 0 part /boot └─sdb2 8:18 0 111.3G 0 part ├─vg_bitspace-lv_root (dm-0) 253:0 0 50G 0 lvm / ├─vg_bitspace-lv_swap (dm-1) 253:1 0 7.</description>
    </item>
    
    <item>
      <title>Docker Install Base Ubuntu</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-base-ubuntu.html</link>
      <pubDate>Mon, 04 Jun 2018 19:01:35 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-base-ubuntu.html</guid>
      <description>ubuntu中安装docker-ce
Env  os: ubuntu16 ip: ... docker: 17.03.2~ce-0~ubuntu-xenial  Step 查看已安装 sudo docker version  如果有已安装，请卸载，给个示例
sudo apt remove docker* -y  安装 lsb_release -a sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable&amp;quot; sudo apt-get update apt-cache madison docker-ce  查看后，选择我们需要的指定版本, 我这里选择17.03.2.
sudo apt-get install docker-ce=17.03.2~ce-0~ubuntu-xenial -y sudo docker run hello-world  Ref  https://docs.</description>
    </item>
    
    <item>
      <title>Python Pip Install Virtualenv</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-pip-install-virtualenv.html</link>
      <pubDate>Mon, 04 Jun 2018 15:56:51 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-pip-install-virtualenv.html</guid>
      <description>python源码安装pip后，安装virtualenv环境
Step 源码安装pip后, pip会在 /usr/local/python27/bin/ 下，且由pip安装的模块下的命令文件（如下文中的virtualenvwrapper.sh)，也会在这里哟。
环境变量加 pip which pip
[root@bitspace ~]# tail -1 ~/.bashrc export PATH=$PATH:/usr/local/python27/bin [root@bitspace ~]# which pip /usr/local/python27/bin/pip [root@bitspace ~]#  环境变量加 virtualenvwrapper.sh which virtualenvwrapper.sh
[root@bitspace ~]# which virtualenvwrapper.sh /usr/local/python27/bin/virtualenvwrapper.sh [root@bitspace ~]#  加环境变量
[root@bitspace ~]# tail -3 ~/.bashrc export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/workspace source /usr/local/python27/bin/virtualenvwrapper.sh [root@bitspace ~]#  这个时候，已经可以使用mkvirtualenv,workon等下列命令了（但是which会不成功的，一定要注意了）。
mkvirtualenv zqxt：创建运行环境zqxt workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境 deactivate: 退出终端环境 其它的： rmvirtualenv ENV：删除运行环境ENV mkproject mic：创建mic项目和运行环境mic mktmpenv：创建临时运行环境 lsvirtualenv: 列出可用的运行环境 lssitepackages: 列出当前环境安装了的包  创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</description>
    </item>
    
    <item>
      <title>Python Pip Install Ssl Module Not Available</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-pip-install-ssl-module-not-available.html</link>
      <pubDate>Mon, 04 Jun 2018 15:08:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-pip-install-ssl-module-not-available.html</guid>
      <description>先看报错
[root@bitspace pip-10.0.1]# python -m pip install virtualenv virtualenvwrapper pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available. Collecting virtualenv Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;SSLError(&amp;quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.&amp;quot;,)&#39;: /simple/virtualenv/ Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;SSLError(&amp;quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.</description>
    </item>
    
    <item>
      <title>Python Install Setuptools</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-install-setuptools.html</link>
      <pubDate>Mon, 04 Jun 2018 14:29:49 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-install-setuptools.html</guid>
      <description> 源码安装 pip 时，出错，并提示ImportError: No module named setuptools解决方法
Env  python: 2.7.9  Step 安装过程详见这篇博客： http://www.ttlsa.com/python/how-to-install-and-use-pip-ttlsa/
安装后运行到：python setup.py install出现错误，错误图片如下所示：
[root@localhost pip-1.5.4]# python setup.py install Traceback (most recent call last): File “setup.py”, line 6, in from setuptools import setup, find_packages ImportError: No module named setuptools  解决方法
wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz tar zxvf setuptools-0.6c11.tar.gz cd setuptools-0.6c11 python setup.py build python setup.py install  之后就可以开心的使用pip了
Ref  https://blog.csdn.net/yangbodong22011/article/details/52456581  </description>
    </item>
    
    <item>
      <title>Python Zlib Module Missing</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-zlib-module-missing.html</link>
      <pubDate>Mon, 04 Jun 2018 14:22:38 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-zlib-module-missing.html</guid>
      <description>Traceback (most recent call last): File &amp;quot;setup.py&amp;quot;, line 94, in &amp;lt;module&amp;gt; scripts = scripts, File &amp;quot;/usr/local/lib/python2.7/distutils/core.py&amp;quot;, line 152, in setup dist.run_commands() File &amp;quot;/usr/local/lib/python2.7/distutils/dist.py&amp;quot;, line 953, in run_commands self.run_command(cmd) File &amp;quot;/usr/local/lib/python2.7/distutils/dist.py&amp;quot;, line 972, in run_command cmd_obj.run() File &amp;quot;/home/rohan/setuptools-0.6c11/setuptools/command/install.py&amp;quot;, line 76, in run self.do_egg_install() File &amp;quot;/home/rohan/setuptools-0.6c11/setuptools/command/install.py&amp;quot;, line 96, in do_egg_install self.run_command(&#39;bdist_egg&#39;) File &amp;quot;/usr/local/lib/python2.7/distutils/cmd.py&amp;quot;, line 326, in run_command self.distribution.run_command(command) File &amp;quot;/usr/local/lib/python2.7/distutils/dist.py&amp;quot;, line 972, in run_command cmd_obj.run() File &amp;quot;/home/rohan/setuptools-0.6c11/setuptools/command/bdist_egg.py&amp;quot;, line 236, in run dry_run=self.</description>
    </item>
    
    <item>
      <title>Python Install Pip</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-install-pip.html</link>
      <pubDate>Mon, 04 Jun 2018 14:22:12 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-install-pip.html</guid>
      <description>Env  os: centos6.9 python: 2.7.9  step 首先安装Python 我安装了两个版本:
　Python-2.7.10.tgz
首先看一下系统自带的Python版本：
[root@zk src]# python -V Python 2.6.6  安装Python2.7版本：
参考 在centos中python从2.6升级到2.7
开始安装pip 打开 https://pypi.org/search/?q=pip, 点击 pip 10.0.1， 点击 Download files, 右键Copy link address
下载pip [root@zk src]# wget &amp;quot;https://files.pythonhosted.org/packages/ae/e8/2340d46ecadb1692a1e455f13f75e596d4eab3d11a57446f08259dee8f02/pip-10.0.1.tar.gz&amp;quot; [root@zk src]# tar -zxvf pip-1.5.4.tar.gz [root@zk src]# cd pip-1.5.4 [root@zk pip-1.5.4]# python setup.py install  如果出现下面错误
[root@zk pip-1.5.4]# python setup.py install Traceback (most recent call last): File &amp;quot;setup.py&amp;quot;, line 6, in &amp;lt;module&amp;gt; from setuptools import setup, find_packages ImportError: No module named setuptools  看到ImportError: No module named setuptools，缺少setuptools模块</description>
    </item>
    
    <item>
      <title>Python Upgrade Version Base on Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-upgrade-version-base-on-centos.html</link>
      <pubDate>Mon, 04 Jun 2018 10:06:58 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-upgrade-version-base-on-centos.html</guid>
      <description>概要
CentOS 6.9中预安装了Python-2.6.6，其比较新的Python-2.7.9(CentOS 7预装版本)主要区别在于新版本的Python导入了更丰富的模块功能。对于初学者而言这一般不会有太大的影响，相对而言这些新模块在某些特定的编译环境下却是不可或缺的。例如：使用Devstack all-in-one模式进行安装OpenStack开发调试平台，需要Python-2.7及以上的支持，这样可以省去很多缺失模块的麻烦。
Env  os: centos6.9 python: 2.6.6 =&amp;gt; 2.7.9  step 1.查看当前系统的Python Version
[root@jmilk ~]# python --version Python 2.6.6  2.下载Python-2.7.9
wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz  3.安装Python
a. 解压
tar -Jxvf Python-2.7.9.tar.xz -C /usr/src/  b. 安装
mkdir /usr/local/python27 cd /usr/src/Python-2.7.9/ ./configure --prefix=/usr/local/python27 &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  c. 将系统python指令默认指向Python-2.7.9版本
CentOS6.9中YUM需要Python-2.6.6支持，所以不建议卸载老版本。
mv /usr/bin/python /usr/bin/python266 ln -s /usr/local/python27/bin/python2.7 /usr/bin/python python --version  解决YUM与Python2.7.9的兼容问题 因为YUM需要python-2.6.6的支持，CentOS 6.9中YUM却不兼容Python-2.7，导致YUM不可用。
[root@bitspace ~]# yum install python-pip -y There was a problem importing one of the Python modules required to run yum.</description>
    </item>
    
    <item>
      <title>Vsftp Add User</title>
      <link>https://eiuapp.github.io/eiuapp-learn/tools/vsftp-add-user.html</link>
      <pubDate>Wed, 30 May 2018 09:59:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tools/vsftp-add-user.html</guid>
      <description>env  os: centos6.9 ftp: vsftpd ip: 10.88.88.22  step 加用户 加用户，为安全，禁止用户登录
[root@bitspace vsftpd]# useradd liuchao [root@bitspace vsftpd]# passwd liuchao Changing password for user liuchao. New password: [root@bitspace vsftpd]# passwd liuchao Changing password for user liuchao. New password: BAD PASSWORD: it is WAY too short BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@bitspace vsftpd]# vi /etc/passwd [root@bitspace vsftpd]# tail -1 /etc/passwd liuchao:x:507:507::/home/liuchao:/sbin/nologin [root@bitspace vsftpd]# su - liuchao This account is currently not available.</description>
    </item>
    
    <item>
      <title>Ftp Cannot Chrome File Access</title>
      <link>https://eiuapp.github.io/eiuapp-learn/chrome/ftp-cannot-chrome-file-access.html</link>
      <pubDate>Tue, 29 May 2018 15:11:41 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/chrome/ftp-cannot-chrome-file-access.html</guid>
      <description> 为何客户端软件可以而浏览器则不能连接FTP服务器
env  centos6.9 ftp: vsftpd  step 这里主要的点就是理解主动模式与被动模式。
主动模式对服务器端有利，被动模式对客户端有利。但是服务器端既然要提供FTP服务，应该在服务器端设置防火墙规则，提供被动模式服务，而不能要求所有的客户端都设置防火墙规则以适应主动服务模式。当然服务器端在提供被动模式服务时，出于安全考虑，应该设置客户端可发起数据连接的端口范围，这就是下面配置文件中的
pasv_min_port=61001 pasv_max_port=62000  即，告诉客户端可以向61001与62000之间的端口发起数据连接。
[root@bitspace ~]# tail /etc/vsftpd/vsftpd.conf # sockets, you must run two copies of vsftpd with two configuration files. # Make sure, that one of the listen options is commented !! #listen_ipv6=YES pam_service_name=vsftpd userlist_enable=YES tcp_wrappers=YES pasv_min_port=61001 pasv_max_port=62000 [root@bitspace ~]#  Ref  https://blog.csdn.net/zilong00007/article/details/7663152 https://my.oschina.net/iyinghui/blog/1605801 http://www.cnblogs.com/qytan36/archive/2010/05/15/1736270.html  </description>
    </item>
    
    <item>
      <title>Centos6 Install Ftp</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos6-install-ftp.html</link>
      <pubDate>Tue, 29 May 2018 10:39:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos6-install-ftp.html</guid>
      <description>CentOS6上ftp服务器搭建实战
env  centos6.9 IP: 10.88.88.22 IP: 172.16.55.6  step 1.安装程序包 [root@node1 ~]$ yum install -y vsftpd [root@node1 ~]$ yum install -y lftp # 安装测试软件  2.启动vsftpd服务 [root@node1 ~]$ setenforce 0　#关闭selinux setenforce: SELinux is disabled　[root@node1 ~]$ service iptables stop　#关闭防火墙　[root@node1 ~]$ service vsftpd start　# 启动服务 为 vsftpd 启动 vsftpd： [确定] [root@node1 ~]$ service vsftpd status vsftpd (pid 6473) 正在运行... [root@node1 ~]$ ss -tnl | grep 21　#默认监听21号端口 LISTEN 0 32 *:21 *:* [root@bitspace ~]# service vsftpd start Starting vsftpd for vsftpd: [ OK ] [root@bitspace ~]# netstat -anltp | grep 21 tcp 0 0 0.</description>
    </item>
    
    <item>
      <title>Centos Iptable Open Port 21</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos-iptable-open-port-21.html</link>
      <pubDate>Tue, 29 May 2018 10:30:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos-iptable-open-port-21.html</guid>
      <description>centos6.9开放ftp(vsftpd)的21端口
env  centos6.9  [root@bitspace ~]# /etc/rc.d/init.d/iptables save iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ] [root@bitspace ~]# service iptables restart iptables: Setting chains to policy ACCEPT: filter [ OK ] iptables: Flushing firewall rules: [ OK ] iptables: Unloading modules: [ OK ] iptables: Applying firewall rules: [ OK ] [root@bitspace ~]# vim /etc/sysconfig/iptables [root@bitspace ~]# cat /etc/sysconfig/iptables # Generated by iptables-save v1.4.7 on Tue May 29 18:27:18 2018 *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [53:4182] -A INPUT -p tcp -m tcp --dport 21 -j ACCEPT -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT # Completed on Tue May 29 18:27:18 2018 [root@bitspace ~]# [root@bitspace ~]# /sbin/iptables -I INPUT -p tcp --dport 21 -j ACCEPT [root@bitspace ~]# /etc/rc.</description>
    </item>
    
    <item>
      <title>Centos Release</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos-release.html</link>
      <pubDate>Tue, 29 May 2018 10:11:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos-release.html</guid>
      <description>前言
记下CentOS 7查看系统版本及查看机器位数x86-64的方法，由于不经常使用Linux，每当使用的时候就是安装软件，安装软件的时候就要选择安装包平台，是32位的还是64位的。这时候突然发现不知道怎么查，于是百度。虽然轻而易举百度出来，但仍旧没有自己的笔记看起来舒服。所以，还是记录下来。
辨识标准 首先要清楚什么样标识是32位的，什么样的是64位的。
PC server X86 系列
 I386&amp;ndash;I686 都是32位 x86_64 是 64位  查看位数命令 命令实在是不要太多，为了防止选择性障碍，一致选择第一种方式，后面的仅作为补充。
方法1： [root@linuxidc ~]# uname -a Linux linuxidc 3.10.0-327.18.2.el7.x86_64 #1 SMP Thu May 12 11:03:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux  方法2：显示系统程序信息 [root@linuxidc ~]# file /bin/ls /bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=aa7ff68f13de25936a098016243ce57c3c982e06, stripped  方法3： [root@linuxidc ~]# cat /proc/version Linux version 3.</description>
    </item>
    
    <item>
      <title>Network Proxy Iphone</title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-iphone.html</link>
      <pubDate>Mon, 28 May 2018 16:14:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/network-proxy-iphone.html</guid>
      <description>通过手机实现FQ
env 国外安装了代理网络的服务器一台
 ip: ... port: 443 passwd: ********  iphone一台
 APP安装：ShadowBroken  step 先保证在windows中能够使用Shadowsocks客户端实现科学上网
打开 ShadowBroken，把配置写入，然后，连接。现在可以KXSW了。
todo 在 超哥 提供的jumper机器上，实现一个科学上网吧。</description>
    </item>
    
    <item>
      <title>Ssh Login</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login.html</link>
      <pubDate>Thu, 24 May 2018 15:22:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login.html</guid>
      <description>faq 报错：Too many authentication failures
tom@tom-w10vbud16:~/ztom/bits/pem$ ssh -i vachain_competition.pem ubuntu@ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com Received disconnect from 13.125.197.97 port 22:2: Too many authentication failures Connection to ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com closed by remote host. Connection to ec2-13-125-197-97.ap-northeast-2.compute.amazonaws.com closed. tom@tom-w10vbud16:~/ztom/bits/pem$  If you are not using any ssh hosts configuration, you have to explicitly specify the correct key in the ssh command like so:
ssh -i some_id_rsa -o &#39;IdentitiesOnly yes&#39; them@there:/path/  Note: the &amp;lsquo;IdentitiesOnly yes&amp;rsquo; parameter needed to be between quotes.</description>
    </item>
    
    <item>
      <title>Virtualbox Share Pasteboard</title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-share-pasteboard.html</link>
      <pubDate>Thu, 24 May 2018 11:37:55 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-share-pasteboard.html</guid>
      <description> virtubox 共享剪切板
env  host: win10 vbox-os: ubuntu18-desktop  step M1, OK 等我们启动虚拟机进入虚拟机后，在虚拟机的运行框的功能栏部分，如图所示点击设备，然后分别可以配置共享粘贴板和拖拽选项，也是可以配置功能的执行方向
M2, not OK 我们可以在不启动虚拟机实例的进行设置，先鼠标左键点击选择一个创建好的实例，然后点击功能栏的设置图标，进入到设置的总体页面中,然后我们选择常规选项中的高级一栏，鼠标左键点击进入，我们可以看到有共享粘贴板和拖放两个配置项，其中每一个都可以进行单独设置，如图所示，分别可以设置从虚拟机到物理机，或者相反操作，或者双向操作，这里一般推荐设置双向操作，这样我们的虚拟机和物理机就可以无障碍的进行交互了
ref  https://jingyan.baidu.com/article/4dc40848645918c8d846f14b.html  </description>
    </item>
    
    <item>
      <title>Virtualbox Share File</title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-share-file.html</link>
      <pubDate>Thu, 24 May 2018 11:35:21 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-share-file.html</guid>
      <description> Virtualbox Ubuntu 共享文件夹（通过mount方式）
env  host: win10 vbox-os: ubuntu18-desktop  step  win10  ref  分享Virtualbox Ubuntu 共享文件夹、自动挂载的一些问题  </description>
    </item>
    
    <item>
      <title>Linux Http Proxy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-http-proxy.html</link>
      <pubDate>Thu, 24 May 2018 11:30:50 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-http-proxy.html</guid>
      <description>linux-proxy 相关
proxy FQ root@km:~# cat proxy.sh #!/bin/bash NO_PROXY=localhost,127.0.0.1/8,192.168.31.1/24 export NO_PROXY export http_proxy=http://192.168.31.10:1080/ export https_proxy=http://192.168.31.10:1080/ root@km:~#  这个问题，可以参考 https://blog.finsoft.info/posts/ubuntu-apt-http-proxy/#%E5%8F%96%E6%B6%88apt%E4%BB%A3%E7%90%86
终端： [tom@mpro Desktop]$ export http_proxy=http://192.168.31.10:8031 # 这个 http://192.168.31.10:8031 是在 192.168.31.10的机器提供出来的 地址。 192.168.31.10的机器 是代理服务器。 [tom@mpro Desktop]$ export https_proxy=http://192.168.31.10:8031 [tom@mpro Desktop]$ ping www.google.com.hk # 代理后，ping 依然是不行的。呵呵 PING www.google.com.hk (93.46.8.89) 56(84) bytes of data. ^C --- www.google.com.hk ping statistics --- 6 packets transmitted, 0 received, 100% packet loss, time 4999ms [tom@mpro Desktop]$ wget www.</description>
    </item>
    
    <item>
      <title>Linux Wgetrc Wget Proxy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-wgetrc-wget-proxy.html</link>
      <pubDate>Thu, 24 May 2018 11:24:18 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-wgetrc-wget-proxy.html</guid>
      <description> wgetrc打开 wget 的代理
env  centos  step 通过 /etc/wgetrc 打开 wget 的代理
[root@www ~]# vim /etc/wgetrc #http_proxy = http://proxy.yoyodyne.com:18023/ &amp;lt;==找到底下这几行，大约在 78 行 #ftp_proxy = http://proxy.yoyodyne.com:18023/ #use_proxy = on # 将他改成类似底下的模样，记得，你必须要有可接受的 proxy 主机才行！ http_proxy = http://192.168.31.10:8031/ use_proxy = on # use_proxy=off ## 关闭 [root@www ~]#  ref  http://cn.linux.vbird.org/linux_server/0140networkcommand.php#wget  </description>
    </item>
    
    <item>
      <title>Xshell Ubuntu Transmitter File</title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/xshell-ubuntu-transmitter-file.html</link>
      <pubDate>Thu, 24 May 2018 11:19:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/xshell-ubuntu-transmitter-file.html</guid>
      <description> xshell + ubuntu 直接拖拽完成传输
env  win10-xshell ubuntu  step ubunut 安装lrzsz软件
ubuntu@ip-172-31-17-102:~$ sudo apt install lrzsz Reading package lists... Done Building dependency tree Reading state information... Done lrzsz is already the newest version (0.12.21-8). 0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded. ubuntu@ip-172-31-17-102:~$  如果第一次没有成功，则，直接再把上面的命令运行一次
传输完成了，会显示如下内容
ubuntu@ip-172-31-17-102:~$ rz -E rz waiting to receive. ubuntu@ip-172-31-17-102:~$  </description>
    </item>
    
    <item>
      <title>Ubuntu Apt Http Proxy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-apt-http-proxy.html</link>
      <pubDate>Thu, 24 May 2018 10:16:52 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-apt-http-proxy.html</guid>
      <description>Ubuntu的更改apt-get代理，设置与取消
apt代理的设置 方法1 这是一种临时的手段，如果您仅仅是暂时需要通过http代理使用apt-get，您可以使用这种方式。
在使用apt-get之前，在终端中输入以下命令（根据您的实际情况替换yourproxyaddress和proxyport）。
export http_proxy=http://yourproxyaddress:proxyport  方法2 这种方法要用到/etc/apt/文件夹下的apt.conf文件。如果您希望apt-get（而不是其他应用程序）一直使用http代理，您可以使用这种方式。
注意：某些情况下，系统安装过程中没有建立apt配置文件。下面的操作将视情况修改现有的配置文件或者新建配置文件。
sudo gedit /etc/apt/apt.conf在您的apt.conf文件中加入下面这行（根据你的实际情况替换yourproxyaddress和proxyport）。
Acquire::http::Proxy &amp;quot;http://yourproxyaddress:proxyport&amp;quot;  保存apt.conf文件。
方法3 这种方法会在您的主目录下的.bashrc文件中添加两行。如果您希望apt-get和其他应用程序如wget等都使用http代理，您可以使用这种方式。
gedit ~/.bashrc在您的.bashrc文件末尾添加如下内容（根据你的实际情况替换yourproxyaddress和proxyport）。
http_proxy=http://yourproxyaddress:proxyport  export http_proxy保存文件。关闭当前终端，然後打开另一个终端。
使用apt-get update或者任何您想用的网络工具测试代理。我使用firestarter查看活动的网络连接。
如果您为了纠正错误而再次修改了配置文件，记得关闭终端并重新打开，否自新的设置不会生效。
方法4 另外，apt-get也有一个“-o”选项，直接跟apt-get的设置变量，就不用指定配置文件了，比如
sudo apt-get -o Acquire::http::proxy=&amp;quot;http://127.0.0.1:1080/”  取消apt代理 今天想装个软件(wine)，使用 sudo apt-get update 命令时，发现给出很多Ign 语句，总出现 Connecting to proxy.http://10.0.126.1:13128 的字样，发现这个代理是已经废弃掉的。接着想去取消使用该代理： 1、 查看/etc/apt/apt.conf，发现存在： http_proxy=&amp;quot;http://10.0.126.1:13128/&amp;quot; https_proxy=&amp;quot;https://10.0.126.1:13128/&amp;quot; ftp_proxy=&amp;quot;ftp://10.0.126.1:13128/&amp;quot; socks_proxy=&amp;quot;socks://10.0.126.1:13128/&amp;quot; 直接删除该文件，重启电脑，发现问题还是没解决； 2、百度一下，命令行执行：export http_proxy=&amp;quot;&amp;quot; 发现问题未解； 执行 unset http_proxy 问题还是存在； 3、查看~/.bashrc，未发现存在http_proxy之类设置; 4、env | grep proxy 发现依然存在 http 代理； 5、根目录查找一把： sudo grep -r -i http_proxy=http://10.</description>
    </item>
    
    <item>
      <title>Ubuntu Install Wubipinyin</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-install-wubipinyin.html</link>
      <pubDate>Thu, 24 May 2018 09:32:16 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-install-wubipinyin.html</guid>
      <description> ubuntu安装 五笔拼音输入法
env  Ubuntu Desktop 16.04  step 方法1 https://www.linuxdashen.com/ubuntu-16-04-%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85fcitx%E4%BA%94%E7%AC%94%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95
方法2 sudo add-apt-repository ppa:fcitx-team/nightly sudo apt update -y sudo apt -y install fcitx sudo apt -y install fcitx-table-wbpy  System Setting/Language Support/Keyboard input method system/ =&amp;gt; fcitx
打开System Setting系统设置&amp;gt;Text Entry
记得重启哟！
ref  https://www.linuxdashen.com/ubuntu-16-04-%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85fcitx%E4%BA%94%E7%AC%94%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95 https://blog.csdn.net/zzqlivecn/article/details/25018203 https://blog.csdn.net/hamigua0208/article/details/51421117 https://blog.csdn.net/e421083458/article/details/37738805  </description>
    </item>
    
    <item>
      <title>Ngrok Ssh</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-ssh.html</link>
      <pubDate>Mon, 23 Apr 2018 00:05:45 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-ssh.html</guid>
      <description>远程登录家里的Ubuntu电脑(命令行模式)
env 服务端  机器: 腾讯云主机一台 IP: 111.230.153.251 OS: ubuntu server 16.04.1
客户端 机器: 腾讯云主机一台
 IP: 192.168.31.106
 OS: ubuntu desktop 16.04.3
  step 服务端建立一个 ngrokd服务,开通 4445 tunnel 我这里写成一个服务了的.
ubuntu@VM-0-12-ubuntu:~$ cat /etc/systemd/system/ngrok-83-84-45.service [Unit] Description=ngrok After=network.target [Service] ExecStart=/home/ubuntu/ngrok/ngrok-e/ngrok/bin/ngrokd -tlsKey=/home/ubuntu/ngrok/ngrok-e/ngrok/server.key -tlsCrt=/home/ubuntu/ngrok/ngrok-e/ngrok/server.crt -domain=&amp;quot;hkshop.club&amp;quot; -httpAddr=&amp;quot;:8083&amp;quot; -httpsAddr=&amp;quot;:8084&amp;quot; -tunnelAddr=&amp;quot;:4445&amp;quot; [Install] WantedBy=multi-user.target ubuntu@VM-0-12-ubuntu:~$ ubuntu@VM-0-12-ubuntu:~$ sudo systemctl status ngrok-83-84-45.service ● ngrok-83-84-45.service - ngrok Loaded: loaded (/etc/systemd/system/ngrok-83-84-45.service; disabled; vendor preset: enabled) Active: active (running) since Sun 2018-04-22 09:05:30 CST; 24h ago Main PID: 20599 (ngrokd) Tasks: 5 Memory: 2.</description>
    </item>
    
    <item>
      <title>Ngrok Multi User Tunnel</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-multi-user-tunnel.html</link>
      <pubDate>Sun, 22 Apr 2018 09:02:38 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-multi-user-tunnel.html</guid>
      <description>一个 ngrokd 服务配置多个协议
env 服务端  机器: 腾讯云主机一台 IP: 111.230.153.251 OS: ubuntu server 16.04.1  客户端  机器: 腾讯云主机一台 IP: 192.168.31.106 OS: ubuntu desktop 16.04.3  step 服务端 ubuntu@VM-0-12-ubuntu:~$ cat /etc/systemd/system/ngrok-e.service [Unit] Description=ngrok After=network.target [Service] #/home/ubuntu/ngrok/ngrok-e/ngrok=/home/ubuntu/ngrok/ngrok-e/ngrok ExecStart=/home/ubuntu/ngrok/ngrok-e/ngrok/bin/ngrokd -tlsKey=/home/ubuntu/ngrok/ngrok-e/ngrok/server.key -tlsCrt=/home/ubuntu/ngrok/ngrok-e/ngrok/server.crt -domain=&amp;quot;hkshop.club&amp;quot; -httpAddr=&amp;quot;:8081&amp;quot; -httpsAddr=&amp;quot;:8082&amp;quot; [Install] WantedBy=multi-user.target ubuntu@VM-0-12-ubuntu:~$ sudo systemctl status ngrok-e.service ● ngrok-e.service - ngrok Loaded: loaded (/etc/systemd/system/ngrok-e.service; disabled; vendor preset: enabled) Active: active (running) since Sat 2018-04-21 08:34:20 CST; 2 days ago Main PID: 19755 (ngrokd) Tasks: 5 Memory: 2.</description>
    </item>
    
    <item>
      <title>Ngrok Server Install(搭建自己的ngrok服务器)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-server-install.html</link>
      <pubDate>Thu, 19 Apr 2018 15:18:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ngrok/ngrok-server-install.html</guid>
      <description>搭建自己的ngrok服务器
env 服务端  机器: 腾讯云主机一台 IP: 111.230.153.251 OS: ubuntu server 16.04.1
客户端 机器: 腾讯云主机一台
 IP: 192.168.31.106
 OS: ubuntu desktop 16.04.3
  step 主要就是参考了 搭建 ngrok 服务实现内网穿透 一文
编译 ngrok 编译我是在服务端完成的
首先装必要的工具：
sudo apt-get install build-essential golang mercurial git  获取 ngrok 源码：
git clone https://github.com/inconshreveable/ngrok.git ngrok ### 请使用下面的地址，修复了无法访问的包地址 git clone https://github.com/tutumcloud/ngrok.git ngrok cd ngrok  生成并替换源码里默认的证书，注意域名修改为你自己的。（之后编译出来的服务端客户端会基于这个证书来加密通讯，保证了安全性）
NGROK_DOMAIN=&amp;quot;hkshop.club&amp;quot; openssl genrsa -out base.key 2048 openssl req -new -x509 -nodes -key base.</description>
    </item>
    
    <item>
      <title>Python Install Uwsgi</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-install-uwsgi.html</link>
      <pubDate>Tue, 17 Apr 2018 23:51:55 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-install-uwsgi.html</guid>
      <description>env  IP: home, 192.168.31.109 OS: ubuntu, 16.04.03  step pip install uwsgi==2.0.17时出错: lto1: fatal error: bytecode stream generated with LTO version 6.0 instead of the expected 4.1 (saleor-a-1) tom@saleor-a:~/saleor$ pip install uwsgi==2.0.17 _offload/offload.o plugins/router_memcached/router_memcached.o plugins/router_redis/router_redis.o plugins/router_hash/router_hash.o plugins/router_expires/expires.o plugins/router_metrics/plugin.o plugins/transformation_template/tt.o plugins/stats_pusher_socket/plugin.o -lpthread -lm -rdynamic -ldl -L/home/tom/anaconda3/lib -lpcre -L/home/tom/anaconda3/lib -lxml2 -L/home/tom/anaconda3/lib -lz -L/home/tom/anaconda3/lib -llzma -L/home/tom/anaconda3/lib -L/home/tom/anaconda3/lib -licui18n -licuuc -licudata -lm -ldl -lpthread -ldl -lutil -lrt -lm /home/tom/anaconda3/lib/python3.6/config-3.6m-x86_64-linux-gnu/libpython3.6m.a -lutil -lcrypt lto1: fatal error: bytecode stream generated with LTO version 6.</description>
    </item>
    
    <item>
      <title>gitlab修改密码</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-change-password.html</link>
      <pubDate>Tue, 17 Apr 2018 17:15:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-change-password.html</guid>
      <description>gitlab修改密码
env  IP: 192.168.31.169 OS: ubuntu-16.04 gitlab: 10.6.4  step root@gitlab:~# sudo gitlab-rails console production Warning: fuzzy message was ignored. : msgid &#39;&amp;lt;strong&amp;gt;Removes&amp;lt;/strong&amp;gt; source branch&#39; Warning: fuzzy message was ignored. : msgid &#39;A new branch will be created in your fork and a new merge request will be started.&#39; Warning: fuzzy message was ignored. : msgid &#39;A user with write access to the source branch selected this option&#39; Warning: fuzzy message was ignored.</description>
    </item>
    
    <item>
      <title>Gitlab汉化</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-cn.html</link>
      <pubDate>Tue, 17 Apr 2018 09:50:03 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-cn.html</guid>
      <description> 对gitlab进行汉化
env IP: 192.168.31.148 OS: ubuntu-14.04.5 gitlab: 10.6.4
step mkdir xhang &amp;amp;&amp;amp; cd xhang git clone https://gitlab.com/xhang/gitlab.git cd gitlab/ git fetch gitlab_version=$(sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION) echo ${gitlab_version} git diff v${gitlab_version} v${gitlab_version}-zh &amp;gt; ../${gitlab_version}-zh.diff cd .. sudo gitlab-ctl stop sudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &amp;lt; 10.6.4-zh.diff sudo gitlab-ctl start sudo gitlab-ctl reconfigure telnet 192.168.31.148 7890  ref  汉化指南，基于 Larry Li 版汉化指南 修改  </description>
    </item>
    
    <item>
      <title>Gitlab Install Base Ubuntu14.04</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-install-base-ubuntu14.04.html</link>
      <pubDate>Mon, 16 Apr 2018 17:36:11 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-install-base-ubuntu14.04.html</guid>
      <description>gitlab在ubuntu14.04和ubuntu16.04上安装
env IP: 192.168.31.148 OS: ubuntu-14.04.5 gitlab: 10.6.4
env2 IP: 192.168.31.169 OS: ubuntu-16.04 gitlab: 10.6.4
step 按照 清华大学 Gitlab Community Edition 镜像使用帮助 安装就可以了.
一定要注意系统版本
修改IP, sudo vi /etc/gitlab/gitlab.rb修改下面内容
external_url &#39;http://192.168.31.148:7890&#39;  重启
sudo gitlab-ctl reconfigure  浏览器打开 http://192.168.31.148:7890 修改密码,重新登陆.
faq libstdc++.so.6: version `GLIBCXX_3.4.21&amp;rsquo; not found strings /home/kzl/anaconda2/bin/../lib/libstdc++.so.6 | grep GLIBCXX  可以看到所有的安装的 glibc++ 版本, 这里确实是没有3.4.21版本
后来才发现,我安装的时候,没有选择正确的系统版本(最先选择了ubuntu16.04,应该先看一下系统版本,然后选择 ubuntu14.04)
ref  Gitlab Community Edition 镜像使用帮助 version `GLIBCXX_3.4.21&amp;rsquo; not found 解决办法 ImportError: /home/kzl/anaconda2/bin/.</description>
    </item>
    
    <item>
      <title>Saleor</title>
      <link>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-faq.html</link>
      <pubDate>Sun, 15 Apr 2018 23:58:27 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/saleor/saleor-faq.html</guid>
      <description>关于 saleor 项目
env  IP: home, 192.168.31.109 OS: ubuntu, 16.04.03  step FAQ-1 pip install uwsgi==2.0.17时出错: lto1: fatal error: bytecode stream generated with LTO version 6.0 instead of the expected 4.1 见 python-install-uwsgi 一文.
FAQ-2 这一小节是一个大大的错误, 可直接看下一小节
export SECRET_KEY=&#39;**********&#39; export DATABASE_URL=&#39;*********&#39; sudo vi /etc/postgresql/9.6/main/pg_hba.conf ls /etc/init.d/postgresql sudo /etc/init.d/postgresql reload createuser -P -s -e saleor # 报错 createuser -P -s -e saleor -U postgres python manage.py migrate # 报错 which createdb createdb saleorBillions # 报错 createdb saleorBillions -U postgres python manage.</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/command-github.html</link>
      <pubDate>Thu, 12 Apr 2018 09:39:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/command-github.html</guid>
      <description> 建立 github.io 工程页面 建立项目主页
 新建一个repo，repo名字随意。 点进repo主页然后点击右面的Settings，页面往下拉到GitHub Pages部分，选择Launch automatic page generator&amp;gt;Continue to layouts&amp;gt;Publish page即可.（由于大部分情况下并不用默认的页面和样式，所以这里不需要太纠结于内容编辑）   这样一个项目主页就建立完成了，此时可以用.github.io/访问到了。
 比如, 我这里有一个repo(如cheatsheets)是可以作为一个项目主页, 然后项目主页建立完成了后，此时可以用.github.io/访问到了&amp;hellip;
ref  单个GitHub帐号下添加多个GitHub Pages的相关问题  </description>
    </item>
    
    <item>
      <title>Mac上SSH-Key对应多个github账号</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-ssh-github.html</link>
      <pubDate>Sat, 07 Apr 2018 22:30:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-ssh-github.html</guid>
      <description>Mac 上SSH-Key对应多个github账号
当然, 也不单是github帐号, gitlab或者其它账号都是可以的哟&amp;hellip;
前言 因为最近在其他公司帮忙，而其公司用的是他们自己的git服务器，自己本公司又有自己的git服务器，然后自己还用github，造成三个git账号的都要ssh-key，而在网上一搜生成ssh-key的方法都是直接就给你弄全局了，然后肯定又会覆盖原有的ssh-key，所以查了一下关于同机器多账号的ssh-key配置，在此记录一下。
操作步骤 如果我们Mac上面已经有了ssh-key再创建ssh-key的话，需要给我们的ssh-key文件取不同的名字，默认是id_rsa，如果不重新起名的话，会把原有的给覆盖掉。
1.新建ssh-key&amp;amp;重新命名 //切换到ssh目录 cd ~/.ssh //新建ssh-key ssh-keygen -t rsa -C &amp;quot;mywork@email.com&amp;quot; //为新建的ssh-key重新命名 Enter file in which to save the key (/Users/bombvote-zql/.ssh/id_rsa):id_ras_bill_github  2.新ssh-key添加到ssh agent中 因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：
ssh-add ~/.ssh/id_ras_bill_github  3.配置 将不同账号的工程图服务器与ssh-key关联 #thub user(first@email.com) Host github1 HostName git.some.com/ User git IdentityFile /Users/bombvote-zql/.ssh/id_rsa # second user(second@email.com) # 建一个github别名，新建的帐号使用这个别名做克隆和更新 Host github2 HostName github.com User git IdentityFile /Users/bombvote-zql/.ssh/id_ras_bill_github  4.在git服务器上添加公钥 vim ~/.ssh/id_rsa_bill_github.pub  然后将内容复制添加到服务器账号里面 其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。这里将GitHub SSH仓库地址中的git@github.</description>
    </item>
    
    <item>
      <title>Hugo Gitment</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-gitment.html</link>
      <pubDate>Wed, 04 Apr 2018 16:44:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-gitment.html</guid>
      <description> Hugo 集成 Gitment 评论插件
ref  Hugo 集成 Gitment 评论插件  </description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/python.html</link>
      <pubDate>Wed, 04 Apr 2018 15:59:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/python.html</guid>
      <description> python shell 中如何实现清屏 方法1
ctrl+L
方法2
import os i=os.system(&#39;cls&#39;)  查模块版本
(django1.11) ➜ example_i18n_polymorphic git:(master) ✗ python -m django --version 1.11 (django1.11) ➜ example_i18n_polymorphic git:(master) ✗  </description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/python.html</link>
      <pubDate>Tue, 03 Apr 2018 23:00:53 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/python.html</guid>
      <description>金角大王等待唐僧的日子
ipython - bpython 一直用的是 ipython，感觉比 bpython 好些，
关于它们之间对比可以参看 http://stackoverflow.com/questions/4232923/ipython-or-bpython</description>
    </item>
    
    <item>
      <title>Kubernetes Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/kubernetes.html</link>
      <pubDate>Mon, 02 Apr 2018 22:41:53 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/kubernetes.html</guid>
      <description>docker8.com/
 k8s.docker8.com/
 feiskyer/kubernetes-handbook
 ctolib.com-kubernetes-handbook/introduction
 ctolib.com-kubernetes-handbook
 magicsandbox,边做边学K8S,Learn Kubernetes by doing.
 KeKe-Li/kubernetes-tutorial
 StudyXX/google-containers
  https://github.com/gjmzj/kubeasz
rootsongjc 的 kubernetes-vagrant-centos-cluster</description>
    </item>
    
    <item>
      <title>Kubernetes Heapster Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-heapster-install.html</link>
      <pubDate>Wed, 28 Mar 2018 10:46:26 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-heapster-install.html</guid>
      <description>env 192.168.31.120 master
step root@km:~/heapster# git remote -v origin	https://github.com/kubernetes/heapster.git (fetch) origin	https://github.com/kubernetes/heapster.git (push) root@km:~/heapster# git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) modified: deploy/kube-config/influxdb/grafana.yaml modified: deploy/kube-config/influxdb/heapster.yaml modified: deploy/kube-config/influxdb/influxdb.yaml no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;) root@km:~/heapster# git diff deploy/kube-config/influxdb/grafana.</description>
    </item>
    
    <item>
      <title>Mysql Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/mysql.html</link>
      <pubDate>Mon, 26 Mar 2018 16:23:40 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/mysql.html</guid>
      <description> 查看 MYSQL连接数 show processlist;  设置mysql远程连接root权限 MariaDB [(none)]&amp;gt; Grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;mysql&#39; with grant option; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&amp;gt; flush privileges; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&amp;gt;  </description>
    </item>
    
    <item>
      <title>Linux Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/linux.html</link>
      <pubDate>Mon, 26 Mar 2018 16:21:02 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/linux.html</guid>
      <description> 查看 机器的连接数 netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;  </description>
    </item>
    
    <item>
      <title>Mysql Passwd</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-passwd.html</link>
      <pubDate>Mon, 26 Mar 2018 16:18:39 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-passwd.html</guid>
      <description>mysql插入密码 &amp;gt; INSERT INTO `factor_administrator` (`id_admin`,`name`,`pwd`,`admin`) VALUES (1,&#39;wuxuan&#39;,md5(&#39;gws20180129&#39;),1);  那么, 这时, 用户与密码就是: wuxuan, gws20180129</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/cheatsheet.html</link>
      <pubDate>Wed, 21 Mar 2018 10:56:42 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/cheatsheet.html</guid>
      <description> cheetsheat  cheat-sheets.org  linux  unix-linux-cheat-sheet linux-commands-cheat-sheet linux-command-shelf  docker  docker-command-manual docker-cli-to-kubectl  kubernetes  kubernetes(不全) Kubernetes核心概念总结  bash  jimmysong.io/cheatsheets/bash  nginx ops  运维不仅仅是Linux，居然还要知道这么多？ 史上最全互联网运维工作规划！十分钟找到职业方向！ 建设DevOps统一运维监控平台，先从日志监控说起  mysql  cheat-sheets/mysql overapi.com/mysql cheat-sheets/mysql 不全  python  PQRC-2.4-A4-latest cheat-sheets/python/  </description>
    </item>
    
    <item>
      <title>Javascript Faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/javascript/javascript-faq.html</link>
      <pubDate>Wed, 21 Mar 2018 09:57:04 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/javascript/javascript-faq.html</guid>
      <description>Mixpanel error: &amp;quot;mixpanel&amp;quot; object not initialized. Ensure you are using the latest version of the Mixpanel JS Library along with the snippet we provide.</description>
    </item>
    
    <item>
      <title>Telephone Interview</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/interview/telephone-interview.html</link>
      <pubDate>Tue, 20 Mar 2018 15:54:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/interview/telephone-interview.html</guid>
      <description> 环境  安静 接耳塞 嘴巴不含有其它东西(口香糖) 坐姿端正,面带微笑 注意声调,不要用升调  事前准备  了解公司 发展情况, 公司概况 了解岗位 一份简历, 对简历作标注 笔纸 记录下面内容  试官的名字 重要内容  提问的问题  不要问薪资报酬相关的问题,等对方问我们   聆听  开始  早上好、下午好, 而不是你好,  进行中  热情 不抢话 句子之间多停顿 回答问题时语速不必太快，发音吐字要清晰，表述要简洁、直截了当、充满热情，使得谈话有趣而易于进行，快了反而会弄巧成拙。 切忌用 YES NO 简单回答 &amp;ldquo;以上是我的回答,您看如何&amp;rdquo; &amp;ldquo;对不起,请让我再来一次&amp;rdquo; 总结类，情景扮演类，或是其它任何你觉得困难的，不要犹豫，直接询问考官是否可以给你半分钟到一分钟的时间准备  提问  面试官的姓名?主要负责什么?现在面临的技术挑战是什么? 岗位细节? 公司有没有社区活动? 什么时候, 什么形式得到面试结果通知? 如果气氛不错，可以问问对方对自己的印象 今天表现有哪里不足需要改进的  结束 表示感谢 谢谢! 今天很荣幸与您/你交谈，受益良多。
其它 通话结束，等待HR先挂电话。
结束后  感谢邮件   ref  接受电话面试时有哪些注意事项？  </description>
    </item>
    
    <item>
      <title>Mac Faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-faq.html</link>
      <pubDate>Thu, 15 Mar 2018 16:33:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-faq.html</guid>
      <description>how-to-open-app-from-unidentified-developer-in-mac-os-x how-to-open-app-from-unidentified-developer-in-mac-os-x
https://zhidao.baidu.com/question/466554299.html</description>
    </item>
    
    <item>
      <title>Mac Faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac.html</link>
      <pubDate>Thu, 15 Mar 2018 16:33:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac.html</guid>
      <description>mac</description>
    </item>
    
    <item>
      <title>WeChat Send Messages</title>
      <link>https://eiuapp.github.io/eiuapp-learn/wechat/weixin-send-messages.html</link>
      <pubDate>Sat, 10 Mar 2018 16:05:35 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/wechat/weixin-send-messages.html</guid>
      <description>  监控服务调用微信API如何给自己发告警信息 微信开发之发送消息接口 微信智能问答机器人  golang  golang-wechat golang-wechat https://github.com/songtianyi/wechat-go https://github.com/liushuchun/wechatcmd wechat_pusher - 基于Golang开发的高性能微信消息定时推送框架 https://github.com/yaotian/gowechat  个人号  最优雅的微信个人号 API
微信机器人 机器人
 机器人
 WeChatRebot
 http://reverland.org/javascript/2016/01/15/webchat-user-bot/
 微信机器人
  </description>
    </item>
    
    <item>
      <title>Javascript Type</title>
      <link>https://eiuapp.github.io/eiuapp-learn/javascript/javascript-type.html</link>
      <pubDate>Fri, 09 Mar 2018 11:32:33 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/javascript/javascript-type.html</guid>
      <description>简单谈谈Javascript中类型的判断</description>
    </item>
    
    <item>
      <title>Stock Iwencai Crawler</title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/stock-iwencai-crawler.html</link>
      <pubDate>Fri, 09 Mar 2018 11:22:53 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/stock-iwencai-crawler.html</guid>
      <description> iwencai爬虫
以下这几个, 记得回来, 找时间 coding
github  https://github.com/GraySilver/wencai-master https://github.com/zhangzheng88/iwencai_spider https://github.com/wuxiaoxiaoshen/WenCai https://github.com/HiddenStrawberry/iWencai  自写  base headless-chrome-crawler  这个部分的示例代码,请看 仓库
 crawler, 这个是失败的, 不用再试了  </description>
    </item>
    
    <item>
      <title>Curl</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/curl.html</link>
      <pubDate>Thu, 08 Mar 2018 17:47:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/curl.html</guid>
      <description>获取header env 要求发送get请求，只看服务器返回的头信息
curl --head xxxx.com 这样可以看服务器返回的头信息，但是，发送的是head请求
请问，怎么做？
step ➜ ~ curl -X GET -I https://www.baidu.com/ HTTP/1.1 200 OK Server: nginx Date: Thu, 08 Mar 2018 09:46:48 GMT Content-Type: text/html;charset=utf-8 Content-Length: 491 Vary: Accept-Encoding Set-Cookie: vvvv=1; Path=/; Expires=Thu, 08-Mar-18 09:47:48 GMT Vary: Accept-Encoding X-Cache: MISS from bs88.10jqka.com.cn X-Cache: MISS from cachexs Via: 1.1 bs88.10jqka.com.cn (squid/3.5.20), 1.1 cachexs (squid/3.5.20) Connection: keep-alive ➜ ~  获取复杂URL内容 ➜ ~ curl -H &amp;quot;Content-Type:application/json&amp;quot; -X GET -sL https://www.</description>
    </item>
    
    <item>
      <title>Stock Iwencai</title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/stock-iwencai.html</link>
      <pubDate>Thu, 08 Mar 2018 16:43:27 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/stock-iwencai.html</guid>
      <description>搜索股票 env 搜索 &amp;ldquo;昨日涨停,今天涨幅&amp;gt;5%&amp;ldquo;的股票
https://www.iwencai.com/stockpick/search?querytype=stock&amp;amp;tid=stockpick&amp;amp;w=&amp;quot;量价巨增，底部吸筹&amp;quot;
step 准备URL  方法1  打开url解码工具
昨日涨停,今天涨幅&amp;gt;5%  放到左边, 点击解码,得到
%e6%98%a8%e6%97%a5%e6%b6%a8%e5%81%9c%2c%e4%bb%8a%e5%a4%a9%e6%b6%a8%e5%b9%85%3e5%25  把刚刚得到的结果, 替换到下面w后面的位置
https://www.iwencai.com/stockpick/load-data?typed=0&amp;amp;preParams=&amp;amp;ts=1&amp;amp;f=1&amp;amp;qs=result_original&amp;amp;selfsectsn=&amp;amp;querytype=stock&amp;amp;searchfilter=&amp;amp;tid=stockpick&amp;amp;w=%E9%87%8F%E4%BB%B7%E5%B7%A8%E5%A2%9E%EF%BC%8C%E5%BA%95%E9%83%A8%E5%90%B8%E7%AD%B9&amp;amp;queryarea=  成
https://www.iwencai.com/stockpick/load-data?typed=0&amp;amp;preParams=&amp;amp;ts=1&amp;amp;f=1&amp;amp;qs=result_original&amp;amp;selfsectsn=&amp;amp;querytype=stock&amp;amp;searchfilter=&amp;amp;tid=stockpick&amp;amp;w=%e6%98%a8%e6%97%a5%e6%b6%a8%e5%81%9c%2c%20%e4%bb%8a%e5%a4%a9%e6%b6%a8%e5%b9%85%3e5%25&amp;amp;queryarea=   方法2  把搜索条件 替换到下面w后面的位置
https://www.iwencai.com/stockpick/load-data?typed=0&amp;amp;preParams=&amp;amp;ts=1&amp;amp;f=1&amp;amp;qs=result_original&amp;amp;selfsectsn=&amp;amp;querytype=stock&amp;amp;searchfilter=&amp;amp;tid=stockpick&amp;amp;w=%E9%87%8F%E4%BB%B7%E5%B7%A8%E5%A2%9E%EF%BC%8C%E5%BA%95%E9%83%A8%E5%90%B8%E7%AD%B9&amp;amp;queryarea=  成
https://www.iwencai.com/stockpick/load-data?typed=0&amp;amp;preParams=&amp;amp;ts=1&amp;amp;f=1&amp;amp;qs=result_original&amp;amp;selfsectsn=&amp;amp;querytype=stock&amp;amp;searchfilter=&amp;amp;tid=stockpick&amp;amp;w=昨日涨停,今天涨幅&amp;gt;5%&amp;amp;queryarea=  得到股票  浏览器  然后, 打开刚刚得到的 url, 就能得到我们想要的股票了
 curl  没成功
➜ src git:(master) ✗ curl -sL https://www.iwencai.com/stockpick/load-data\?typed\=0\&amp;amp;preParams\=\&amp;amp;ts\=1\&amp;amp;f\=1\&amp;amp;qs\=result_original\&amp;amp;selfsectsn\=\&amp;amp;querytype\=stock\&amp;amp;searchfilter\=\&amp;amp;tid\=stockpick\&amp;amp;w\=昨日涨停,今天涨幅\&amp;gt;5%\&amp;amp;queryarea\= &amp;lt;html&amp;gt;&amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;//s.thsi.cn/js/chameleon/chameleon.min.1520561.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;quot;javascript&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.location.href=&amp;quot;http://www.iwencai.com/stockpick/load-data?typed=0&amp;amp;preParams=&amp;amp;ts=1&amp;amp;f=1&amp;amp;qs=result_original&amp;amp;selfsectsn=&amp;amp;querytype=stock&amp;amp;searchfilter=&amp;amp;tid=stockpick&amp;amp;w=昨日涨停,今天涨幅&amp;gt;5%&amp;amp;queryarea=&amp;quot;; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; ➜ src git:(master) ✗   crawler  这个部分见, stock-iwencai-crawler.</description>
    </item>
    
    <item>
      <title>Html Decoder</title>
      <link>https://eiuapp.github.io/eiuapp-learn/html/html-decoder.html</link>
      <pubDate>Thu, 08 Mar 2018 15:51:23 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/html/html-decoder.html</guid>
      <description> 在线解码 http://www.ofmonkey.com/encode/unicode
html-decoder 包的使用 install [jlch@check gen]$ sudo npm install -g html-decoder [jlch@check gen]$ cd /usr/local/lib/node_modules/html-decoder/ [jlch@check html-decoder]$ ls bin data dist Gruntfile.js LICENSE package.json README.md src tests  测试 [jlch@check html-decoder]$ sudo vi data/entities.json ## 把想decoder的内容放进去 [jlch@check html-decoder]$ sudo ./bin/genhtmlentities data/entities.json Completed in 49 milliseconds! [jlch@check html-decoder]$ cat ./src/gen/trie.json ## 这个是存放结果的地方 {&amp;quot;1&amp;quot;:{},&amp;quot;2&amp;quot;:{},&amp;quot;3&amp;quot;:{},&amp;quot;5&amp;quot;:{},&amp;quot;6&amp;quot;:{},&amp;quot;7&amp;quot;:{},&amp;quot;8&amp;quot;:{},&amp;quot;9&amp;quot;:{}} [jlch@check html-decoder]$ ll ./src/gen/trie.json -rw-r--r-- 1 root root 57 3月 8 15:49 ./src/gen/trie.json [jlch@check html-decoder]$  </description>
    </item>
    
    <item>
      <title>Hedge Fund</title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/hedge-fund.html</link>
      <pubDate>Wed, 07 Mar 2018 10:48:37 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/hedge-fund.html</guid>
      <description>Steve Cohen http://blog.sina.com.cn/s/blog_51fc34e90102wgw5.html
https://www.zhihu.com/question/27100014
https://wallstreetcn.com/articles/308468</description>
    </item>
    
    <item>
      <title>Gcc Rpm Install Offline</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/gcc-rpm-install-offline.html</link>
      <pubDate>Fri, 02 Mar 2018 17:29:20 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/gcc-rpm-install-offline.html</guid>
      <description>gcc rpm 安装包下载
安装gcc, 下载
[root@localhost jlch]# rpm -ivh gcc-4.8.5-16.el7_4.1.x86_64.rpm warning: gcc-4.8.5-16.el7_4.1.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY error: Failed dependencies: cpp = 4.8.5-16.el7_4.1 is needed by gcc-4.8.5-16.el7_4.1.x86_64 glibc-devel &amp;gt;= 2.2.90-12 is needed by gcc-4.8.5-16.el7_4.1.x86_64 libgcc &amp;gt;= 4.8.5-16.el7_4.1 is needed by gcc-4.8.5-16.el7_4.1.x86_64 libgomp = 4.8.5-16.el7_4.1 is needed by gcc-4.8.5-16.el7_4.1.x86_64 libmpc.so.3()(64bit) is needed by gcc-4.8.5-16.el7_4.1.x86_64 libmpfr.so.4()(64bit) is needed by gcc-4.8.5-16.el7_4.1.x86_64 [root@localhost jlch]#  所有的下载地址如下:
http://mirror.centos.org/centos/7/os/x86_64/Packages/libgcc-4.8.5-16.el7.x86_64.rpm http://mirror.centos.org/centos/7/os/x86_64/Packages/gcc-4.8.5-16.el7.x86_64.rpm http://mirror.centos.org/centos/7/os/x86_64/Packages/cpp-4.8.5-16.el7.x86_64.rpm http://mirror.centos.org/centos/7/os/x86_64/Packages/glibc-devel-2.17-196.el7.x86_64.rpm http://mirror.centos.org/centos/7/os/x86_64/Packages/libgomp-4.8.5-16.el7.x86_64.rpm http://mirror.</description>
    </item>
    
    <item>
      <title>Mysql Install 2 Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-install-2-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 15:26:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-install-2-base-centos.html</guid>
      <description>主要参考： http://blog.csdn.net/renfufei/article/details/17616549
过程 说明: 首先必须能链接外网. 如果不能直接访问,那也可以设置代理,请参考: 在内网机器上设置yum代理 使用 yum 的权限要求是 root 用户,如果你不是,那么可以需要 在 shell命令之前加上 sudo, 或者 su root 切换到 super 管理员进行操作. 并可能需要输入密码.
1. 添加 yum 数据源  安装mariadb10.1 官方的通过yum安装教程
根据不同的系统来下载repo吧，更多的MariaDB.repo
 建议命名为 MariaDB.repo 类似的名字：
cd /etc/yum.repos.d/ vim /etc/yum.repos.d/MariaDB.repo  然后,写入文件内容:(建议使用 10.0)
# MariaDB 10.0 CentOS repository list - created 2015-08-12 10:59 UTC # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1  该文件的内容是参考官网,并从官网上生成的，设置安装源仓库的 具体的地址为: https://downloads.mariadb.org/mariadb/repositories/ 选择好操作系统版本之后既可以查看，其他操作系统的安装源也可以在此处查看并设置。 如果服务器不支持https协议，或者gpgkey 保错，确保没问题的话，可以将 gpgcheck=1 修改为 gpgcheck=0,则不进行校验.</description>
    </item>
    
    <item>
      <title>Mysql Length</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-length.html</link>
      <pubDate>Fri, 02 Mar 2018 15:14:11 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-length.html</guid>
      <description>转载自: http://yishouce.com/mysql/func/length
一句话说明: 获取字符串长度的mysql内置函数
length是mysql的一个用来来获取字符串长度的内置函数方法, 同样的获取字符串长度的还有char_length. length: 是计算字段的长度, utf8编码下,一个汉字是算三个字符,一个数字或字母算一个字符。其他编码下,一个汉字算两个字符, 一个数字或字母算一个字符。
例子1: 查看mysql字符串的长度
SELECT LENGTH(&amp;quot;要查看长度的mysql字段/mysql字符串&amp;quot;);  例子2: 根据记录的某个字段长度排序
SELECT * FROM table WHERE 1 ORDER BY LENGTH(name) ASC;  相关: char_length:在任何编码下, 不管汉字还是数字或者是字母都算是一个字符. CHARACTER_LENGTH(str) CHARACTER_LENGTH()是CHAR_LENGTH()的同义词。 BIT_LENGTH(str) 返回2进制长度.</description>
    </item>
    
    <item>
      <title>Hexo Tomtsang</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hexo/hexo-tomtsang.html</link>
      <pubDate>Fri, 02 Mar 2018 15:11:32 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hexo/hexo-tomtsang.html</guid>
      <description>hexo tomtsang&amp;rsquo;s blogs
--- layout: photo title: tomtsang53535ere date: 2016-11-01 16:38:42 tags: description: 你对本页的描述 photos: - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg --- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).  Quick Start Create a new post $ hexo new &amp;quot;My New Post&amp;quot;  More info: Writing</description>
    </item>
    
    <item>
      <title>Nodejs Npm Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/nodejs-npm.html</link>
      <pubDate>Fri, 02 Mar 2018 15:09:41 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/nodejs-npm.html</guid>
      <description>nodejs系列之npm的常用命令
ref  http://www.jb51.net/article/52409.htm  要点 分享几个npm的常用命令
npm -v #显示版本，检查npm 是否正确安装。
npm install express #安装express模块
npm install -g express #全局安装express模块
npm list #列出已安装模块
npm show express #显示模块详情
npm update #升级当前目录下的项目的所有模块
npm update express #升级当前目录下的项目的指定模块
npm update -g express #升级全局安装的express模块
npm uninstall express #删除指定的模块</description>
    </item>
    
    <item>
      <title>Nodejs Version</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-version.html</link>
      <pubDate>Fri, 02 Mar 2018 15:08:46 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-version.html</guid>
      <description>nodejs系列之使用n管理nodejs版本
ref  http://blog.csdn.net/jiangbo_phd/article/details/51476155  主要点 npm -g XXX :安装的XXX软件，在linux下的目录 /usr/lib/node_modules/
sudo n :切换node版本
n 切换之后的 node 默认装在 /usr/local/bin/node，你最好用 which node 检查一下当前使用的 node 是否是这个路径下的。
问题  如果安装过程中因为某原因（主要是网络原因），未安装成功，则删除对应的目录，重新安装就可以了。
tom@adata:~/Projects/OpenX/lib$ sudo n latest [sudo] password for tom:
 install : node-v7.2.0 mkdir : /usr/local/n/versions/node/7.2.0 fetch : https://nodejs.org/dist/v7.2.0/node-v7.2.0-linux-x64.tar.gz  ###################################################### 75.1% curl: (56) GnuTLS recv error (-54): Error in the pull function.
gzip: stdin: unexpected end of file tar: Unexpected EOF in archive tar: Unexpected EOF in archive tar: Error is not recoverable: exiting now cp: cannot stat &amp;lsquo;/usr/local/n/versions/node/7.</description>
    </item>
    
    <item>
      <title>Nodejs Mongodb</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-mongodb.html</link>
      <pubDate>Fri, 02 Mar 2018 15:07:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-mongodb.html</guid>
      <description>nodejs系列之mongodb
var mongodb = require(&amp;quot;mongodb&amp;quot;);  这个 mongodb 包的API文档：
http://mongodb.github.io/node-mongodb-native/2.2/api/index.html</description>
    </item>
    
    <item>
      <title>Nodejs Npm Faq 1</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-npm-faq-1.html</link>
      <pubDate>Fri, 02 Mar 2018 15:06:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-npm-faq-1.html</guid>
      <description>nodejs系列之npm报错
报错 报错1，permission denied, open &#39;/usr/local/lib/node_modules/npm/lib/ tom@adata:~/in/ttt$ npm i npm ERR! Linux 4.4.0-47-generic npm ERR! argv &amp;quot;/usr/local/bin/node&amp;quot; &amp;quot;/usr/local/bin/npm&amp;quot; &amp;quot;i&amp;quot; npm ERR! node v6.9.1 npm ERR! npm v3.10.8 npm ERR! path /usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js npm ERR! code EACCES npm ERR! errno -13 npm ERR! syscall open npm ERR! Error: EACCES: permission denied, open &#39;/usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js&#39; npm ERR! at Error (native) npm ERR! at Object.fs.openSync (fs.js:640:18) npm ERR! at Object.fs.readFileSync (fs.js:508:33) npm ERR! at Object.</description>
    </item>
    
    <item>
      <title>Nodejs Tofixed</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-tofixed.html</link>
      <pubDate>Fri, 02 Mar 2018 15:05:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-tofixed.html</guid>
      <description>nodejs系列之toFixed
在遇到，4147.8015这样的浮点数时的，toFixed()的替代方案。
通过下面这一段，应该知道，这里的toFixed2 中的 “9”（是可以设置成限定的位数的准确度的，不应该设置成“2”，“2”太小了，是有问题的，所以设置成大数“9”）。
tom@adata:~/m6s/nodejs/module/toFixed$ node &amp;gt; var aux = Math.pow(0.1, 1 + 2) undefined &amp;gt; var number = 14.44999 undefined &amp;gt; number + aux 14.45099 &amp;gt; (number + aux).toFixed(1) &#39;14.5&#39;  下面，直接上代码吧。共2个js文件。写法不同，意思相同。
toFixedTest1.js
module.exports.MathHelper = MathHelper; var MathHelper = (function() { this.round = function(number, numberOfDecimals) { var aux = Math.pow(10, numberOfDecimals); return Math.round(number * aux) / aux; }; this.floor = function(number, numberOfDecimals) { var aux = Math.pow(10, numberOfDecimals); return Math.</description>
    </item>
    
    <item>
      <title>Nginx Faq 2</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-2.html</link>
      <pubDate>Fri, 02 Mar 2018 15:04:12 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-2.html</guid>
      <description> nginx txt,json文件 中文乱码
nginx 中 txt,json文件 中文乱码 在 /etc/nginx/conf.d/default.conf 中找到 location / { ,然后加入
charset utf-8; charset_types text/html  如：
server { listen 8000; server_name localhost; #default_type &#39;text/html&#39;; #charset utf-8; #charset koi8-r; #access_log /var/log/nginx/log/host.access.log main; location / { charset utf-8; charset_types text/html application/json; add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;  </description>
    </item>
    
    <item>
      <title>Nginx Faq 1</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-1.html</link>
      <pubDate>Fri, 02 Mar 2018 15:03:32 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-faq-1.html</guid>
      <description>nginx 跨域访问
 nginx 解决跨域访问的问题 跨域造成session丢失  nginx 解决跨域访问的问题。 https://michielkalkman.com/snippets/nginx-cors-open-configuration.html
http://enable-cors.org/server_nginx.html
 所有网页都实现跨域  把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中的 location / { 内
add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;   部分url（下以 /ok 为例） 请求实现跨域访问  把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中 的 location /ok { 内
# # Wide-open CORS config for nginx # location / { if ($request_method = &#39;OPTIONS&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; # # Om nom nom cookies # add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; # # Custom headers and headers various browsers *should* be OK with but aren&#39;t # add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; # # Tell client that this pre-flight info is valid for 20 days # add_header &#39;Access-Control-Max-Age&#39; 1728000; add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;; add_header &#39;Content-Length&#39; 0; return 204; } if ($request_method = &#39;POST&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; } if ($request_method = &#39;GET&#39;) { add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;; add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;; } }  跨域造成session丢失 https://segmentfault.</description>
    </item>
    
    <item>
      <title>Mysql Mysqlslap</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-mysqlslap.html</link>
      <pubDate>Fri, 02 Mar 2018 12:51:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-mysqlslap.html</guid>
      <description>mysqlslap模拟并发测试数据库性能
安装：简单，装了mysql就有了
作用：模拟并发测试数据库性能。
reference 参考网址
命令主要参数, 示例与解析 示例:
mysqlslap -h10.10.15.240 -P3306 --concurrency=10 --iterations=1 --create-schema=&#39;stock&#39; --query=\&#39;&amp;quot;$line&amp;quot;\&#39; --number-of-queries=100000 --debug-info -udeveloper01 -pdeveloper01
解析:
mysqlslap 程序名 -h10.10.15.240 mysql IP地址 -P3306 端口 --concurrency=10 并发数 --iterations=1 迭代数, 多次迭代使得数据有统计意义 --create-schema=&#39;stock&#39; 数据库名 --query=\&#39;&amp;quot;$line&amp;quot;\&#39; 要测试的sql语句, 因为sql语句, 很可能含有 `select * `, 所以这里必须使用 \&#39;&amp;quot; 和 &amp;quot;\&#39; 把 sql 语句包起来 --number-of-queries=100000 总query数 --debug-info -udeveloper01 用户名 -pdeveloper01 密码  结果, 示例及解析 示例:
User time 3.81, System time 2.55 Maximum resident set size 3620, Integral resident set size 0 Non-physical pagefaults 1116, Physical pagefaults 0, Swaps 0 Blocks in 0 out 0, Messages in 0 out 0, Signals 0 Voluntary context switches 100269, Involuntary context switches 19 Benchmark Average number of seconds to run all queries: 5.</description>
    </item>
    
    <item>
      <title>Mysql随机获取一条或者多条数据</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-random-get-one-or-multi-records.html</link>
      <pubDate>Fri, 02 Mar 2018 12:51:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-random-get-one-or-multi-records.html</guid>
      <description>https://www.cnblogs.com/leezhxing/p/3951801.html
select id, name, image from device_rent_manage where functionType = &#39;JCSB&#39; and type = &#39;YNSBXLJC&#39; and id &amp;gt;= ((SELECT MAX(id) FROM device_rent_manage where functionType = &#39;JCSB&#39; and type = &#39;YNSBXLJC&#39;)-(SELECT MIN(id) FROM device_rent_manage where functionType = &#39;JCSB&#39; and type = &#39;YNSBXLJC&#39;)) * RAND() + (SELECT MIN(id) FROM device_rent_manage where functionType = &#39;JCSB&#39; and type = &#39;YNSBXLJC&#39; ) LIMIT 3;  </description>
    </item>
    
    <item>
      <title>Mariadb Galera From Docker to Bare</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-from-docker-to-bare.html</link>
      <pubDate>Fri, 02 Mar 2018 12:49:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-from-docker-to-bare.html</guid>
      <description>mysql系列之 从 docker+Galera 转到 Galera(去除 docker)
context 之前在 docker之docker-mariadb-galera(panubo版) 中成功在 docker 中安装了 Galera, 突然, 由于业务调整, 需要把 Galera 从docker中脱离出来, 直接在 裸机 上跑..
node0, 10.10.13.110, primary node1, 10.10.15.240 node2, 10.10.12.13(这一台暂时没用上)
step  [在node0, node1, node2上]把 Galera 从 docker 中删除
docker stop abcd
 [node0上]然后, 我尝试重新启动 MariaDB-Galera-cluster, 怎么重启, 那自然是参考 mysql系列之集群 MariaDB Galera Cluster 部署
  来到 node0上,
sudo /etc/init.d/mysql status sudo /etc/init.d/mysql start --wsrep-new-cluster  发现, 直接报错了..
[tom@mariadb-node-0 ~]$ sudo /etc/init.d/mysql start --wsrep-new-cluster Starting MySQL.</description>
    </item>
    
    <item>
      <title>Mysql User</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-user.html</link>
      <pubDate>Fri, 02 Mar 2018 12:47:29 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-user.html</guid>
      <description>mysql系列之MySQL查看用户权限
reference http://www.oschina.net/code/snippet_222150_12541
##
show grants for 你的用户; show grants for root@&amp;lsquo;localhost&amp;rsquo;; show grants for webgametest@10.3.18.158; show create database dbname; 这个可以看到创建数据库时用到的一些参数。 show create table tickets; 可以看到创建表时用到的一些参数</description>
    </item>
    
    <item>
      <title>Mysql Navicat</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-navicat.html</link>
      <pubDate>Fri, 02 Mar 2018 12:46:45 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-navicat.html</guid>
      <description>mysql系列之navicat
reference http://blog.csdn.net/lwei_998/article/details/45560483
http://blog.csdn.net/moneyshi/article/details/50906650
http://mt.sohu.com/20160324/n441844650.shtml
导出连接设置 Navicat 版本 8 1.选择文件 -&amp;gt; 导出登录数据文件。导出的文件（.reg）包含你的全部连接设置。 2.备份已导出的文件（.reg）。 3.在现有的计算机解除安装 Navicat。 4.在新的计算机重新安装 Navicat。 5.在新的计算机运行已导出的文件（.reg）。
Navicat 版本 9 或以上 1.在 Navicat，选择文件 -&amp;gt; 导出连接。导出的文件（.ncx）包含你的全部连接设置。 2.备份已导出的文件（.ncx）。 3.在现有的计算机解除安装 Navicat。** 4.在新的计算机重新安装 Navicat。 5.在新的计算机打开 Navicat 和选择文件 -&amp;gt; 导入连接。
** 如果你使用版本 11 或以上，请在解除安装 Navicat 前取消激活注册码。
当创建一个新的连接，Navicat 将创建一个子文件夾（名为各数据库的名）在设置保存路径內。所有备份（.psc、.psb）、报表（.rtm）、查询（.sql）、导入/导出设置文件等都是保存在该子文件夾。要查找路径，你可以右击连接，然后选择连接属性 -&amp;gt; 高级 -&amp;gt; 设置保存路径/设置位置。
此外，全部已保存的设置文件（批处理作业设置文件）会保存在 profiles 文件夾。要查找路径，选择工具 -&amp;gt; 选项 -&amp;gt; 其他 -&amp;gt; 设置文件保存路径/设置文件位置。
异常收集之：navicatdesignquery.sql.bak 系统找不到指定路径 今天使用Navicat ，其他功能都正常，但是新建查询的时候，出现一个很奇葩的问题
C:\Program Files (x86)\PremiumSoft\Navicat for MySQL8.1/_NAVICAT_DESIGNQUERY.sql.bak 系统找不到指定路径
找了半天找不到解决办法，下载navicat 11都没用， 更改版本也没用。</description>
    </item>
    
    <item>
      <title>Mariadb Cluster Install Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-cluster-install-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 12:45:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-cluster-install-base-centos.html</guid>
      <description>mysql系列之mysql-cluster
主要参考 http://mariadb.org/
环境  centos7-amd64 mariadb10.1（IP:10.10.13.110） + mariadb5.5(IP:192.168.31.240)  步骤 准备2台机器 安装mariadb10.1
参考这里
把 mariadb5.5 的数据，导出后，导入到 mariadb10.1 导出 导入 mysql主从复制 第一步，就要看这几个参考 依次看 http://blog.csdn.net/gaowenhui2008/article/details/46698321 http://blog.csdn.net/hguisu/article/details/7325124 http://blog.jobbole.com/94595/ http://www.xuejiehome.com/blread-1664.html MYSQL主从同步的管理 参考 http://blog.csdn.net/gaowenhui2008/article/details/46698321 1. 停止MYSQL同步 1. 停止MYSQL同步 STOP SLAVE IO_THREAD; #停止IO进程 STOP SLAVE SQL_THREAD; #停止SQL进程 STOP SLAVE; #停止IO和SQL进程 2. 启动MYSQL同步 START SLAVE IO_THREAD; #启动IO进程 START SLAVE SQL_THREAD; #启动SQL进程 START SLAVE; #启动IO和SQL进程 3. 重置MYSQL同步 RESET SLAVE; 用于让从属服务器忘记其在主服务器的二进制日志中的复制位置, 它会删除master.info和relay-log.info文件，以及所有的中继日志，并启动一个新的中继日志,当你不需要主从的时候可以在从上执行这个操作。不然以后还会同步，可能会覆盖掉你的数据库，我以前就遇到过这样傻叉的事情。哈哈！ 4. 查看MYSQL同步状态 SHOW SLAVE STATUS; 这个命令主要查看Slave_IO_Running、Slave_SQL_Running、Seconds_Behind_Master、Last_IO_Error、Last_SQL_Error这些值来把握复制的状态。 5.</description>
    </item>
    
    <item>
      <title>Mariadb Galera Cluster Install Faq Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-cluster-install-faq-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 12:44:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-cluster-install-faq-base-centos.html</guid>
      <description>mysql系列之集群 MariaDB-Galera-cluster 报错
报错1, /etc/my.cnf.d/下 有一个 不应该存在的 .cnf 错误原因：
mysql 加载了 /etc/my.cnf.d/下的所有 *.cnf 文件，其中又有一个之前的不应该存在的 *.cnf。
正确情况下，应该只有4个.cnf文件。 [spa@s11 ~]$ ls /etc/my.cnf.d/ client.cnf mysql-clients.cnf server.cnf tokudb.cnf [spa@s11 ~]$
错误情况：
[tom@kube-node-13 ~]$ sudo /etc/init.d/mysql start --wsrep-new-cluster Starting MySQL.161116 17:44:54 mysqld_safe Logging to &#39;/data/mariadb/mysql/kube-node-13.err&#39;. . SUCCESS! [tom@kube-node-13 ~]$ mysql -u root -p -e &amp;quot;show status like &#39;wsrep%&#39;&amp;quot; Enter password: +--------------------------+----------------------+ | Variable_name | Value | +--------------------------+----------------------+ | wsrep_cluster_conf_id | 18446744073709551615 | | wsrep_cluster_size | 0 | | wsrep_cluster_state_uuid | | | wsrep_cluster_status | Disconnected | | wsrep_connected | OFF | | wsrep_local_bf_aborts | 0 | | wsrep_local_index | 18446744073709551615 | | wsrep_provider_name | | | wsrep_provider_vendor | | | wsrep_provider_version | | | wsrep_ready | ON | | wsrep_thread_count | 0 | +--------------------------+----------------------+ [tom@kube-node-13 ~]$  解决过程：</description>
    </item>
    
    <item>
      <title>Mariadb Galera Cluster Install Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-cluster-install-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 12:43:16 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-cluster-install-base-centos.html</guid>
      <description>mysql系列之集群 MariaDB Galera Cluster 部署
参考 How To Setup MariaDB Galera Cluster 10.0 On CentOS http://www.unixmen.com/setup-mariadb-galera-cluster-10-0-centos/
安装 过程 MariaDB is a relational database management system (RDBMS) and MariaDB Galera Cluster is a synchronous multi-master cluster for MariaDB. It is available on Linux only, and only supports the XtraDB/InnoDB storage engines. This article explains how to setup MariaDB Galera Cluster 10.0 with 3 nodes running on CentOS 6.5(tom注：在CentOS 7.0上也成功) x86_64 resulting in a HA (high-availability) database cluster.</description>
    </item>
    
    <item>
      <title>Mysql Use</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-use.html</link>
      <pubDate>Fri, 02 Mar 2018 12:41:58 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-use.html</guid>
      <description> mysql系列之mysql使用规范
mysql使用规范
级别说明 所有级别：
 级别1，必须做到 级别2，优先做到  级别：1
 库名，表名，字段名：使用小写 字符：utf8 表：不使用删除表（drop），而使用清空表（truncate，或者delete from） 表：记录数超过10000的情况下，加索引  级别：2
 库名，表名，字段名：使用下划线分割。如：day_stocka_wind 表：加主键 清空表：优先使用truncate（命令：truncate table tbl_name;），其次使用delete from(命令：delete from tbl_name;）  关于删除表 删除表：使用DROP TABLE tbl_name;， 或者DROP TABLE IF EXISTS tbl_name;
若有业务确实需要删除表的，请联系小鱼。
end </description>
    </item>
    
    <item>
      <title>Mysql Secure Installation</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-secure-installation.html</link>
      <pubDate>Fri, 02 Mar 2018 12:41:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-secure-installation.html</guid>
      <description>mysql系列之mysql_secure_installation
参考 http://www.myexception.cn/mysql/1902013.html
过程 安装完mysql-server 会提示可以运行mysql_secure_installation。 运行mysql_secure_installation会执行几个设置： a)为root用户设置密码 b)删除匿名账号 c)取消root用户远程登录 d)删除test库和对test库的访问权限 e)刷新授权表使修改生效 通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation，详细步骤请参看下面的命令:
[root@dns ~]# mysql_secure_installation /usr/bin/mysql_secure_installation:行379: find_mysql_client: 未找到命令 NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we&#39;ll need the current password for the root user. If you&#39;ve just installed MariaDB, and you haven&#39;t set the root password yet, the password will be blank, so you should just press enter here.</description>
    </item>
    
    <item>
      <title>Mariadb Cluster Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-cluster-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 12:15:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-cluster-base-centos.html</guid>
      <description>mysql-cluster
主要参考 http://mariadb.org/
环境  centos7-amd64 mariadb10.1（IP:10.10.13.110） + mariadb5.5(IP:192.168.31.240)  步骤 准备2台机器 安装mariadb10.1
参考这里
把 mariadb5.5 的数据，导出后，导入到 mariadb10.1 导出 导入 mysql主从复制 第一步，就要看这几个参考 依次看 http://blog.csdn.net/gaowenhui2008/article/details/46698321 http://blog.csdn.net/hguisu/article/details/7325124 http://blog.jobbole.com/94595/ http://www.xuejiehome.com/blread-1664.html MYSQL主从同步的管理 参考 http://blog.csdn.net/gaowenhui2008/article/details/46698321 1. 停止MYSQL同步 1. 停止MYSQL同步 STOP SLAVE IO_THREAD; #停止IO进程 STOP SLAVE SQL_THREAD; #停止SQL进程 STOP SLAVE; #停止IO和SQL进程 2. 启动MYSQL同步 START SLAVE IO_THREAD; #启动IO进程 START SLAVE SQL_THREAD; #启动SQL进程 START SLAVE; #启动IO和SQL进程 3. 重置MYSQL同步 RESET SLAVE; 用于让从属服务器忘记其在主服务器的二进制日志中的复制位置, 它会删除master.info和relay-log.info文件，以及所有的中继日志，并启动一个新的中继日志,当你不需要主从的时候可以在从上执行这个操作。不然以后还会同步，可能会覆盖掉你的数据库，我以前就遇到过这样傻叉的事情。哈哈！ 4. 查看MYSQL同步状态 SHOW SLAVE STATUS; 这个命令主要查看Slave_IO_Running、Slave_SQL_Running、Seconds_Behind_Master、Last_IO_Error、Last_SQL_Error这些值来把握复制的状态。 5.</description>
    </item>
    
    <item>
      <title>Mariadb Cluster Infile Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-cluster-infile-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 12:15:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-cluster-infile-base-centos.html</guid>
      <description>mysql-cluster
主要参考 http://mariadb.org/
环境  centos7-amd64 mariadb10.1（IP:10.10.13.110） + mariadb5.5(IP:192.168.31.240)  步骤 准备2台机器 安装mariadb10.1
参考这里
把 mariadb5.5 的数据，导出后，导入到 mariadb10.1 导出 导入 mysql主从复制 第一步，就要看这几个参考 依次看 http://blog.csdn.net/gaowenhui2008/article/details/46698321 http://blog.csdn.net/hguisu/article/details/7325124 http://blog.jobbole.com/94595/ http://www.xuejiehome.com/blread-1664.html MYSQL主从同步的管理 参考 http://blog.csdn.net/gaowenhui2008/article/details/46698321 1. 停止MYSQL同步 1. 停止MYSQL同步 STOP SLAVE IO_THREAD; #停止IO进程 STOP SLAVE SQL_THREAD; #停止SQL进程 STOP SLAVE; #停止IO和SQL进程 2. 启动MYSQL同步 START SLAVE IO_THREAD; #启动IO进程 START SLAVE SQL_THREAD; #启动SQL进程 START SLAVE; #启动IO和SQL进程 3. 重置MYSQL同步 RESET SLAVE; 用于让从属服务器忘记其在主服务器的二进制日志中的复制位置, 它会删除master.info和relay-log.info文件，以及所有的中继日志，并启动一个新的中继日志,当你不需要主从的时候可以在从上执行这个操作。不然以后还会同步，可能会覆盖掉你的数据库，我以前就遇到过这样傻叉的事情。哈哈！ 4. 查看MYSQL同步状态 SHOW SLAVE STATUS; 这个命令主要查看Slave_IO_Running、Slave_SQL_Running、Seconds_Behind_Master、Last_IO_Error、Last_SQL_Error这些值来把握复制的状态。 5.</description>
    </item>
    
    <item>
      <title>java源码找到mysql用户密码</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/find-mysql-password-with-java-source-code.html</link>
      <pubDate>Fri, 02 Mar 2018 12:15:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/find-mysql-password-with-java-source-code.html</guid>
      <description>在有java源码的情况下，找到mysql用户密码
进入项目查找 mysql ip 字符串 lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$ grep &amp;quot;aliyuncs&amp;quot; -rn ./bin/ lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$ grep &amp;quot;aliyuncs&amp;quot; -rn ./conf/ lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$ grep &amp;quot;aliyuncs&amp;quot; -rn ./lib/ lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$ grep &amp;quot;aliyuncs&amp;quot; -rn ./webapps/ ./webapps/lcnxdata/WEB-INF/classes/applicationContext.xml:30: &amp;lt;value&amp;gt;jdbc:mysql://rm-wz95k1f761xu890f3.mysql.rds.aliyuncs.com:3306/lcnx&amp;lt;/value&amp;gt; lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$ cat ./webapps/lcnxdata/WEB-INF/classes/applicationContext.xml &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.logicalcobwebs.proxool.ProxoolDataSource&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;driver&amp;quot;&amp;gt; &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;driverUrl&amp;quot;&amp;gt; &amp;lt;!-- &amp;lt;value&amp;gt;jdbc:mysql://192.168.0.188:3306/nemmp&amp;lt;/value&amp;gt; --&amp;gt; &amp;lt;value&amp;gt;jdbc:mysql://rm-wz95k1f761xu890f3.mysql.rds.aliyuncs.com:3306/lcnx&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;user&amp;quot; value=&amp;quot;*********&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;**********&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;alias&amp;quot; value=&amp;quot;*********&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;prototypeCount&amp;quot; value=&amp;quot;150&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;maximumConnectionCount&amp;quot; value=&amp;quot;1100&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;minimumConnectionCount&amp;quot; value=&amp;quot;300&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;simultaneousBuildThrottle&amp;quot; value=&amp;quot;300&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;houseKeepingTestSql&amp;quot; value=&amp;quot;select CURRENT_DATE&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;trace&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;/bean&amp;gt; lcnx@iZwz95dxhc92qtibd4f399Z:~/server/tomcat-data$  确认mysql可通后，用帐号密码连接就可以了。</description>
    </item>
    
    <item>
      <title>Mariadb Galera Install Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-install-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 11:56:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-install-base-centos.html</guid>
      <description>mysql系列之集群 MariaDB-Galera-server 安装
MariaDB Galera Cluster 部署
参考 http://www.linuxidc.com/Linux/2015-07/119512.htm
安装 安装mariadb10.0  官方的通过yum安装教程
根据不同的系统来下载repo吧，更多的MariaDB.repo
 或者，查看之前的 mariadb安装教程，就可以了。
具体，我的是这样的。 1. MariaDB.repo
[cdn@test_240 yum.repos.d]$ cat /etc/yum.repos.d/MariaDB.repo # MariaDB 10.0 CentOS repository list - created 2016-11-16 02:27 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1  2. 安装数据库 sudo yum clean all sudo yum install MariaDB-Galera-server MariaDB-client galera -y  卸载 sudo yum remove MariaDB-server MariaDB-client sudo yum remove MariaDB-common -y</description>
    </item>
    
    <item>
      <title>Mariadb Install Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-install-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 11:55:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-install-base-centos.html</guid>
      <description>mysql-0mysql系列之mariadb-install
ref  http://blog.csdn.net/renfufei/article/details/17616549  过程 说明: 首先必须能链接外网. 如果不能直接访问,那也可以设置代理,请参考: 在内网机器上设置yum代理 使用 yum 的权限要求是 root 用户,如果你不是,那么可以需要 在 shell命令之前加上 sudo, 或者 su root 切换到 super 管理员进行操作. 并可能需要输入密码.
1. 添加 yum 数据源  安装mariadb10.1 官方的通过yum安装教程
根据不同的系统来下载repo吧，更多的MariaDB.repo
 建议命名为 MariaDB.repo 类似的名字：
cd /etc/yum.repos.d/ vim /etc/yum.repos.d/MariaDB.repo  然后,写入文件内容:(建议使用 10.0)
# MariaDB 10.0 CentOS repository list - created 2015-08-12 10:59 UTC # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1  这个baseurl可以通过浏览器打开，然后在 http://yum.mariadb.org/10.0/centos7-amd64/rpms/ 中 可以看到这里面有些什么 .</description>
    </item>
    
    <item>
      <title>Mariadb Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-install.html</link>
      <pubDate>Fri, 02 Mar 2018 11:54:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-install.html</guid>
      <description> mariadb install </description>
    </item>
    
    <item>
      <title>Mongodb Update</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-update.html</link>
      <pubDate>Fri, 02 Mar 2018 11:52:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-update.html</guid>
      <description>mongodb系列之update
只要是批量，后头加 {multi: true} 吧。
批量，新增一个k-v db.Signals_Day.update({TrdDt:20161129}, {$set: {&amp;ldquo;Real&amp;rdquo;: true}}, {multi: true})
testrs:PRIMARY&amp;gt; db.Signals_Day.update({TrdDt:20161129}, {$set: {&amp;quot;Real&amp;quot;: true}}, {multi: true}) WriteResult({ &amp;quot;nMatched&amp;quot; : 8935, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 8933 }) testrs:PRIMARY&amp;gt; db.Signals_Day.find({TrdDt:20161129}) { &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;583d27735868c24cb078e925&amp;quot;), &amp;quot;Type&amp;quot; : &amp;quot;NewHighLow&amp;quot;, &amp;quot;Sign&amp;quot; : -1, &amp;quot;ID&amp;quot; : &amp;quot;000785.SZ&amp;quot;, &amp;quot;TrdDt&amp;quot; : 20161129, &amp;quot;TrdTm&amp;quot; : 1500, &amp;quot;PrevClsPx&amp;quot; : 14.99, &amp;quot;LastPx&amp;quot; : 14.4, &amp;quot;Real&amp;quot; : true } { &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;583d27735868c24cb078e92a&amp;quot;), &amp;quot;Type&amp;quot; : &amp;quot;RSI&amp;quot;, &amp;quot;Sign&amp;quot; : -1, &amp;quot;ID&amp;quot; : &amp;quot;002117.</description>
    </item>
    
    <item>
      <title>Mongodb Distinct</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-distinct.html</link>
      <pubDate>Fri, 02 Mar 2018 11:51:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-distinct.html</guid>
      <description>mongodb系列之distinct
reference https://docs.mongodb.com/manual/reference/method/db.collection.distinct/
http://www.jb51.net/article/65929.htm
destinct  MongoDB的destinct命令是获取特定字段中不同值列表。该命令适用于普通字段，数组字段和数组内嵌文档.  mongodb的distinct的语句： db.users.distinct(&amp;lsquo;last_name&amp;rsquo;）;
等同于 SQL 语句: select DISTINCT last_name from users;
表示的是根据指定的字段返回不同的记录集。
 如果，有相关的查询，则放在后面。
testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;LastPx&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161101, &amp;ldquo;ID&amp;rdquo;: &amp;ldquo;600650.SH&amp;rdquo;}) [ 25.88, 25.89, 25.87, 25.86 ] testrs:PRIMARY&amp;gt;
示例  db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;).length 114 db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;)
 testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161102, &amp;ldquo;ID&amp;rdquo;: /^60.*SH/, &amp;ldquo;TrdTm&amp;rdquo;:1441}).length 1081 testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161101, &amp;ldquo;ID&amp;rdquo;: /^60.*SH/, &amp;ldquo;TrdTm&amp;rdquo;:1441}).length 1109 testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161103, &amp;ldquo;ID&amp;rdquo;: /^60.*SH/, &amp;ldquo;TrdTm&amp;rdquo;:1441}).length 1083 testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161031, &amp;ldquo;ID&amp;rdquo;: /^60.*SH/, &amp;ldquo;TrdTm&amp;rdquo;:1441}).length 1107 testrs:PRIMARY&amp;gt; db.KLine_1Min.distinct(&amp;ldquo;ID&amp;rdquo;, {&amp;ldquo;TrdDt&amp;rdquo;:20161025, &amp;ldquo;ID&amp;rdquo;: /^60.</description>
    </item>
    
    <item>
      <title>Mongodb Findoneandupdate</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-findoneandupdate.html</link>
      <pubDate>Fri, 02 Mar 2018 11:50:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-findoneandupdate.html</guid>
      <description>mongodb系列之findOneAndUpdate
参考 http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#findOneAndUpdate
https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndUpdate/
示例 修改键（字段）的值,修改了{b:2}
var MongoClient = require(&#39;mongodb&#39;).MongoClient; MongoClient.connect(&#39;mongodb://192.168.31.240:27017/test&#39;, function(err, db) { // Get the collection var col = db.collection(&#39;find_one_and_update&#39;); col.insertMany([{a:1, b:1}], {w:1}, function(err, r) { col.findOneAndUpdate({a:1} , {$set: {b:2}} , { upsert: true } , function(err, r) { db.close(); }); }); });  增加新的键，增加了{d:1}
var MongoClient = require(&#39;mongodb&#39;).MongoClient, test = require(&#39;assert&#39;); MongoClient.connect(&#39;mongodb://192.168.31.240:27017/test&#39;, function(err, db) { // Get the collection var col = db.collection(&#39;find_one_and_update&#39;); col.insertMany([{a:1, b:1}], {w:1}, function(err, r) { col.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/markdown.html</link>
      <pubDate>Fri, 02 Mar 2018 11:49:46 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/markdown.html</guid>
      <description> Markdown转HTML 在线版：
 在一起（这个网站还有很多其实转换工具） 带了样式，但是不能用于 表格
 作业部落 不带样式，但是可用于 表格
  HTML转Markdown 在线版：
 在线工具 （这个网站还有很多其实转换工具） *  Markdown 快速生成表格 </description>
    </item>
    
    <item>
      <title>Linux Port Process</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-port-process.html</link>
      <pubDate>Fri, 02 Mar 2018 11:47:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-port-process.html</guid>
      <description> linux系列之端口与进程
linux如何查看端口被哪个进程占用 使用netstat 和lsof命令，并用grep来过滤你需要查看的端口。 例如查看tcp有哪些端口打开了：
netstat -a| grep tcp  然后查看哪个进程占用了这些端口：
lsof -i  如果要查看某个端口，比如80端口是哪个进程：
lsof -i | grep :80  如果说，tom用户查到了一些端口号被占用，但是，用lsof却查不到。怎么办？ 则要考虑，是不是端口被root用户占用，没有权限。所以要再一次用sudo lsof来查一查。
示例 netstat -ant | grep 8060 ps -aux | grep node lsof -i:8060 man lsof lsof -i lsof -i -n lsof -iTCP sudo lsof -i  </description>
    </item>
    
    <item>
      <title>Centos Yum</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos-yum.html</link>
      <pubDate>Fri, 02 Mar 2018 11:46:46 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos-yum.html</guid>
      <description>centos系列之yum
yum安装的软件在哪? linux下如何查看某个软件 是否安装？安装路径在哪? linux下如何查看某个软件 是否安装？安装路径在哪
使用sudo rpm -qa来查看通过 yum安装的软件
[tom@kube-node-11 ~]$ sudo rpm -qa | grep Maria MariaDB-client-10.1.19-1.el7.centos.x86_64 MariaDB-common-10.1.19-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.28-1.el7.centos.x86_64 MariaDB-shared-10.1.19-1.el7.centos.x86_64  linux 通过 yum search 得到，在当前情况下，能安装哪些软件，哪些软件安装不了。 如下面 这个地方，显示 MariaDB-Galera-server 找不到。
[cdn@test_240 ~]$ sudo yum install MariaDB-Galera-server MariaDB-client galera -y Loaded plugins: fastestmirror, langpacks Loading mirror speeds from cached hostfile * base: mirrors.cn99.com * extras: mirrors.cn99.com * updates: mirrors.cn99.com No package MariaDB-Galera-server available. Package MariaDB-client-10.1.19-1.el7.centos.x86_64 already installed and latest version Package galera-25.</description>
    </item>
    
    <item>
      <title>Hexo Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/hexo.html</link>
      <pubDate>Fri, 02 Mar 2018 11:45:27 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/hexo.html</guid>
      <description> hexo系列之使用1
hexo下新建页面下如何放多个文章？ https://www.zhihu.com/question/33324071
hexo分类与tags配置 Hexo中如何给一篇文章加多个tags？ 下面2种方式：
 tags: [a,b,c] # 冒号后有一个空格 tags: - tag1 - tag2  可以做到自动增加哟。 tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql-21&amp;quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-21.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql&amp;quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-22.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql&amp;quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-23.md_  这样的话，方便形成系列的文章。每次就不用管是第几个mysql系列文章了。 不过系列文章，最好用的，还是 categories
可以用自定义的post: tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql&amp;quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-4.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql&amp;quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-5.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &amp;quot;mysql&amp;quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-1.md_  end </description>
    </item>
    
    <item>
      <title>Hexo Hello World</title>
      <link>https://eiuapp.github.io/eiuapp-learn/hexo/hexo-hello-world.html</link>
      <pubDate>Fri, 02 Mar 2018 11:44:17 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hexo/hexo-hello-world.html</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;quot;My New Post&amp;quot;  More info: Writing
Run server $ hexo server  More info: Server
Generate static files $ hexo generate  More info: Generating</description>
    </item>
    
    <item>
      <title>Git Workflow</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-workflow.html</link>
      <pubDate>Fri, 02 Mar 2018 11:42:26 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-workflow.html</guid>
      <description>gitlab系列之workflow
本文是 官方 workflow 的中文翻译
参考 https://docs.gitlab.com/ee/workflow/gitlab_flow.html
中文 介绍 使用git进行版本管理使得分支和合并比旧版本系统（如SVN）容易得多。 这允许多种分支策略和工作流程。 几乎所有这些都是对git之前使用的方法的改进。 但是许多组织最终没有明确定义，过于复杂或没有与问题跟踪系统（issue tracking systems）集成的，工作流。 因此，我们建议GitLab flow作为明确定义的一套最佳实践。 它结合了功能驱动开发和功能分支的问题跟踪。
来自其他版本控制系统的组织经常发现很难开发有效的工作流。 本文介绍“将git工作流与问题跟踪系统集成”的GitLab流程。 它提供了一个简单，透明和有效的方式使用git。
当转换到git时，你必须习惯于在与同事共享提交之前有三个步骤。 大多数版本控制系统只有一个步骤，从工作副本提交到共享服务器。 在git中，您可以将文件从工作副本添加到暂存区域。 之后，你提交他们到本地回购。 第三步是推送到共享远程存储库。 在习惯了这三个步骤之后，分支模型成为挑战。
因为许多组织，对于git是新认识，没有公约如何使用它，那么很快git变成一团糟。 他们遇到的最大的问题是，许多长期运行的分支，每个包含了一部分的变化。 人们很难确定他们应该开发或部署到生产的是哪个分支。 通常对这个问题的反应是采用标准化模式，例如git流和GitHub流。 我们认为仍有改进的余地，并将详细介绍一组我们称为GitLab流程的做法。
Git flow and its problems Git流是一个第一建议使用git分支的vcs，它得到了很多的关注。它主张一个主分支、一个单独开发分支以及支持特性功能开发，发布版本和修补程序的其它分支。开发发生在开发分支上，移动到发布分支，并最终合并到主分支。 Git流是有一个定义良好的标准，但它的复杂性引入了两个问题。第一个问题是开发人员必须使用develop分支而不是master，master是保留给用于发布生产版本的代码。这是一个约定，称默认分支为master，并主要从此master分支，合并到此master。由于大多数工具自动使master分支成为默认分支，并在默认情况下显示该分支，因此必须切换到另一个分支。git流的第二个问题是修补程序和发布分支引入的复杂性。这些分支对于一些组织来说可能是一个好主意，但对于绝大多数组织来说是过分了。现在大多数组织实施持续交付，这意味着可以部署您的默认master分支。这意味着要prevented修补程序和发布分支，包括它们引入的所有仪式（ceremony）。这个仪式的一个例子是合并发布分支。虽然存在专门的工具来解决这个问题，但它们需要文档并增加复杂性。开发人员经常犯错误，例如更改只会合并到master中，而不会合并到develop分支中。这些错误的根本原因是git流对于大多数用例来说太复杂了。并且发布并不自动意味着也做修补程序。
GitHub flow as a simpler alternative 在对git流的应对中，一个更简单的选择是，详细的GitHub流。 此流仅具有特征分支和master分支。 这是非常简单和干净，许多组织已经采用它与巨大的成功。 Atlassian推荐一个类似的策略，虽然他们rebase特征分支。 将所有内容合并到主分支并经常部署,意味着您最小化“库存”中的代码量，这符合精益和持续交付最佳实践。 但是这个流程仍然有许多关于部署，环境，发布和问题集成的问题。 使用GitLab流程，我们为这些问题提供额外的指导。
Production branch with GitLab flow GitHub流假设你能够在每次合并特性分支时都部署到生产环境。这对于SaaS应用程序是可能的，但在许多情况下，这是不可能的。一种情况是，你不能控制确切的发布时刻，例如需要通过App Store验证的iOS应用程序。另一个例子是，当您有部署窗口时间（工作日从上午10点到下午4点，当操作团队满员时），但您也可以在其他时间合并代码。在这些情况下，您可以创建一个反映部署代码的生产分支。您可以通过将master合并到生产（production）分支来部署新版本。如果你需要知道在生产分支中是什么代码，你可以只是checkout到生产分支看看。部署的大致时间，很容易显示为版本控制系统中的合并提交时间。如果您自动部署生产分支，这一时间是相当准确的。如果您需要更准确的时间，您可以让部署脚本在每个部署中创建一个tag。此流防止了，git流的发布，标记和合并的开销。
Environment branches with GitLab flow 建立一个自动更新到master分支的环境可能是个好主意。只有在这种情况下，此环境的名称可能与分支名称不同。假设您有一个暂存环境（staging environment），一个预生产环境和一个生产环境。在这种情况下，主分支将部署在暂存环境。当有人想要部署到预生产时，他们创建从主分支到预生产分支的合并请求。并且通过合并预生产分支到生产分支。此工作流只提交下游流确保一切都已在所有环境中测试过。如果您需要使用修补程序选择一个提交，通常在特性分支上进行开发，并将其与合并请求合并到master中，不要删除特性分支。如果master是好的（它应该是好的，如果你是连续交付的），然后将它合并到其他分支（也就是合并到预生产环境和生产环境）。如果这是不可能的（因为可能需要更多的手动测试），您可以将功能分支的合并请求发送到下游分支。 环境分支的一个“极端”版本，就是，正在为Teatro所做的，每个功能分支设置一个环境。
Release branches with GitLab flow 只有在需要将软件发布到外部世界的情况下，您才需要使用版本发布分支。在这种情况下，每个分支包含次要版本（2-3稳定版，2-4稳定版等）。稳定分支使用master作为起点，并尽可能晚地创建。通过尽可能晚的提交分支，您必须将错误修复应用到多个分支的时间最小化。在发布了一个发布分支后，只有严重的错误修复包括在发布分支中。如果可能的话，这些错误修复首先合并到master中，然后进入发布分支。这种方式下，你不能忘记cherry-picked他们进 master 和 遇到相同的bug的后续版本。这称为“上游第一”策略，也是由Google和Red Hat实施的。每次在发布分支中包括错误修复时，通过设置新标签来提高补丁版本（以符合语义版本控制）。一些项目也有一个稳定的分支，指向与最新发布的分支相同的提交。在这个流程中，有一个生产分支（或git flow master分支）是不常见的。</description>
    </item>
    
    <item>
      <title>Git Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/git.html</link>
      <pubDate>Fri, 02 Mar 2018 11:41:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/git.html</guid>
      <description> git reset &amp;ndash;hard commit_id Git允许我们在版本的历史之间穿梭，使用命令
git reset --hard commit_id  去除对　已添加的文件或文件夹　的跟踪 git rm -r --cached -- .idea/  这样呢，文件夹里 .idea/　的修改，git都不跟踪了。
git rm -r --cached -- node_modules/  git clone 指定分支 git clone -b test-v1 git@xxx:xxx.git  使用git stash命令保存和恢复进度 使用git stash命令保存和恢复进度
最近一次提交的 hash 短字符串, 如&amp;rdquo;de34928&amp;rdquo; git rev-parse --short HEAD  ref  git clone 指定分支操作  </description>
    </item>
    
    <item>
      <title>Gitlab Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-install.html</link>
      <pubDate>Fri, 02 Mar 2018 11:40:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-install.html</guid>
      <description>git系列之gitlab安装
env 阿里云 - IP: 120.25.204.216 - OS: centos7
step sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld  注意这个写法
sudo EXTERNAL_URL=&amp;quot;http://gitlab.example.com&amp;quot; yum install -y gitlab-ee  修改成 下面这种 方式, 但是, 这样下载会比较慢了
sudo EXTERNAL_URL=&amp;quot;http://120.25.204.216:7890&amp;quot; yum install -y gitlab-ee  我们用 清华镜像 吧
[root@jlch_web_001 ~]# wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.6.2-ce.0.el7.x86_64.rpm --2018-04-12 15:11:25-- https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.6.2-ce.0.el7.x86_64.rpm Resolving mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.8.193, 2402:f000:1:408:8100::1 Connecting to mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)|101.6.8.193|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 417757949 (398M) [application/x-redhat-package-manager] Saving to: ‘gitlab-ce-10.</description>
    </item>
    
    <item>
      <title>Git From Outside</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-from-outside.html</link>
      <pubDate>Fri, 02 Mar 2018 11:37:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-from-outside.html</guid>
      <description>从外部复制一个.git文件，如何使用
问题 有.git 文件　，直接使用，报错如下：
fatal: &#39;/srv/OpenX.git&#39; does not appear to be a git repository fatal: Could not read from remote repository.  现在有一个新来的.git文件, 如：OpenX.git
 放到本机的git仓库目录
[tom@check repositories]$ sudo cp -a OpenX.git/ /srv/  建立新的下传使用目录
[tom@check repositories]$ cd ../testgit/ [tom@check testgit]$ mkdir testgit2 [tom@check testgit]$ ls OpenXtest testgit2 [tom@check testgit]$ cd testgit2/ [tom@check testgit2]$ git init Initialized empty Git repository in /home/tom/in/testgit/testgit2/.git/  下传pull
 remote报错啦
[tom@check testgit2]$ git remote add checkgit git@192.</description>
    </item>
    
    <item>
      <title>Environment About It</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/environment-about-it.html</link>
      <pubDate>Fri, 02 Mar 2018 11:35:16 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/environment-about-it.html</guid>
      <description>生产环境、测试环境、开发环境、 https://my.oschina.net/sancuo/blog/214904
开发环境 production environment;
测试环境 testing environment;
开发环境 development environment;
开发环境：开发环境是程序猿们专门用于开发的服务器，配置可以比较随意， 为了开发调试方便，一般打开全部错误报告。 测试环境：一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产机上。 生产环境：是值正式提供对外服务的，一般会关掉错误报告，打开错误日志。  三个环境也可以说是系统开发的三个阶段：开发-&amp;gt;测试-&amp;gt;上线，其中生产环境也就是通常说的真实环境。</description>
    </item>
    
    <item>
      <title>Docker Registry Install For Jlch</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-install-for-jlch.html</link>
      <pubDate>Fri, 02 Mar 2018 11:30:46 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-install-for-jlch.html</guid>
      <description>docker之registry搭建(当然更建议使用Harbor)
reference  http://www.zimug.com/317.html?utm_source=tuicool&amp;amp;utm_medium=referral docker-registry  env docker版本大于1.6.0(docker -v)
机器3台: * registry server , IP: 192.168.31.240 * registry client a(docker push), IP: 10.10.12.18 * registry client b(docker pull), IP: 10.10.13.10
step 1. 创建registry server端 下载镜像
docker pull registry:2  生成自签名证书
cd ~/;mkdir registry &amp;amp;&amp;amp; cd registry &amp;amp;&amp;amp; mkdir certs &amp;amp;&amp;amp; cd certs;openssl req -x509 -days 3650 -subj &#39;/CN=reg.jlch.com/&#39; -nodes -newkey rsa:2048 -keyout registry.key -out registry.crt;  生成用户和密码
cd ~/registry&amp;amp;&amp;amp; mkdir auth;docker run --entrypoint htpasswd registry:2 -Bbn zimug zimug_password &amp;gt; auth/htpasswd;  用户：zimug 密码：zimug_password 可随便填写自己想填写的</description>
    </item>
    
    <item>
      <title>Mariadb Galera Panubo2 Base Docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-panubo2-base-docker.html</link>
      <pubDate>Fri, 02 Mar 2018 11:26:51 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-panubo2-base-docker.html</guid>
      <description>docker之docker-mariadb-galera(panubo版)(2017-02)
ref  https://github.com/panubo/docker-mariadb-galera  env  node0, 10.10.13.110, primary node1, 10.10.15.240 node2, 10.10.12.13(这一台暂时没用上)  step  拉取 (panubo版)git 代码, 取 image  三台机器, 各运行一下
mkdir ~/docker &amp;amp;&amp;amp; cd ~/docker &amp;amp;&amp;amp; git clone https://github.com/panubo/docker-mariadb-galera &amp;amp;&amp;amp; cd docker-mariadb-galera/ &amp;amp;&amp;amp; docker pull panubo/mariadb-galera   设置环境变量  在node0上:
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; EOF WSREP_NODE_ADDRESS=10.10.13.110 WSREP_CLUSTER_ADDRESS=gcomm://10.10.13.110:4567,10.10.12.13:4567,10.10.15.240:4567 WSREP_CLUSTER_NAME=my_wsrep_cluster WSREP_NODE_NAME=mariadb-node-0 EOF source ~/.bashrc  在node1上:
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; EOF WSREP_NODE_ADDRESS=10.10.15.240 WSREP_CLUSTER_ADDRESS=gcomm://10.10.13.110:4567,10.10.12.13:4567,10.10.15.240:4567 WSREP_CLUSTER_NAME=my_wsrep_cluster WSREP_NODE_NAME=mariadb-node-1 EOF source ~/.</description>
    </item>
    
    <item>
      <title>Vscode Extensions</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-extensions.html</link>
      <pubDate>Fri, 02 Mar 2018 11:22:22 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-extensions.html</guid>
      <description>用VS Code打造最佳Markdown编辑器</description>
    </item>
    
    <item>
      <title>Docker Registry Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-install.html</link>
      <pubDate>Fri, 02 Mar 2018 10:38:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-registry-install.html</guid>
      <description>docker之registry搭建(当然更建议使用Harbor)
reference  http://www.zimug.com/317.html?utm_source=tuicool&amp;amp;utm_medium=referral
 docker-registry
  env docker版本大于1.6.0(docker -v)
机器3台: * registry server , IP: 10.10.12.17 * registry client a(docker push), IP: 10.10.12.18 * registry client b(docker pull), IP: 10.10.13.10
step 1. 创建registry server端 下载镜像
docker pull registry:2  生成自签名证书
cd ~/;mkdir registry &amp;amp;&amp;amp; cd registry &amp;amp;&amp;amp; mkdir certs &amp;amp;&amp;amp; cd certs;openssl req -x509 -days 3650 -subj &#39;/CN=reg.zimug.com/&#39; -nodes -newkey rsa:2048 -keyout registry.key -out registry.crt;  生成用户和密码</description>
    </item>
    
    <item>
      <title>Mariadb Galera Base Docker Coreos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-base-docker-coreos.html</link>
      <pubDate>Fri, 02 Mar 2018 10:36:14 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-base-docker-coreos.html</guid>
      <description>MariaDB Galera cluster running on CoreOS using the official Docker images
env Coreos + any public cloud (Azure, AWS, Google, etc)
step 开端口:
sudo firewall-cmd --permanent --add-port=4567/udp; sudo firewall-cmd --permanent --add-port=4567/tcp; sudo firewall-cmd --permanent --add-port=4568/tcp; sudo firewall-cmd --permanent --add-port=4444/tcp; sudo firewall-cmd --permanent --add-port=3306/tcp; sudo firewall-cmd --reload; sudo firewall-cmd --permanent --list-port  检查mysql 是不是起来了:
sudo yum install -y telnet telnet 127.0.0.1 22 Telnet 127.0.0.1 3306
检查日志
docker logs -f mariadb-container-0</description>
    </item>
    
    <item>
      <title>Mariadb Galera Panubo Base Docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-panubo-base-docker.html</link>
      <pubDate>Fri, 02 Mar 2018 10:32:52 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-panubo-base-docker.html</guid>
      <description>docker之docker-mariadb-galera(panubo版)
env  node0, 10.10.12.17 node1, 10.10.12.18 node2, 10.10.13.10(这一台暂时没用上)  step  拉取 (panubo版)git 代码
mkdir ~/docker &amp;amp;&amp;amp; cd ~/docker &amp;amp;&amp;amp; git clone https://github.com/panubo/docker-mariadb-galera &amp;amp;&amp;amp; cd docker-mariadb-galera/
 设置环境变量
  在node0上:
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; EOF WSREP_NODE_ADDRESS=10.10.12.17 WSREP_CLUSTER_ADDRESS=gcomm://10.10.12.17:4567,10.10.12.18:4567,10.10.13.10:4567 EOF source ~/.bashrc  在node1上:
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; EOF WSREP_NODE_ADDRESS=10.10.12.18 WSREP_CLUSTER_ADDRESS=gcomm://10.10.12.17:4567,10.10.12.18:4567,10.10.13.10:4567 EOF source ~/.bashrc   Running Garbd  在 node0 上:
docker run -d --net host --name galera-garbd \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ panubo/mariadb-galera \ garbd   运行container  在node0上:</description>
    </item>
    
    <item>
      <title>Mariadb Galera Base Docker</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-base-docker.html</link>
      <pubDate>Fri, 02 Mar 2018 10:31:09 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb-galera-base-docker.html</guid>
      <description> docker之docker-mariadb-galera各种策略汇总
使用 FROM mariadb:10.1 的几个docker  https://github.com/EgoAleSum/mariadb-cluster  http://withblue.ink/2016/03/09/galera-cluster-mariadb-coreos-and-docker-part-1.html
Coreos + any public cloud (Azure, AWS, Google, etc)
 https://github.com/dial-once/docker-mariadb-galera  使用 Docker Cloud/Docker Compose YML
 https://github.com/toughIQ/docker-mariadb-cluster  Swarm
Consider this a POC and not a production ready system!
Built for use with Docker 1.12.1+ in Swarm Mode
 https://github.com/panubo/docker-mariadb-galera  Galera Arbitrator (aka garbd)
end </description>
    </item>
    
    <item>
      <title>Docker Install Base Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-base-centos.html</link>
      <pubDate>Fri, 02 Mar 2018 10:28:57 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-base-centos.html</guid>
      <description>practice [tom@mysql1 ~]$ sudo tee /etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;-&#39;EOF&#39; &amp;gt; [dockerrepo] &amp;gt; name=Docker Repository &amp;gt; baseurl=https://yum.dockerproject.org/repo/main/centos/7/ &amp;gt; enabled=1 &amp;gt; gpgcheck=1 &amp;gt; gpgkey=https://yum.dockerproject.org/gpg &amp;gt; EOF [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg [tom@mysql1 ~]$ sudo yum install docker-engine -y ... Installed: docker-engine.x86_64 0:1.12.3-1.el7.centos Dependency Installed: docker-engine-selinux.noarch 0:1.12.3-1.el7.centos Complete! [tom@mysql1 ~]$ sudo systemctl enable docker.service Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. [tom@mysql1 ~]$ sudo systemctl start docker [tom@mysql1 ~]$ sudo docker run --rm hello-world Unable to find image &#39;hello-world:latest&#39; locally latest: Pulling from library/hello-world c04b14da8d14: Pull complete Digest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9 Status: Downloaded newer image for hello-world:latest Hello from Docker!</description>
    </item>
    
    <item>
      <title>Virtualbox Install Ubuntu Desktop</title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-install-ubuntu-desktop.html</link>
      <pubDate>Thu, 01 Mar 2018 22:47:20 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-install-ubuntu-desktop.html</guid>
      <description>在 ubuntu desktop 下安装virtualbox
env 在 ubuntu desktop(硬盘9)中安装 virtualbox 总是不能启动
step tom@ud-3-1:~$ which VirtualBox /usr/bin/VirtualBox  看一下启动文件
tom@ud-3-1:~$ ll /usr/bin/VirtualBox lrwxrwxrwx 1 root root 4 3月 16 2017 /usr/bin/VirtualBox -&amp;gt; VBox* tom@ud-3-1:~$ ll /usr/bin/VBox -rwxr-xr-x 1 root root 4589 3月 16 2017 /usr/bin/VBox* tom@ud-3-1:~$ VirtualBox WARNING: The vboxdrv kernel module is not loaded. Either there is no module available for the current kernel (4.10.0-28-generic) or it failed to load. Please recompile the kernel module and install it by sudo /sbin/vboxconfig You will not be able to start VMs until this problem is fixed.</description>
    </item>
    
    <item>
      <title>Linux Install Ab Httpd Tools</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-install-ab-httpd-tools.html</link>
      <pubDate>Thu, 01 Mar 2018 17:30:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-install-ab-httpd-tools.html</guid>
      <description> env 长城证券 压力测试 要安装 ab
step 离线安装 下载
 httpd-tools libapr-1.so.0 libaprutil-1.so.0  安装
rpm -ivh *.rpm which ab  </description>
    </item>
    
    <item>
      <title>Project Ok</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/project-ok.html</link>
      <pubDate>Thu, 01 Mar 2018 16:50:13 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/project-ok.html</guid>
      <description>project 必须有以下内容
 文件  需求文档 技术文档 开发文档 测试文档 验收文件
 图  流程图 脑图
 其它  trello git docker README 笔记</description>
    </item>
    
    <item>
      <title>Linux Change Disklabel</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-change-disklabel.html</link>
      <pubDate>Wed, 28 Feb 2018 23:01:56 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-change-disklabel.html</guid>
      <description> parted 來手動改變硬碟為 GPT(或msdos等) [anaconda root@localhost /]# parted /dev/sda GUN Parted 2.1 Using /dev/sda Welcome to GNU Parted! Type &#39;help&#39; to view a list of commands. (parted) mklabel New disk label type?gpt Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you want to continue? Yes/No?Yes (parted) q Information: You may need to update /etc/fstab.  </description>
    </item>
    
    <item>
      <title>Mongodb Replace</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-replace.html</link>
      <pubDate>Wed, 28 Feb 2018 17:37:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-replace.html</guid>
      <description>env jlch
20180228, 江南嘉捷601313 变更为 三六零601360
step testrs:PRIMARY&amp;gt; db.self_stock.find({&amp;quot;groups._sort&amp;quot;:/601313.SH/}) { &amp;quot;_id&amp;quot; : &amp;quot;oxKP9t4ipFn59N9tmGQjW1IB0d9M&amp;quot;, &amp;quot;groups&amp;quot; : [ { &amp;quot;_name&amp;quot; : &amp;quot;default0&amp;quot;, &amp;quot;_alias&amp;quot; : &amp;quot;default0&amp;quot;, &amp;quot;_sort&amp;quot; : &amp;quot;600696.SH|601313.SH|000023.SZ|002416.SZ|002180.SZ|002715.SZ|300104.SZ|002070.SZ|002455.SZ|399001.SZ|000001.SH|399006.SZ&amp;quot;, &amp;quot;_stocks&amp;quot; : [ &amp;quot;002416.SZ&amp;quot;, &amp;quot;002180.SZ&amp;quot;, &amp;quot;002715.SZ&amp;quot;, &amp;quot;300104.SZ&amp;quot;, &amp;quot;002070.SZ&amp;quot;, &amp;quot;002455.SZ&amp;quot;, &amp;quot;399001.SZ&amp;quot;, &amp;quot;000001.SH&amp;quot;, &amp;quot;399006.SZ&amp;quot;, &amp;quot;000023.SZ&amp;quot;, &amp;quot;601313.SH&amp;quot;, &amp;quot;600696.SH&amp;quot; ] } ] } { &amp;quot;_id&amp;quot; : &amp;quot;oxKP9t581mOc9_CslG6-7KzI2958&amp;quot;, &amp;quot;groups&amp;quot; : [ { &amp;quot;_name&amp;quot; : &amp;quot;default0&amp;quot;, &amp;quot;_alias&amp;quot; : &amp;quot;default0&amp;quot;, &amp;quot;_sort&amp;quot; : &amp;quot;000546.SZ|601313.SH|600367.SH|601890.SH|600311.SH|002447.SZ|399001.SZ|000001.SH|399006.SZ&amp;quot;, &amp;quot;_stocks&amp;quot; : [ &amp;quot;000546.SZ&amp;quot;, &amp;quot;601313.SH&amp;quot;, &amp;quot;600367.SH&amp;quot;, &amp;quot;601890.SH&amp;quot;, &amp;quot;600311.</description>
    </item>
    
    <item>
      <title>Windows Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/windows.html</link>
      <pubDate>Wed, 28 Feb 2018 17:26:01 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/windows.html</guid>
      <description> windows 后台运行 使用start /b +命令即可，具体方法如下：
 按windows和r组合键打开运行面板； 在运行框内输入cmd，再按回车键进入命令提示符中； 在命令提示符中输入“ start /b 命令 &amp;ldquo; 再按回车，即可后台运行该命令。  </description>
    </item>
    
    <item>
      <title>Mysqldump Faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysqldump-faq.html</link>
      <pubDate>Wed, 28 Feb 2018 14:31:43 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysqldump-faq.html</guid>
      <description>mysqldump中断的常见错误和解决措施</description>
    </item>
    
    <item>
      <title>Gem Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/gem.html</link>
      <pubDate>Tue, 27 Feb 2018 17:56:15 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/gem.html</guid>
      <description> gem 卸载 软件包 以 cocoapods 为例子
sudo gem uninstall cocoapods  ref  2017年最新cocoaPods安装、升级、卸载及删除库命令  </description>
    </item>
    
    <item>
      <title>Nginx Seo</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-seo.html</link>
      <pubDate>Tue, 27 Feb 2018 11:08:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-seo.html</guid>
      <description> seo 优化去掉html 页面的后缀 .html ubuntu@VM-0-12-ubuntu:/etc/nginx/conf.d$ cat 8766.conf server { listen 8766; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/host.access.log main; # seo 优化去掉html 页面的后缀 .html if (!-f $request_filename){ set $rule_0 1$rule_0; } if ($rule_0 = &amp;quot;1&amp;quot;){ rewrite ^/([^\.]+)$ /$1.html last; } location / { root /home/ubuntu/registry/tomtsang-rootsongjc-cheatsheet/_site; index index.html index.htm; # proxy_pass http://127.0.0.1:4001; } ...  </description>
    </item>
    
    <item>
      <title>Mysql Config Server.conf</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-config-server.conf.html</link>
      <pubDate>Mon, 26 Feb 2018 17:25:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-config-server.conf.html</guid>
      <description> 压缩binlog空间 在运行前, 先去数据目录文件夹下查看一下, mysql.000001的文件有多少,并看一下各文件的创建时间.也就是确认一下要删除的binlog日期.
 按文件序列号删除  如果想要删除mysql.000050(不包含)日期之前的binlog文件, 在mysql下运行这个purge binary logs to &#39;mysql.000050&#39;;
运行这个后, 会将 数据目录文件夹下的 mysql.000001-mysql.000049的文件删除(如果想删除更多, 修改数字 mysql.000050 为 mysql.000120 等).
 按时间删除  删除2018-02-15 23:59:59 之前binlog。 purge binary logs before &#39;2018-02-15 23:59:59&#39;;
 通过配置文件删除8天之前的binlog  同时,在配置文件里添加这个：expire_logs_days=8,这个参数表示删除8天之前的binlog
expire_logs_days=8  </description>
    </item>
    
    <item>
      <title>Gem Install Faq</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ruby/gem-install-faq.html</link>
      <pubDate>Mon, 26 Feb 2018 09:23:11 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ruby/gem-install-faq.html</guid>
      <description>faq, ruby.h not found ubuntu@VM-0-12-ubuntu:~/registry/tomtsang-rootsongjc-cheatsheet$ bundle install ... ... To see why this extension failed to compile, please check the mkmf.log which can be found here: /tmp/bundler20180226-1352-qwjujmnokogiri-1.8.0/extensions/x86_64-linux/2.3.0/nokogiri-1.8.0/mkmf.log extconf failed, exit code 1 Gem files will remain installed in /tmp/bundler20180226-1352-qwjujmnokogiri-1.8.0/gems/nokogiri-1.8.0 for inspection. Results logged to /tmp/bundler20180226-1352-qwjujmnokogiri-1.8.0/extensions/x86_64-linux/2.3.0/nokogiri-1.8.0/gem_make.out An error occurred while installing nokogiri (1.8.0), and Bundler cannot continue. Make sure that `gem install nokogiri -v &#39;1.8.0&#39;` succeeds before bundling. In Gemfile: github-pages was resolved to 156, which depends on jekyll-mentions was resolved to 1.</description>
    </item>
    
    <item>
      <title>Vmware Workstation</title>
      <link>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-workstation.html</link>
      <pubDate>Sat, 24 Feb 2018 10:40:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vmware/vmware-workstation.html</guid>
      <description>序列号:
ver 11:
1F04Z-6D111-7Z029-AV0Q4-3AEH8
ver 12:
1F04Z-6D111-7Z029-AV0Q4-3AEH8
5A02H-AU243-TZJ49-GTC7K-3C61N
VF5XA-FNDDJ-085GZ-4NXZ9-N20E6 UC5MR-8NE16-H81WY-R7QGV-QG2D8 ZG1WH-ATY96-H80QP-X7PEX-Y30V4 AA3E0-0VDE1-0893Z-KGZ59-QGAVF</description>
    </item>
    
    <item>
      <title>Bundle Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/ruby/bundle-install.html</link>
      <pubDate>Sat, 24 Feb 2018 09:24:48 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ruby/bundle-install.html</guid>
      <description> env mac book air
step 安装 bundle
➜ ~ sudo gem install bundler Password: Fetching: bundler-1.16.1.gem (100%) Successfully installed bundler-1.16.1 Parsing documentation for bundler-1.16.1 Installing ri documentation for bundler-1.16.1 1 gem installed ➜ ~ ➜ tomtsang-rootsongjc-cheatsheet git:(master) which bundle /usr/local/bin/bundle ➜ tomtsang-rootsongjc-cheatsheet git:(master)  ref  mac 下应该怎么安装 bundle  </description>
    </item>
    
    <item>
      <title>Yarn Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/yarn/yarn-install.html</link>
      <pubDate>Sat, 24 Feb 2018 09:20:55 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yarn/yarn-install.html</guid>
      <description>env mac book air
step 安装 yarn
➜ tomtsang-rootsongjc-cheatsheet git:(master) brew install yarn Updating Homebrew... ==&amp;gt; Auto-updated Homebrew! Updated 2 taps (caskroom/cask, homebrew/core). ==&amp;gt; Updated Formulae abcmidi braid cryptopp exiftool fdroidserver glbinding haxe pwntools x265 alot cgrep erlang fbi-servefiles freexl graphene miniupnpc ranger ==&amp;gt; Downloading https://yarnpkg.com/downloads/1.3.2/yarn-v1.3.2.tar.gz ==&amp;gt; Downloading from https://github.com/yarnpkg/yarn/releases/download/v1.3.2/yarn-v1.3.2.tar.gz ######################################################################## 100.0% 🍺 /usr/local/Cellar/yarn/1.3.2: 14 files, 3.9MB, built in 40 seconds ➜ tomtsang-rootsongjc-cheatsheet git:(master)  使用, 安装工程中的依赖包
➜ tomtsang-rootsongjc-cheatsheet git:(master) yarn install yarn install v1.</description>
    </item>
    
    <item>
      <title>Today Learn</title>
      <link>https://eiuapp.github.io/eiuapp-learn/tools/today-learn.html</link>
      <pubDate>Fri, 23 Feb 2018 17:27:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tools/today-learn.html</guid>
      <description> 20180223 Hugo 集成 Algolia 搜索
20180302 telegram 客户端都是开源的，源代码放在官方网站上供人下载，以及修改（遵循 GPL v3 许可协议）。从比特币投资者变成天使投资人的李笑来，最近就用一个星期的时间，开发了一个基于 Telegram 的第三方客户端 Dove。
李笑来说，“（我）觉得 Telegram 挺开放的，未来可能在这上面长出很多有意思的东西。另外，总体上，它是个比较让人喜欢的软件。”
不过，Telegram 的服务端是闭源的。
ref
 http://www.ifanr.com/504427  </description>
    </item>
    
    <item>
      <title>Mac Command</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/mac.html</link>
      <pubDate>Fri, 23 Feb 2018 17:08:40 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/mac.html</guid>
      <description>brew brew install node brew upgrade node  Mac OS 如何更改文件的默认打开方式 如何显示Mac OS X上的隐藏文件和文件夹 如何显示Mac OS X上的隐藏文件和文件夹
https://wenku.baidu.com/view/ce92f3b877232f60dccca1e0.html</description>
    </item>
    
    <item>
      <title>Nodejs Faq Unexpected Token Function</title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-faq-unexpected-token-function.html</link>
      <pubDate>Fri, 23 Feb 2018 15:42:10 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs-faq-unexpected-token-function.html</guid>
      <description>env 在 hugo-algolia -s命令运行时, 出现了 Unexpected token function 报错
➜ tomtsang-rootsongjc-hugo git:(master) ✗ hugo-algolia -s /usr/local/lib/node_modules/hugo-algolia/lib/utils.js:11 async function copySynonyms(fromIndex, toIndex) { ^^^^^^^^ SyntaxError: Unexpected token function at Object.exports.runInThisContext (vm.js:78:16) at Module._compile (module.js:543:28) at Object.Module._extensions..js (module.js:580:10) at Module.load (module.js:488:32) at tryModuleLoad (module.js:447:12) at Function.Module._load (module.js:439:3) at Module.require (module.js:498:17) at require (internal/module.js:20:19) at Object.&amp;lt;anonymous&amp;gt; (/usr/local/lib/node_modules/hugo-algolia/lib/index.js:11:52) at Module._compile (module.js:571:32) ➜ tomtsang-rootsongjc-hugo git:(master) ✗  step Unexpected token function 报错, 是指未预期的token 函数, 那先就要查一下, nodejs版本支持与否</description>
    </item>
    
    <item>
      <title>Nodejs Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/nodejs.html</link>
      <pubDate>Fri, 23 Feb 2018 15:31:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/nodejs.html</guid>
      <description>Node.js ES2015 Support</description>
    </item>
    
    <item>
      <title>Route</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/route.html</link>
      <pubDate>Fri, 23 Feb 2018 12:25:05 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/route.html</guid>
      <description>env 192.168.31.181 上 加一条 wifi 192.168.33.0/24 的路由规则
ref Linux下route add 命令加入路由列表
step [root@check ~]# ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: em1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP qlen 1000 link/ether 44:a8:42:2b:e5:e3 brd ff:ff:ff:ff:ff:ff inet 192.168.31.181/24 brd 192.168.31.255 scope global em1 valid_lft forever preferred_lft forever inet6 fe80::46a8:42ff:fe2b:e5e3/64 scope link valid_lft forever preferred_lft forever 3: em2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP qlen 1000 link/ether 44:a8:42:2b:e5:e4 brd ff:ff:ff:ff:ff:ff inet 10.</description>
    </item>
    
    <item>
      <title>Blockchain Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/blockchain.html</link>
      <pubDate>Fri, 23 Feb 2018 10:08:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/blockchain.html</guid>
      <description>如何学习区块链技术？
coinmarketcap
BitUP Intelligent Digital Asset Management, BitUP平台推出的产品都将基于量化交易来实现操作。基于增强学习的自动化交易等
metastablecapital We Manage Crypto Asset Hedge Funds
chia, Chia will be available to the public in the summer of 2018
币界网
数字货币导航网
AICoin
开发 Node.js开发加密货币
bitcoin  https://www.gdax.com/trade/BTC-USD  区块链浏览器  searchain Tokenview qukuai ChainFlyer btc.com BlockTrail Blockchair Blockchain  1.我见过的里面最酷炫的，日本BitFlyer交易所的ChainFlyer：https://chainflyer.bitflyer.jp 尤其是创世区块…… 优点：很直观地区分了SW交易和非SW交易；脚本解析看上去做得很棒，非常清晰；OP_RETURN还被显示为消息气泡，细节很赞；收录了历史上的双花交易，并没有把它们直接丢弃。 缺点：好像没有显示矿池的名字。 2.国内的大矿池自带的，访问速度很快：https://btc.com 优点：访问速度快、带有未确认交易内存池统计、算力占比统计等丰富统计数据；还有手续费估计等实用功能；脚本显示也比较清晰。 缺点：属于“矿霸”比特大陆旗下（额这个也算缺点么）；再硬扯一条吧：自带的交易加速功能价格太贵。 3.BlockTrail：https://www.blocktrail.com/BTC 优点：可以直观地显示交易有没有启用Opt-in RBF。 缺点：被比特大陆收购（又来了）；会把原生SW地址的输出脚本错误解析为OP_RETURN。 4.Blockchair：https://blockchair.com/bitcoin 优点：筛选和统计功能非常强大，可以导出CSV数据；数据超级详细；搜索也很强大。 缺点：访问好像有点慢。 5.Blockchain：https://blockchain.info/ 优点：貌似比较老牌；自带各种统计图表，而且可以导出CSV数据；实时滚动更新的未确认交易名单（貌似是没X用的功能？）；还有收录历史上的孤块（双花交易似乎就直接丢了） 缺点：太老，代码更新好像跟不上了，貌似连原生SW地址都没好好兼容；前一阵子发生的“矿工搞丢12.5BTC区块奖励”事件中也崩过一次。  比特币区块链浏览器 简介：
 https://blockchain.</description>
    </item>
    
    <item>
      <title>Docker Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/docker.html</link>
      <pubDate>Fri, 23 Feb 2018 10:08:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/docker.html</guid>
      <description> 如何使用 DockerHub  </description>
    </item>
    
    <item>
      <title>Mount</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/mount.html</link>
      <pubDate>Thu, 22 Feb 2018 10:20:04 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/mount.html</guid>
      <description>通过 shell root@ud-31-193:~# mkdir /mnt/31.10.share root@ud-31-193:~# mount -t cifs -o username=share,password=&amp;quot;&amp;quot; //192.168.31.10/share /mnt/31.10.share/ root@ud-31-193:~#  通过 auto.misc [jlch@check conf.d]$ sudo cat /etc/auto.misc [sudo] password for jlch: # # This is an automounter map and it has the following format # key [ -mount-options-separated-by-comma ] location # Details may be found in the autofs(5) manpage #cd	-fstype=iso9660,ro,nosuid,nodev	:/dev/cdrom #dbf -fstype=cifs,rw,username=administrator,password=jlch@2016 ://10.10.14.11/hq share -fstype=cifs,rw,username=share,password= ://192.168.31.10/share 31245share -fstype=cifs,rw,username=share,password=Jlch1234 ://192.168.31.245/share 319share -fstype=cifs,rw,username=user01,password=User01 ://192.168.31.9/DataVol2/ dbf -fstype=cifs,rw,username=administrator,password=jlch333 ://10.</description>
    </item>
    
    <item>
      <title>Software Architect</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/software-architect.html</link>
      <pubDate>Tue, 13 Feb 2018 21:14:59 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/software-architect.html</guid>
      <description>c4model</description>
    </item>
    
    <item>
      <title>Enterprise Idea</title>
      <link>https://eiuapp.github.io/eiuapp-learn/enterprise/enterprise-idea.html</link>
      <pubDate>Tue, 13 Feb 2018 21:12:06 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/enterprise/enterprise-idea.html</guid>
      <description> 有时候,组织需要一些新鲜血液进入,改善环境.比如,2018骑士队的去6来4
 在 人人都是产品经理 中,有几篙好文章,就是关于公司管理的.
 招聘, 真的是很重要, 如果说进来的人, 工作能力差, 真的是很头疼..
 我个人,真的是很不喜欢和不聪明的人打交道, 真的是好累.
 有些东西,我传达几遍, 多次强调, 还是没有用, 真的是烦得不行.
  </description>
    </item>
    
    <item>
      <title>Life Healthy</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/life/life-healthy.html</link>
      <pubDate>Tue, 13 Feb 2018 11:35:28 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/life/life-healthy.html</guid>
      <description>今天才听同事说去香港打疫苗的事
 九价疫苗 二价,六价,八价疫苗 上午的医生出症费比下午1点后的便宜100港币 宫颈癌疫苗 有买香港保险后,打疫苗会稍微便宜一点 深圳私立医院卓正医疗,很牛吗?  </description>
    </item>
    
    <item>
      <title>Mysql Config</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-config.html</link>
      <pubDate>Mon, 12 Feb 2018 10:05:24 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-config.html</guid>
      <description>MySQL5.7初始密码查看及重置 [root@localhost jlch]# grep &#39;temporary password&#39; /var/log/mysqld.log 2018-02-12T07:28:21.362804Z 1 [Note] A temporary password is generated for root@localhost: Ngu97xLjPL(S [root@localhost jlch]#  MySQL源码安装、配置、初始化及启动 mysql_secure_installation  配置mysql允许远程连接的方法 默认情况下，mysql只允许本地登录，如果要开启远程连接，则需要修改/etc/mysql/my.conf文件。 一、修改/etc/mysql/my.conf 找到bind-address = 127.0.0.1这一行 改为bind-address = 0.0.0.0即可 二、为需要远程登录的用户赋予权限 1、新建用户远程连接mysql数据库 grant all on *.* to admin@&#39;%&#39; identified by &#39;123456&#39; with grant option; flush privileges; 允许任何ip地址(%表示允许任何ip地址)的电脑用admin帐户和密码(123456)来访问这个mysql server。 注意admin账户不一定要存在。 2、支持root用户允许远程连接mysql数据库 grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option; flush privileges;  MySQL5.</description>
    </item>
    
    <item>
      <title>Mysql Install Rpm</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-install-rpm.html</link>
      <pubDate>Mon, 12 Feb 2018 09:59:56 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql-install-rpm.html</guid>
      <description> mysql install by rpm on centos 官方下载地址
在安装了perl的基本上,直接下载以下4个rpm包安装就可以了.
mysql-community-server-5.7.21-1.el7.x86_64.rpm mysql-community-client-5.7.21-1.el7.x86_64.rpm mysql-community-common-5.7.21-1.el7.x86_64.rpm mysql-community-libs-5.7.21-1.el7.x86_64.rpm  </description>
    </item>
    
    <item>
      <title>Github Travis</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/github-travis.html</link>
      <pubDate>Sun, 11 Feb 2018 15:29:53 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/github-travis.html</guid>
      <description>Using Hugo with Travis CI on GitHub Pages
martinliu-hugo</description>
    </item>
    
    <item>
      <title>Life Film</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/life/life-film.html</link>
      <pubDate>Sat, 10 Feb 2018 23:19:15 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/life/life-film.html</guid>
      <description> film 教育  超脱  观看了, 感觉和之前看过的[狩猎]() 一样, 很深层&amp;hellip;
 [雪国列车]()  这个也很不错. 可以从多个角度去看待此电影
 有机会再观看下面几个影片  《留下我》《李米的猜想》《生命中所不能沉重之情》《精英部队2》 被嫌弃的松子的一生, 告白, 碧海蓝天
 已看的其它电影  《肖申克的救赎》 这个杀手不冷
 星际穿越, 观后感  很不错..科幻..包括了, 家庭, 父女, 承诺, 人类视角, 勇气, 使命
整体来说, 最突出的是父亲对子女的承诺,科学家对人类负责的使命感
其中, 5维空间, 对3维空间的描述, 还是很不错的..
5维 = 3维 + 引力 + 时间 + 爱
 好家伙  这个影片有点老, 但是, 也还行吧. 可以当成一个反面教材来看吧..
与 &amp;lt;&amp;lt;无主之城&amp;gt;&amp;gt; 有点像
黑社会的打打杀杀,最后,还是要回归正常生活
   </description>
    </item>
    
    <item>
      <title>Golang Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/golang.html</link>
      <pubDate>Sat, 10 Feb 2018 10:57:03 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/golang.html</guid>
      <description> golang-wiki
gowalker
PackageManagementTools
godoc
gometalinter,golang代码质量检查分析工具
https://github.com/itcloudy/go-view
Ref  https://segmentfault.com/a/1190000013553309  </description>
    </item>
    
    <item>
      <title>Golang Import Packages</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang-import-packages.html</link>
      <pubDate>Fri, 09 Feb 2018 22:29:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang-import-packages.html</guid>
      <description> ref https://segmentfault.com/q/1010000010846304
https://my.oschina.net/zlLeaf/blog/174404
step 通常情况下，import的包都是相对$GOPATH/src目录引入的，比如从github上面clone下来的项目，直接放到$GOPATH/src目录下，就可以直接import。例如： 如果项目的import路径是这样写的： import &amp;quot;github.com/yourname/projectname&amp;quot; 需要将项目代码放置在： $GOAPTH/src/github.com/yourname/projectname/下 如果项目的import是这样写的： import &amp;quot;message&amp;quot; 则将message.go放到: $GOAPTH/src/message/目录下即可。  </description>
    </item>
    
    <item>
      <title>Stock Trade Discipline</title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/stock-trade-discipline.html</link>
      <pubDate>Wed, 07 Feb 2018 10:15:52 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/stock-trade-discipline.html</guid>
      <description> 不接飞刀 不买下跌股票 严格止损 盘前必读
 敬畏市场. 坚持被动交易, 定式交易,永远把保住本金放在第一位 计划交易. 每天写复盘日记,静态阅读市场.每个买卖决定对照交易模型审视确定,并排写计划表 交易计划. 盘前15分钟检查软硬件和盈损点.盘中不许临时起意,挂单撤单不犹豫.尽量使用隔夜挂单 加强保障. 生活节律,保证专注度   </description>
    </item>
    
    <item>
      <title>Code Style</title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/code-style.html</link>
      <pubDate>Tue, 06 Feb 2018 17:55:29 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/code-style.html</guid>
      <description> 三种编程命名规范（匈牙利命名法、驼峰式命名法、帕斯卡命名法)
代码风格, 所有的语言的代码风格汇总 有的时候，真的是很困惑，我应该用什么代码风格.
 Airbnb JavaScript Style Guide 中文版 Airbnb JavaScript Style Guide Style Guide for Python Code Style guides for Google-originated open-source projects Google 开源项目风格指南 (中文版) Google 开源项目风格指南 github (中文版) Google JavaScript Style Guide(中文 版) analyzing code convention from github commits for Github data challenge, github地址 Code Guide by @AlloyTeam 盼望您的指定  </description>
    </item>
    
    <item>
      <title>Mongodb Output Import</title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-output-import.html</link>
      <pubDate>Tue, 06 Feb 2018 11:12:03 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb-output-import.html</guid>
      <description>env 从 192.168.31.42/abc/Signals_1Min 转移mongodb数据 到 192.168.31.240/openQuote/Signals_1Min
ref MongoDB导入导出以及数据库备份
step mongoexport 导出 准备导出字段
[jlch@check 42]$ cat field_Signals_1Min.txt _id Type Sign ID TrdDt TrdTm PrevClsPx LastPx TM Vol[jlch@check 42]$  导出
[jlch@check 43]$ mongoexport -h 192.168.31.42 -d abc -c Signals_1Min -q &#39;{&amp;quot;TrdDt&amp;quot;:20180131, &amp;quot;TrdTm&amp;quot;:{$lt:141900}, &amp;quot;ID&amp;quot;:/SZ/ }&#39; --fieldFile=./field_Signals_1Min.txt --type=csv -o ./Signals_1Min.csv 2018-02-06T11:55:38.885+0800	connected to: 192.168.31.42 2018-02-06T11:55:39.053+0800	exported 3256 records [jlch@check 42]$ ls field_Signals_1Min.txt Signals_1Min.csv [jlch@check 42]$  此时生成 Signals_1Min.csv
mongoimport 导入 [jlch@check 42]$ mongoimport -h 192.</description>
    </item>
    
    <item>
      <title>Telnet Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/telnet-install.html</link>
      <pubDate>Tue, 06 Feb 2018 10:33:31 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/telnet-install.html</guid>
      <description>telnet 安装 by rpm
telnet下载</description>
    </item>
    
    <item>
      <title>Microservices Python</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/microservices-python.html</link>
      <pubDate>Tue, 06 Feb 2018 00:08:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/microservices-python.html</guid>
      <description>TDD开发容器化的Python微服务应用</description>
    </item>
    
    <item>
      <title>Python sqlalchemy 使用</title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-sqlalchemy-faq.html</link>
      <pubDate>Tue, 06 Feb 2018 00:08:44 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-sqlalchemy-faq.html</guid>
      <description>sqlalchemy 如何在查询的时候排除掉数据库字段为 null的 python语句
UnReadMsg = session.query(MainMongodbfile).filter_by(id=481) UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1 = &amp;quot;年烧煤--吨&amp;quot;) UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1 = None) UnReadMsg = session.query(MainMongodbfile).filter(MainMongodbfile.indicator_title1 != None)  能正常使用, 但是 使用下面2行,来查询为 null的, 却会报错
UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1 == None) UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1.isnot(None)) UnReadMsg = session.query(MainMongodbfile).filter(indicator_title1 != None) UnReadMsg = session.query(MainMongodbfile).filter_by(MainMongodbfile.indicator_title1 != None) UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1 != None) UnReadMsg = session.query(MainMongodbfile).filter_by( not_(indicator_title1.is_(None))) UnReadMsg = session.query(MainMongodbfile).filter_by(indicator_title1.isnot(null())) UnReadMsg = session.query(MainMongodbfile).filter_by(MainMongodbfile.indicator_title1.isnot(null())) UnReadMsg = session.query(MainMongodbfile).filter_by( not_(indicator_title1.is_(None))) UnReadMsg = session.query(MainMongodbfile).filter_by( not_(MainMongodbfile.indicator_title1.is_(None))) UnReadMsg = session.</description>
    </item>
    
    <item>
      <title>Golang Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang-install.html</link>
      <pubDate>Mon, 05 Feb 2018 23:34:58 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang-install.html</guid>
      <description>mac Golang在Mac OS上的环境配置
LiteIDE下载,这个网址,好像现在打不开
调试 mac安装gdb brew tap homebrew/dupes brew install gdb  delve 参考了 Installing Go, Gocode, GDB and LiteIDE</description>
    </item>
    
    <item>
      <title>Redis Install</title>
      <link>https://eiuapp.github.io/eiuapp-learn/redis/redis-install.html</link>
      <pubDate>Mon, 05 Feb 2018 17:23:01 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/redis/redis-install.html</guid>
      <description>CENTOS7下安装REDIS
CentOS下Redis的安装
内含 开机自启动</description>
    </item>
    
    <item>
      <title>Go Learn</title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/learn-golang.html</link>
      <pubDate>Mon, 05 Feb 2018 14:25:08 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/learn-golang.html</guid>
      <description>资料导航 http://www.geeker8.com/go/41
菜鸟教程 已完成
优
 比较易读  缺点
 没介绍 通道，go协程，等并发概念和原理  Go语言第一课 代码
已完成
优
 比较易读 有代码测试  Go简易教程 代码
学习中
在 6.3 小节完全懵逼
读后感受 整体来说，我感觉，本书内容较淺而对新手不易理解，知识结构展示混乱，且无完整的示例代码。读完了，没有感觉学到东西。
Go入门指南 gomake
godoc
9.11 在 Go 程序中使用外部库
学习在 13.2 小节, 停止&amp;hellip;.
Go并发编程实战 随书源码
学习中, 现在第3章
An Introduction to Programming in Go url
 http://www.golang-book.com/books/intro pdf 中文繁体  code
随书源码
golangbootcamp [官方文档-中文] 官方中文-Go编程语言规范 golang快速入门 done
chan 部分有错，其它整体很不错了，可以作为小手册，参考用。
go语言圣经（中文版） gobyexample done
https://gobyexample.com, 这里有大量使用常规使用案例 https://gobyexample.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>https://eiuapp.github.io/eiuapp-learn/resource/resource.html</link>
      <pubDate>Sun, 04 Feb 2018 21:59:07 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/resource/resource.html</guid>
      <description>综合  21运维
 程序员在线工具, 这个比较叼了, 好多有用的工具
 RedHat Developers
 发现用MkDocs来写教程也还挺爽的,还真心不错,示例有TDD开发容器化的Python微服务应用
 用OpenSWAN做Linux下的IPSec VPN的详细配置指南
 filebeat + logstash + kafka + logstash + kibana + grafana 支持异地多机房, 来源 k8s技术圈的紫木
 helm 完成 dashboard 点击安装应用APP, 如 点击安装 redis, mysql等
 gitops, jenkins, rancher, GoCD, 完成基于kubernetes的CI/CD框架
 讨论群 gitter, 好处, 不需要wechat或者facebook
 脚本之家book
 清华大学开源软件镜像站
 github-format-syntax
 GitLab Flavored Markdown (GFM)
 真正的inotify+rsync实时同步 彻底告别同步慢
 jpg to png
  api  apiview</description>
    </item>
    
    <item>
      <title>Kubernetes Deployment Rollingupdate</title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-deployment-rollingupdate.html</link>
      <pubDate>Sun, 04 Feb 2018 13:21:25 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes-deployment-rollingupdate.html</guid>
      <description>使用kubernetes的deployment进行RollingUpdate</description>
    </item>
    
    <item>
      <title>R Rstudio Vnc Install Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/r/R-Rstudio-vnc-install-centos.html</link>
      <pubDate>Sat, 03 Feb 2018 14:38:19 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/r/R-Rstudio-vnc-install-centos.html</guid>
      <description>R, Rstudio 在 centos 下安装, 并可通过端口访问
cd yum install scp ls ifconfig ls yum install R yum install gcc gcc-c++ -y vncserver R sudo systemctl stop firewalld.service yum -y install tigervnc-server tigervnc ll /lib/systemd/system/vncserver@.service cp /lib/systemd/system/vncserver@.service /lib/systemd/system/vncserver@:1.service vi /lib/systemd/system/vncserver@.service systemctl daemon-reload systemctl enable vncserver@:1.service systemctl start vncserver@:1.service cat /etc/sysconfig/iptables sudo systemctl stop firewalld.service service vncserver restart rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm yum install epel-release yum install gcc gcc-c++ -y yum install gcc-gfortran -y yum install readline-devel -y yum install libXt-devel -y yum install fonts-chinese tcl tcl-devel tclx tk tk-devel -y yum install mesa-libGLU mesa-libGLU-devel -y yum install -y openssl openssl-devel sudo yum clean all sudo yum install R -y R mkdir /home/conan/R/Rserve -p vi /etc/Rserv.</description>
    </item>
    
    <item>
      <title>Command Tips</title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/bash.html</link>
      <pubDate>Sat, 03 Feb 2018 14:30:30 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/command/bash.html</guid>
      <description>some useful commands
netstat -ef | grep 8080 netstat -r | grep nginx netstat -a | grep nginx  vmstat 1  sudo systemctl daemon-reload  cat values.yaml | grep -v ^# | grep -v ^$  按日期删除文件
find /root/gws_sync/tasks -mtime +7 -name &amp;quot;*.csv*&amp;quot; -exec rm -rf {} \; &amp;gt;&amp;gt; ./rm.log 2&amp;gt;&amp;amp;1  删除链接
有创建就有删除
rm -rf symbolic_name ## 注意不是rm -rf symbolic_name/  </description>
    </item>
    
    <item>
      <title>Svn Install Centos</title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn-install-centos.html</link>
      <pubDate>Sat, 03 Feb 2018 14:22:47 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn-install-centos.html</guid>
      <description>在 centos 下 安装SVN
yum install subversion -y svnserve --version mkdir svn cd svn pwd rm /root/svn rm /root/svn -p rm /root/svn/ -p rm /root/svn/ cd pwd rm /root/svn/ cd /home mkdir svn cd svn pwd mkdir project svnadmin create /home/svn/project/ cd project/ ls cd conf/ ls vi passwd vi authz vi svnserve.conf svnserve -d -r /var/svn/svnrepos svnserve -d -r /home/svn/project/ ps -aux | grep svn cd home cd /home ls vi test ls svn import test svn://192.</description>
    </item>
    
    <item>
      <title>Redis History</title>
      <link>https://eiuapp.github.io/eiuapp-learn/redis/redis-history.html</link>
      <pubDate>Sat, 03 Feb 2018 13:41:32 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/redis/redis-history.html</guid>
      <description>之前 31.240 的 redis 的history
[tom@kube-node-15 redis-3.0.7]$ src/redis-cli Could not connect to Redis at 127.0.0.1:6379: Connection refused not connected&amp;gt; exit [tom@kube-node-15 redis-3.0.7]$ sudo make install cd src &amp;amp;&amp;amp; make install make[1]: Entering directory `/opt/redis-3.0.7/src&#39; Hint: It&#39;s a good idea to run &#39;make test&#39; ;) INSTALL install INSTALL install INSTALL install INSTALL install INSTALL install make[1]: Leaving directory `/opt/redis-3.0.7/src&#39; [tom@kube-node-15 redis-3.0.7]$ pwd /opt/redis-3.0.7 [tom@kube-node-15 redis-3.0.7]$ [tom@kube-node-15 redis-3.0.7]$ redis-cli Could not connect to Redis at 127.</description>
    </item>
    
    <item>
      <title>Perl Rpm Install Offline</title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/perl-rpm-install-offline.html</link>
      <pubDate>Thu, 01 Feb 2018 20:11:51 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/perl-rpm-install-offline.html</guid>
      <description>perl rpm install offline
$ tar -xzf perl-5.x.y.tar.gz $ cd perl-5.x.y $ ./Configure -de $ make $ make test $ make install  </description>
    </item>
    
    <item>
      <title>Git常用命令与GitHub使用技巧技巧整理</title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git-github-tips.html</link>
      <pubDate>Wed, 31 Jan 2018 15:55:36 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git-github-tips.html</guid>
      <description>1. GitHub中同步远程分支
查看本地已有分支
git remote -v  增加远程分支
git remote add upstream https://github.com/k8smeetup/kubernetes.github.io.git git fetch upstream git checkout master git merge upstream/master  2. 更新Git代码并对比
git remote -v git fetch origin master git log -p master.. origin/master git merge origin/master  3. 删除远程分支
git push origin --delete &amp;lt;branchName&amp;gt; git push origin --delete tag &amp;lt;tagName&amp;gt;  4. 删除所有历史记录
Checkout
git checkout --orphan latest_branch  Add all the files
 git add -A  Commit the changes</description>
    </item>
    
    <item>
      <title>centos install mysql (no network)</title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos-install-mysql-no-network.html</link>
      <pubDate>Wed, 31 Jan 2018 12:26:38 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos-install-mysql-no-network.html</guid>
      <description>env 需要在 centos 环境下安装 mysql
192.168.31.175
step 下载mysql的rpm安装包
[root@localhost jlch]# rpm -ivh mysql-community-server-5.7.21-1.el7.x86_64.rpm warning: mysql-community-server-5.7.21-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY error: Failed dependencies: /usr/bin/perl is needed by mysql-community-server-5.7.21-1.el7.x86_64 mysql-community-client(x86-64) &amp;gt;= 5.7.9 is needed by mysql-community-server-5.7.21-1.el7.x86_64 mysql-community-common(x86-64) = 5.7.21-1.el7 is needed by mysql-community-server-5.7.21-1.el7.x86_64 net-tools is needed by mysql-community-server-5.7.21-1.el7.x86_64 perl(Getopt::Long) is needed by mysql-community-server-5.7.21-1.el7.x86_64 perl(strict) is needed by mysql-community-server-5.7.21-1.el7.x86_64 [root@localhost jlch]#  要安装 perl, 下载
tar -zxvf perl-5.26.1.tar.gz cd perl-5.</description>
    </item>
    
    <item>
      <title>virtualbox加载新的image</title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-add-vbox.html</link>
      <pubDate>Wed, 31 Jan 2018 12:26:38 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox-add-vbox.html</guid>
      <description>把 从其它地方复制过来的virtualbox 文件, 转移到此机器.
env 把 harbor 转移
step virtualbox/file/add, choose *.vbox
发现当文件很大时, virtualbox所有的资源都给它了, 基本上就不能动了.
从这里看出来, 在生产环境下, 不能使用 virtualbox 这样的形式, 一旦有了类似这样的占用cpu的操作, 其它机器都卡死了.</description>
    </item>
    
    <item>
      <title>Spacemacs Rocks Day 2, Use Org-mode to Management Your Time</title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-2-notes.html</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-rocks-season-1-day-2-notes.html</guid>
      <description>进入 agenda
 C-c a
 进入天，再进入周，再返回至天
 C-c a a 选中项目 Rtn w d
 这样，就可以把它们绑定一下。那怎么绑定呢？
子龙山人的 `org-agenda-dir` 相关配置，在`~/.spacemacs.d/layers/zilongshanren/config.el`
org-agenda-dir &amp;quot;~/org-notes&amp;quot; deft-dir &amp;quot;~/org-notes&amp;quot; blog-admin-dir &amp;quot;~/zilongshanren.com&amp;quot;))  所以，这里要替换成自己的。</description>
    </item>
    
    <item>
      <title>About blog</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/ABOUT_BLOG.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/ABOUT_BLOG.html</guid>
      <description>关于博客 简单的说一下这个博客的部署。
这是一个基于Gitbook的电子书，通过markdown语法以及Gitbook约定的文档结构，可以很有逻辑的讲内容展示出来。整个博客项目托管在我个人的github：https://github.com/huangwjwork/gitbook ，然后通过github与我的vps部署的webhook联动：每当有push行为，github就会post一条请求到我vps上的webhook，然后触发我的gitbook脚本，实现博客的自动更新。
关于Gitbook，想要了解的可以参考这位大佬的博客：http://gitbook.zhangjikai.com/
关于github的webhook的部署，网上的资源很多，我用的是https://github.com/hustcc/webhookit，内有中文文档
安装Gitbook 安装node.js 编译安装或者对应的二进制安装
yum install nodejs  安装Gitbook 国内环境建议修改npm源为淘宝镜像站后再安装
npm install gitbook-cli -g gitbook -V  配置gitbook 可以在github上创建一个项目，然后clone到本地，进入项目根目录，执行gitbook init，编辑gitbook.json，SUMMARY.md，README.md，以及.gitignore
book.json book.json是gitbook的配置文件，包括插件的配置文件，通过插件可以丰富电子书的功能，有兴趣的可以去官方找找，很多很有意思的插件（插件越多js文件越多，我的vps流量计费，所以我的是乞丐版 T T）
贴一下我的book.json
cat book.json { &amp;quot;title&amp;quot;: &amp;quot;huangwjwork&#39;s notes&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;好记性不如烂笔头，记录日常遇到的问题及学习的成果&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;huangwjwork&amp;quot;, &amp;quot;output.name&amp;quot;: &amp;quot;site&amp;quot;, &amp;quot;language&amp;quot;: &amp;quot;zh-hans&amp;quot;, &amp;quot;gitbook&amp;quot;: &amp;quot;3.2.3&amp;quot;, &amp;quot;root&amp;quot;: &amp;quot;.&amp;quot;, &amp;quot;links&amp;quot;: { &amp;quot;sidebar&amp;quot;: { &amp;quot;Home&amp;quot;: &amp;quot;https://huangwj.app&amp;quot; } }, &amp;quot;plugins&amp;quot;: [ &amp;quot;github@^2.0.0&amp;quot;, &amp;quot;edit-link@^2.0.2&amp;quot;, &amp;quot;anchors@^0.7.1&amp;quot;, &amp;quot;include-codeblock@^3.0.2&amp;quot;, &amp;quot;splitter@^0.0.8&amp;quot;, &amp;quot;tbfed-pagefooter@^0.0.1&amp;quot;, &amp;quot;expandable-chapters-small@^0.1.7&amp;quot;, &amp;quot;anchor-navigation-ex@0.1.8&amp;quot; ], &amp;quot;pluginsConfig&amp;quot;: { &amp;quot;theme-default&amp;quot;: { &amp;quot;showLevel&amp;quot;: true }, &amp;quot;github&amp;quot;: { &amp;quot;url&amp;quot;: &amp;quot;https://github.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/ABOUT_ME.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/ABOUT_ME.html</guid>
      <description>Nothing in the world can take the place of Persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and Determination alone are omnipotent. The slogan &amp;ldquo;Press On&amp;rdquo; has solved and will always solve the problems of the human race.
本人正在寻找一位前端工程师，希望一起加油，有意向的可以联系我！
想联系，加微信!</description>
    </item>
    
    <item>
      <title>chat</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/chedan/chedan.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/chedan/chedan.html</guid>
      <description> 瞎扯淡 </description>
    </item>
    
    <item>
      <title>target</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/chedan/goal.html</link>
      <pubDate>Sat, 18 Mar 2017 20:53:54 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/chedan/goal.html</guid>
      <description> 自己的小目标 睡觉睡到自然醒 数钱数到手抽筋  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/README.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/README.html</guid>
      <description>Blog Gitbook 此书是我的博客的阅读与理解，帮助大家更快了解我对技能的管理和使用。
 GitHub地址：https://github.com/eiuapp/blog-markdown/
 在线访问地址：https://eiuapp.github.io/
  相关资源 关于 本书中引用了一些公开的分享与链接并加以整理。
本书作于2019年初，会持续更新。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/SUMMARY.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/SUMMARY.html</guid>
      <description>Summary  Introduction   关于  个人简历 关于博客 关于配置 关于作品 理想与现实  自己的小目标 Life  Life Film Life Healthy health      apple  注册香港ID  cloud-native  awesome  aws  教你如何找到AWS Access Key ID and Secret Access Key  kubernetes  rancher备份  bitbucket  bitbucket组来实现不同用户间的共同管理某一个具体repo  blockchain  blockchain note Eth Erc20 Create Xcoin Eth Token Release  org  使用org-mode和ox-hugo写文档 shane sveller blog 笔记 quickly create a new draft post  hugo  使用 hugo-algolia 进行文章内容搜索 使用org-mode和ox-hugo写文档 一位大神的线上deploy shell shane sveller blog 笔记 使用hugo的hugo-material-docs主题模板来构建书籍  centos  CentOS6上ftp服务器搭建实战 centos install mysql (no network) centos6.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/centos/centos.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/centos/centos.html</guid>
      <description>centos</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/ceph/ceph.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ceph/ceph.html</guid>
      <description>ceph</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/cheatsheets/efficient-command.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/cheatsheets/efficient-command.html</guid>
      <description>高效命令
env os: linux or mac
step .zshrc or .bashrc alias ip=&#39;osascript -e &amp;quot;IPv4 address of (system info)&amp;quot;&#39; # Mac 下命令行查看本机 IP alias cls=&#39;clear&#39; alias ll=&#39;ls -l&#39; alias la=&#39;ls -a&#39; alias vi=&#39;vim&#39; alias javac=&amp;quot;javac -J-Dfile.encoding=utf8&amp;quot; alias grep=&amp;quot;grep --color=auto&amp;quot; alias -s html=mate # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开 alias -s rb=mate # 在命令行直接输入 ruby 文件，会在 TextMate 中打开 alias -s py=vi # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似 alias -s js=vi alias -s c=vi alias -s java=vi alias -s txt=vi alias -s gz=&#39;tar -xzvf&#39; alias -s tgz=&#39;tar -xzvf&#39; alias -s zip=&#39;unzip&#39; alias -s bz2=&#39;tar -xjvf&#39; # alias cdhome=&#39;cd ~&#39; alias cdroot=&#39;cd /&#39; alias gpull=&#39;git pull&#39; alias gci=&#39;git commit -a&#39; alias gpush=&#39;git push origin HEAD:refs/for/master&#39; alias gst=&#39;git status&#39; alias sublime=&#39;open -a &amp;quot;Sublime Text&amp;quot;&#39; # 加入Sublime Text  ref  https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/chrome/chrome-tools.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/chrome/chrome-tools.html</guid>
      <description>extensions https://www.zhihu.com/question/19594682
vimium</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/chrome/chrome.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/chrome/chrome.html</guid>
      <description>chrome</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/code-analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/code-analysis.html</guid>
      <description>关于 代码 分析，可以看下面网站
https://github.com/mre/awesome-static-analysis https://github.com/vinta/awesome-python#code-analysis https://www.owasp.org/index.php/Source_Code_Analysis_Tools https://lgtm.com/help/lgtm/about-lgtm</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/ddd.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/ddd.html</guid>
      <description>DDD的好书哪家强？ 以前daxnet有个系列博客不错
那个apworks框架原理能吃透就基本完全搞定DDD了，就是可惜是C#</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/dev/programmer-competency-matrix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/dev/programmer-competency-matrix.html</guid>
      <description>programmer-competency-matrix http://www.starling-software.com/employment/programmer-competency-matrix.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/django/django-runserver-https-ssl.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/django/django-runserver-https-ssl.html</guid>
      <description>How can I test https connections with Django as easily as I can non-https connections using &amp;lsquo;runserver&amp;rsquo;?
解决方式1 https://stackoverflow.com/questions/8023126/how-can-i-test-https-connections-with-django-as-easily-as-i-can-non-https-connec/28933593#28933593
解决方式2 Similar to django-sslserver you could use RunServerPlus from django-extensions
It has dependencies on Werkzeug (so you get access to the excellent Werkzeug debugger) and pyOpenSSL (only required for ssl mode) so to install run:
pip install django-extensions Werkzeug pyOpenSSL
Add it to INSTALLED_APPS in your projects settings.py file:
INSTALLED_APPS = ( .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/django/django.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/django/django.html</guid>
      <description>django</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-build-dockerfile-faq.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-build-dockerfile-faq.html</guid>
      <description>error之 /var/lib/dpkg/), are you root? RUN apt-get update apt install curl
报错如下：
 ---&amp;gt; Running in c865716a2694 E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied) E: Unable to lock directory /var/lib/apt/lists/ E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied) E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?  这里已经提示没有权限了，所以这里很可能是在这步操作上，用户切换成非root用户了。
https://stackoverflow.com/questions/32576928/how-to-install-new-packages-into-non-root-docker-container
source 命令 Step 12 : RUN source /usr/local/bin/virtualenvwrapper.sh ---&amp;gt; Running in c13a187261ec /bin/sh: 1: source: not found  遇到source命令，可以使用下面方式</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-with-windows.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-install-with-windows.html</guid>
      <description>win10家庭版安装Docker
https://blog.csdn.net/tidu2chengfo/article/details/84892915
env  os: windows 10 HOME  step 安装前准备 进入任务管理器看虚拟化是否已启用。 如果你满足Docker for Windows的环境条件了，那么首先检查电脑的虚拟化开启了没有：进入任务管理器（ctrl+alt+delete），点击性能-&amp;gt;cpu ,查看虚拟化是否已启用，如果虚拟化是已禁用，那么你需要重启电脑进入bios开启虚拟化（我们的发的笔记本cpu都是支持虚拟化的，重启时进入bios按esc -&amp;gt; 再按f12 -&amp;gt; 去开启虚拟化）
开启虚拟化重启后，进入任务管理器看虚拟化是否已启用。
使用Coreinfo工具软件 (下载地址）来查看电脑是否支持Hyper-V 可以使用Coreinfo工具软件 (下载地址）来查看电脑是否支持Hyper-V，这是微软SysinternalsSuite工具软件套件中的一个，很实用。具体使用方法，把下载好的Coreinfo解压到桌面上，用管理员模式打开PowerShell，输入：.\ Coreinfo.exe -v，将显示你电脑虚拟化的相关信息，当然你已经添加了Hyper-V了，就无需使用这个软件了。下图所示的内容表明笔者电脑的CPU是完全支持Hyper-V的。
Windows 10家庭版 能够安装HYPER-V 其中涉及一个 cmd 文件。也就是把下面的代码，保存到一个 *.cmd 文件中，比如，我保存成 install-hyper-v.cmd 中
pushd &amp;quot;%~dp0&amp;quot; dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &amp;gt;hyper-v.txt for /f %%i in (&#39;findstr /i . hyper-v.txt 2^&amp;gt;nul&#39;) do dism /online /norestart /add-package:&amp;quot;%SystemRoot%\servicing\Packages\%%i&amp;quot; del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL  然后 打开 cmd 命令行，输入 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-save-load.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-save-load.html</guid>
      <description>docker save and docker load https://blog.csdn.net/weixin_36343850/article/details/80553680
docker save vagrant@ubuntu-xenial:~$ docker stop some-redis some-redis vagrant@ubuntu-xenial:~$ docker ps -a | grep some-redis b3e246f35c82 redis:5.0.4 &amp;quot;docker-entrypoint.s…&amp;quot; 2 weeks ago Exited (0) 2 seconds ago some-redis ubuntu-xenial:~$ docker commit some-redis some-redis-save sha256:69ee84b5567bf37f24b81669f7341b6c9730d3a9b78b95d908b22a2cdcc334bd vagrant@ubuntu-xenial:~$ docker images | grep some-redis REPOSITORY TAG IMAGE ID CREATED SIZE some-redis-save latest 69ee84b5567b 9 seconds ago 95MB vagrant@ubuntu-xenial:~$ docker save -o some-redis-save.tar some-redis-save  docker load ubuntu@utuntu:~$ docker load -i .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/docker/docker-use-faq.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/docker/docker-use-faq.html</guid>
      <description>ubuntu@VM-0-12-ubuntu:~$ sudo docker pull tomtsang:ubuntu-desktop-ide Error response from daemon: pull access denied for tomtsang, repository does not exist or may require &#39;docker login&#39; ubuntu@VM-0-12-ubuntu:~$  表示要登录
ubuntu@VM-0-12-ubuntu:~$ sudo docker login Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one. Username: tomtsang Password: Login Succeeded ubuntu@VM-0-12-ubuntu:~$  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/emacs/emacs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/emacs/emacs.html</guid>
      <description>emacs</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/enterprise/enterprise.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/enterprise/enterprise.html</guid>
      <description>enterprise</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/git.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/git.html</guid>
      <description>git</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/git/github.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/git/github.html</guid>
      <description>github</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitbook/gitbook-bookjson.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitbook/gitbook-bookjson.html</guid>
      <description>https://www.cnblogs.com/zhangjk1993/p/5066771.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitbook/gitbook.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitbook/gitbook.html</guid>
      <description>gitbook</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-gitbook.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab-gitbook.html</guid>
      <description>Gitlab 之 Gitbook 自动集成
https://www.loveli.site/2016/07/24/Gitlab%20%E4%B9%8B%20Gitbook%20%E8%87%AA%E5%8A%A8%E9%9B%86%E6%88%90/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/gitlab/gitlab.html</guid>
      <description>gitlab</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/golang/golang.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/golang/golang.html</guid>
      <description>golang</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/hexo/hexo.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hexo/hexo.html</guid>
      <description>hexo</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-build-hugobook-with-theme-hugo-material-docs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo-build-hugobook-with-theme-hugo-material-docs.html</guid>
      <description>使用hugo的hugo-material-docs主题模板来构建书籍
下载仓库 git clone https://github.com/skyao/learning-istio  创建文件夹 mkdir themes public node_modules _book  下载themes 这里应当使用skyao的修改后的themes
# cd themes &amp;amp;&amp;amp; git clone https://github.com/digitalcraftsman/hugo-material-docs git clone https://github.com/skyao/hugo-material-docs themes/hugo-material-docs  增加内容  删除原content下内容 增加 _index.md, index.md 等内容   .gitignore hugo serve git 修改 rm -rf .git/ git init git remote add origin XXXXXXXXXXXXX git add -A git commit -m &amp;quot;init&amp;quot; git push origin master  .travis.yml 利用Travis CI和Hugo將Blog自動部署到Github Pages
思路 https://zyfdegh.github.io/post/201705-how-i-setup-hugo/ https://blog.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/hugo/hugo.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/hugo/hugo.html</guid>
      <description>hugo</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/java/ubuntu-install-java-jdk-tomcat.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/java/ubuntu-install-java-jdk-tomcat.html</guid>
      <description>Ubuntu18.04配置Java环境和安装Tomcat的方法（详细） https://blog.csdn.net/qq_31954797/article/details/80149504
env  os: ubuntu 18.04 jdk: jdk1.8.0_72 tomcat: apache-tomcat-9.0.20  两个安装包：JavaJDK，Tomcat 如果说真的是去下载，需要帐户，有了帐户，不一定登录得上。尴尬。
 搜索 oracle 帐户  https://blog.csdn.net/CSDNno/article/details/79397566
下载去吧
 搜索 jdk  https://wiki.jikexueyuan.com/project/linux-in-eye-of-java/JDK-Install.html 提供了一个百度云下载地址
tomcat 地址，wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.7/bin/apache-tomcat-9.0.7.tar.gz ，
也是已经失效了，但是，思路是在的。打开 http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/ ，有 v9.0.19 那就直接把上面的地址改成：
http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.19/bin/apache-tomcat-9.0.19.tar.gz 就可以了。或者按这个地址，找一下，就行了。
配置Javajdk ubuntu@utuntu:~/lcnx/aliyun/env$ cd /home/ubuntu/lcnx/aliyun/env/ ubuntu@utuntu:~/lcnx/aliyun/env$ tar -zxvf ./jdk-8u72-linux-x64.tar.gz ubuntu@utuntu:~/lcnx/aliyun/env$ ln -s ./jdk1.8.0_72/ java ubuntu@utuntu:~/lcnx/aliyun/env$ ls /home/ubuntu/lcnx/aliyun/env/java bin COPYRIGHT db include javafx-src.zip jre lib LICENSE man README.html release src.zip THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt ubuntu@utuntu:~/lcnx/aliyun/env$ sudo vi /etc/profile ubuntu@utuntu:~/lcnx/aliyun/env$ tail -10 /etc/profile LCNX_HOME=/home/ubuntu/lcnx/aliyun/env/ JAVA_HOME=$LCNX_HOME/java JRE_HOME=$JAVA_HOME/jre PATH=$PATH:$JAVA_HOME/bin CLASSPATH=.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/k8s.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/k8s.html</guid>
      <description>kubernetes kubernetes对象 pod kubernetes的最小单位，共享网络和存储
pod中多个container通过localhost进行通信
通常情况下pod不会运行一个应用的多个实例
previleged：特权模式，容器内可以获得等同容器外进程的权限
pod状态  pending：pod已在kube API中创建，但还在准备阶段（拉取镜像、启动） running：pod已正产运行 successed：pod已运行结束并成功推出，不再重启 failed：pod中有容器异常终止 unknown：因为一些原因无法获知pod状态  init容器 pod启动过程中， init容器会按顺序依次启动，并且只有在一个init容器启动并成功退出后，才会启动下一个容器；如果启动失败，则按照restartPolicy规则重启
只有在所有init容器正常退出后，pod才会变成ready
apiVersion: v1 kind: Pod metadata: name: myapp-pod labels: app: myapp spec: containers: - name: myapp-container image: busybox command: [&#39;sh&#39;, &#39;-c&#39;, &#39;echo The app is running! &amp;amp;&amp;amp; sleep 3600&#39;] initContainers: - name: init-myservice image: busybox command: [&#39;sh&#39;, &#39;-c&#39;, &#39;until nslookup myservice; do echo waiting for myservice; sleep 2; done;&#39;] - name: init-mydb image: busybox command: [&#39;sh&#39;, &#39;-c&#39;, &#39;until nslookup mydb; do echo waiting for mydb; sleep 2; done;&#39;]  pause容器  在pod中担任命名空间共享的基础 启用pid命名空间，开启init进程  pause容器启动后，创建一个命名空间，pod中其他应用通过加入相同的命名空间获得共享的网络和存储</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.html</guid>
      <description>kubernetes核心原理 kubernetes API 提供各种资源对象（Pod、RC、Service、deployment、HPA、PV等等的）增删改查及watch等REST接口，成为集群内各个功能模块之间的数据交互和通信的中心枢纽，是整个系统的数据总线和数据中心。
 集群管理的API入口 是资源配额控制的入口 提供了完备的集群安全机制  集群功能模块之间的通信 集群所有模块都只和kubeAPI通信，不直接操作etcd数据库
如kubelet：kubelet每个一个周期就与api通信报告自身状态，api收到信息后，将节点状态存入etcd中；kubelet通过watch api监听pod信息，如果坚挺到新的pod副本被调度到本节点，则执行pod相应的创建和启动逻辑。删除亦如此
一个完整的pod创建过程
 kubectl创建一个pod，将pod信息传递给api api将pod信息写入etcd kube-controller-maneger通过api watch接口实时监控pod变化信息，做相关操作 kube-schduler与api交互，监控到pod新建信息，检索符合pod要求的node列表，开始执行pod调度逻辑，将pod绑定到目标节点 kubelet与API交互，检测到pod创建信息，开始创建pod  Controller Manager 负责集群内node、pod、endpoint、namespace、serviceaccount、资源配额等管理，当某个node宕机时，controller manager会及时发现故障并执行自动化修复流程
 ReplicationController  控制pod副本数量符合预期 通过调整spec.replicas来实现系统扩容和缩容 实现滚动升级  NodeController  设置CIDR，防止节点间CIDR冲突 逐个读取节点信息，实时修改nodeStatusMap，状态没变化则修改nodestatusmap的时间，否则修改nodestatusmap的信息  ResourceQuotaController NamespaceController ServiceAccountController TokenController ServiceController EndpointController  controller通过api实施监控整个集群里的每个资源对象的当前状态，当发生故障时会尝试将系统修复至期望状态
Scheduler 将待调度的pod按照特定的调度算法和调度策略绑定到集群中的某个特定的node，并将绑定信息写入etcd。
默认调度流程分如下两步：
 预选调度过程，便利所有目标node，筛选出符合要求的候选节点 确定最优节点，在第一步的基础上，采用优选策略计算出每一个候选节点的积分，积分最高者胜出  预选调度策略 NoDiskConflict 读取备选pod的所有volume信息（Pod.Spec.Volumes），如果volume是GCE或者AWS，且所要调度的节点上存在已挂载相同volume的pod，则存在磁盘冲突，不适合备选pod
PodFitsResources 检测备选pod和备选node是否存在资源需求冲突
PodSelectorMatches 判断备选node是否包含备选pod的标签指定的标签（spec.nodeSelector）
PodFitsHost 判断Pod的spec.nodeName所指定的节点名称是否和备选节点的名称是否一致
CheckNodeLablePresence scheduler会通过RegisterCustomfitPredicate注册该策略，判定判断策略列出的标签存在时是否选择该备选节点
如果presence为false，存在标签时为false
如果presence为true，存在标签使为true
CheckServiceAffinity PodFitsPorts 判断备选pod所用的端口列表是否在备选节点被占用</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/notes.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/notes.html</guid>
      <description> kubernetes权威指南读书笔记 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/pod%E8%AF%A6%E8%A7%A3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/pod%E8%AF%A6%E8%A7%A3.html</guid>
      <description>pod详解 pod配置文件示例 # API版本 apiVersion: v1 # 控制器类型 kind: pod # 元数据 metadata: # pod名 name: string # pod所属的命名空间 namespace: string # pod的label键值对，列表 labels: - name: string # 自定义注解键值对，列表 annotations: - name: string # pod详细定义 spec: # 容器列表 containers: # 第1个容器名称 - name: string # 容器镜像 image: string # 镜像拉取的策略，always每次都重新下载镜像；IfNotPresent如果本地有就用本地，没有时下载镜像；never只使用本地镜像 imagePullPolicy: [ Always | Never | IfNotPresent ] # 容器启动命令，不指定则使用镜像打包是使用的启动命令 command: [string] # 启动参数 args: [string] # 容器工作目录 workingDir: string # 容器存储卷配置列表 volumeMounts: # 卷1 - name: string # 挂载的容器目录 mountPath: string # 是否只读，默认为读写 readonly: boolean # 容器需要暴露的端口列表 ports: # 第一个端口配置 - name: string # 容器监听的端口 containerPort: int # 容器所在node需要监听的端口，默认与containerPort相同，设置后，同一node不可以存在多副本 hostPort: int # 端口协议，TCP/UDP protocol: string # 容器的环境变量，列表 env: # 第一个环境变量，变量名和值 - name: string value: string # 容器资源配置 resources: # 资源限制 limits: cpu: string memory: string # 资源请求 requests: cpu: string memory: string # 容器存活探针 livenessProbe: # 执行命令检测是否存活 exec: command: [string] # 发起HTTP请求检测是否存活 httpGet: path: string port: number host: string scheme: string httpHeaders: - name: string value: string # 检测端口监听 tcpSocket: port: number initialDelaySeconds: 0 timeoutSeconds: 0 periodSeconds: 0 successThreshould: 0 failureThreshould: 0 securityContext: privileged: false # 重启策略 restartPolicy: [ Always | Never | Onfailure ] # 选择启动pod的node标签 nodeSelector: object # imagePullsecrets: - name: string # hostNetwork: false # pod共享存储配置，列表 volumes: - name: string # emptyDir模式，占用内存，跟随pod生命周期 emptyDir: {} # node本地路径 hostPath: path: string # 类型为secret的存储卷，表示挂载集群预定义的secret对象到容器内部 secret: secretName: string items: - key: string path: string # configMap configMap: name: string items: - key: string path: string  pod基本用法  与docker一样，前台执行（后台nohup执行后，pod认为nohup执行结束，会关闭pod，若定义了rc则无限重启）,无法前台的应用可以使用supervisor 紧耦合的应用建议放置在同一个pod 同一pod的容器可以通过localhost通信  静态pod 由kubelet运行在特定node上的pod，不受API管理，无法与RC、deployment、daemonset关联</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/service%E8%AF%A6%E8%A7%A3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/service%E8%AF%A6%E8%A7%A3.html</guid>
      <description>service详解 service 配置文件详解 # 版本 apiVersion: v1 # 类型service kind: Service # 元数据 metadata: # service name name: string # 所属namespace namespace: string # 标签键值对，列表 labels: - name: string # 注解 annotations: - name: string # 详解 spec: # pod选择的标签列表 selector: [] # service类型，指定service访问类型，默认clusterIP，还有NodePort(直接采用宿主机IP+端口)，LoadBalance（指定外部负载器的IP地址，并同时定义nodePort和clusterIP） type: string # service的cluster IP clusterIP: string sessionsAffinity: 是否支持session # 端口配置 ports: - name: string protocol: string port: int # pod端口 targetPort: int # 宿主机端口 nodePort: int # 当spec.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E4%BC%81%E4%B8%9A%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E4%BC%81%E4%B8%9A%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86.html</guid>
      <description>企业实践整理 资源管理 计算资源管理 多集群管理 ##### federation
资源分区管理 ##### namespace
实现逻辑隔离，默认权限下不可跨namespace访问资源
namespace可以看做一级域名，不同的namespace下解析各自的service（search domain）
/ # cat /etc/resolv.conf nameserver 10.254.0.2 search default.svc.cluster.local. svc.cluster.local. cluster.local. options ndots:5  ##### node调度
#### 资源配额和资源限制
 pod：limit，request，limitrange namespace：ResourceQuota  #### service端口管理
   namespace service name service IP NodePort     default webservice1 10.1.1.1 8089   partition1 webservice1 10.1.1.2 8090    外部服务可以作为虚拟service纳入kubernetes集群，不设置selector，统一管理
网络资源管理 flannel  VxLAN 对数据进行二次封装
 DUP</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E5%9F%BA%E4%BA%8ERBAC%E5%AE%9E%E7%8E%B0dashboard%E5%8F%AA%E8%AF%BB-view%E6%9D%83%E9%99%90.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E5%9F%BA%E4%BA%8ERBAC%E5%AE%9E%E7%8E%B0dashboard%E5%8F%AA%E8%AF%BB-view%E6%9D%83%E9%99%90.html</guid>
      <description>基于RBAC实现dashboard只读——view权限 只是简单利用默认的clusterrole - view实现了只读所有namespace下的对象(除去secret、role、rolebinding)，不支持读取集群信息，后期深入了解resource后再重新梳理role和rule
kind: ServiceAccount apiVersion: v1 metadata: name: view namespace: kube-system --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: dashboard-dev-rolebinding subjects: - kind: ServiceAccount name: view namespace: kube-system roleRef: kind: ClusterRole name: view apiGroup: rbac.authorization.k8s.io  使用默认的clusterrole：view(Allows read-only access to see most objects in a namespace. It does not allow viewing roles or rolebindings. It does not allow viewing secrets, since those are escalating. )
https://kubernetes.io/docs/reference/access-authn-authz/rbac/
拿token
kubectl describe secret -n kube-system `kubectl describe sa view -n kube-system | grep &amp;quot;Mountable secrets&amp;quot; | awk &#39;{print $3}&#39;` | grep -E ^token | awk &#39;{print $2}&#39;  登录dashboard即可</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html</guid>
      <description>基础概念 基本组件 master  kubernetes API server：集群的控制入口，提供rest接口，对集群进行增删查改 kubernetes Controller Manager：管理集群资源对象，rc，service，deployment等等对象 kubernetes Scheduler：集群资源调度（Pod），建立相应任务，比如讲某个pod通过算法指定到某个node etcd：存储集群信息，与kubenetes API server进行交互  node  kubelet：负责启停pod，并与API server通信 kube-proxy：实现service通信和负载 docker engine：docker引擎，负责容器创建（也可以是其他的容器引擎）  ## 基本术语
pod pod是kubernetes的最小单元
每个pod都有pause容器，用来解决pod网络、存储资源共享问题，
pod内部通过localhost通信，pod与pod通过pause的IP通信
两种类型
 普通pod，etcd中存储相关信息，受API server管理，可以运行在集群中任意node
 静态pod（static pod），etcd中不存在pod的任何信息，不受API server管理，只运行在特定的node上
  label key:value格式，对不同的资源对象，根据不同的场景打上相应的label，可以打任意个label
RC（replicas controller） 实现pod多副本，高可用
API接收到RC创建请求后，controller manager就会定期检查pod副本数是否匹配RC，发现pod数据异常就会通知scheduler，scheduler通知kubelet，增删pod
apiVersion: v1 #api版本 kind: ReplicationController # 类型 rc metadata: # 元数据 name: nginx # RC名称 nginx spec: # 详细信息 replicas: 3 # 期望的副本数，3个 selector: # 选择pod的label，app=nginx app: nginx template: # pod模板 metadata: # 元数据 name: nginx # pod名称 nginx labels: # pod标签 app=nginx app: nginx spec: # 详细信息 containers: - name: nginx # 容器1 image: nginx # docker镜像 ports: # 容器端口 80 - containerPort: 80  命令行修改RC副本数量</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86.html</guid>
      <description>日志收集 翻译自k8s官方文档：https://kubernetes.io/docs/concepts/cluster-administration/logging/
应用和系统日志可以帮助我们理解我们的集群发生了什么。对于排插问题和监控集群活动也非常有用。大多数应用都有某种日志机制；同样的，大部分容器引擎设计时也支持多种日志记录。对于容器应用，最容易并且最受欢迎的记录方式是写标准输出和标准错误输出。
然而，容器引擎原生的方法通常不足以完全的解决日志记录问题。比如，如果container故障，或者pod移除，或者node不可用，你仍然希望接收应用的日志。因此，日志应该有不依赖与node、pod、或者container的生命周期和独立存储。这个概念被称之为*cluster-level-logging* *cluster-level-logging* 要求一个独立的后台去存储，分析并且查询日志。k8s提供非远程的存储解决方案给日志数据，你可以集群很多已经存在的日志记录方案在k8s集群
## Basic logging in Kubernetes
在这个部分，你可以看到一些*Basic logging in Kubernetes*的例子：输出数据到stdout，这个实力用一个pod指定一个container每秒一次输出一些文本到stdout。
apiVersion: v1 kind: Pod metadata: name: counter spec: containers: - name: count image: busybox args: [/bin/sh, -c, &#39;i=0; while true; do echo &amp;quot;$i: $(date)&amp;quot;; i=$((i+1)); sleep 1; done&#39;]  启动pod后，通过kubectl logs获取日志信息
$ kubectl logs counter 0: Mon Jan 1 00:00:00 UTC 2001 1: Mon Jan 1 00:00:01 UTC 2001 2: Mon Jan 1 00:00:02 UTC 2001 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/kubernetes/%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.html</guid>
      <description>集群安全机制  挨批server的认证授权 保证容器与其所在的宿主机的隔离 限制容器给基础设施及其他容器带来消极影响的能力 最小权限原则——合理限制所有组件的权限 划分普通用户和管理员的角色 明确组件间边界的划分 在必要的时候云讯将管理员权限付给普通用户 允许拥有secret数据的应用在集群中运行  APIserver认证 所有资源的访问都是通过APIserver的REST API实现的，所以集群安全的关键点在于如何识别并认证客户端身份，以及访问权限控制
三种级别的客户端身份认证方式
 HTTPS证书双向认证  通过CA根证书签发服务器证书，客户端证书，客户端请求服务器时互相验证对方的证书
 HTTP token认证  私钥签发一个很长的特殊编码方式且难以模仿的字符串，HTTP访问时在header里携带token
 HTTPbase认证  HTTP基础认证，将用户名明码放在request中的header authorization域里发送给服务器
APIserver授权  AlwaysDeny 默认拒绝所有
 AlwaysAllow 默认允许所有且不需要授权
 ABAC attribute-base access control 基于属性的访问控制
 用户名 是否是只读请求 被访问的是哪一类资源 被访问对象所属的namespace   使用abac需要在授权文件中写入json格式的访问策略对象
{&amp;quot;user&amp;quot;:&amp;quot;alice&amp;quot;} # 允许Alice做所有事情 {&amp;quot;user&amp;quot;:&amp;quot;kubelet&amp;quot;,&amp;quot;resource&amp;quot;:&amp;quot;pods&amp;quot;,&amp;quot;readonly&amp;quot;:&amp;quot;true&amp;quot;} # 允许kubelet只读pod {&amp;quot;user&amp;quot;:&amp;quot;bob&amp;quot;,&amp;quot;resource&amp;quot;:&amp;quot;pods&amp;quot;,&amp;quot;readonly&amp;quot;:&amp;quot;true&amp;quot;,&amp;quot;ns&amp;quot;:&amp;quot;myNamespace&amp;quot;} # 允许Bob只读myNamespace的pod  客户端发起APIserver调用，先进行用户认证，再执行鉴权
admission control准入控制？？ ServiceAccount 用于pod访问APIserver时的身份认证
客户端访问APIserver时需要对客户端进行身份认证
pod中的客户端访问apiserver时是以service方式访问kubernetes这个service
service account就是pod访问kubernetesAPI时的认证机制，访问的时候，在header中传递一个token</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/delete-end-of-line-when-unix-format.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/delete-end-of-line-when-unix-format.html</guid>
      <description>Linux下删除^M文件的方法 Unix系统里，每行结尾只有“&amp;lt;换行&amp;gt;”，即“\n”；Windows系统里面，每行结尾是“&amp;lt;换行&amp;gt;&amp;lt;回车&amp;gt;”，即“\n\r”；Mac系统里，每行结尾是“&amp;lt;回车&amp;gt;”。
1. 问题描述： 在windows下写的文件上传到Linux服务器之后,文件中多出了很多^M符号
2. 原因分析： Linux和windows的文本中，对换行方式处理不同：
&#39;\n&#39; 10 换行（newline） &#39;\r&#39; 13 回车（return）  | 系统 | 换行方式 | |&amp;mdash;&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:| | Windows | 结尾是&amp;lt;换行&amp;gt;&amp;lt;回车&amp;gt;,即“\n\r”| |linux/unix | 结尾是&amp;lt;换行&amp;gt;,即 “\n” | | Mac | 结尾是&amp;lt;回车&amp;gt;,即“\r” |
所以windows下的文件，在Linux中会有^M，即回车符号
参考：回车符和换行符的区别
3.解决办法： 解决办法主要以下几个方案：
注意： ^M要用Ctrl+v，&amp;lt;回车&amp;gt;代替
| 命令 |
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| |1. vim 中使用替换命令：:%s/^M//g | |2. 使用sed:sed &#39;s/^M//&#39; filename &amp;gt; newfile | |3. 使用tr删除“\r”：tr -d &amp;quot;\r&amp;quot; filename | |4. 使用dos2unix命令：dos2unix filename | |5. 在vim下：:set ff = unix（把dos文件类型变为unix）|</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/https%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/https%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91.html</guid>
      <description>https认证逻辑 https://blog.csdn.net/duanbokan/article/details/50847612 写的很好
HTTP：明文传输所有数据，数据容易被篡改（运营商流量劫持）
HTTPS单向认证：最常见的HTTP认证方式，客户端只需要验证服务器传输的证书是否为CA认证中心签发的有效证书，通过后开始传输对等秘钥并使用对等秘钥加密数据
HTTPS双向认证：客户端验证服务器的证书后发送自己的证书给服务器验证，两次验证通过后才传输对等秘钥，一般用于安全性要求较高的场景（银行、金融）</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux-cp-exclude-dir-or-exclude-file.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux-cp-exclude-dir-or-exclude-file.html</guid>
      <description>在linux中，如果你想cp一个文件夹，但是，又不想cp此文件夹下的某些文件或某些文件夹，则请往下看。
step 方法一：cp &amp;amp; ls &amp;amp; grep 此方法，最好，简单直接。主要就是依赖grep去除
cd spacemacs-private/ &amp;amp;&amp;amp; cp -rf `ls -a . | grep -E -v &amp;quot;^(.|..|.git|.gitignore)$&amp;quot;` ../../../submodule/test/  方法二：cp &amp;amp; find 说明：/home目录里面有data目录，data目录里面有a、b、c、d、e五个目录，现在要把data目录里面除过e目录之外的所有目录拷贝到/bak目录中
终端命令行下执行以下命令
cp -R `find /home/data -type d -path /home/data/e -prune -o -print | sed 1d ` /bak  脚本实现 脚本存放路径/home/osyunwei.sh
$ cat /home/osyunwei.sh #编辑脚本，添加下面的代码 #!/bin/sh cp -R `find /home/data -type d -path /home/data/e -prune -o -print | sed 1d ` /bak $ chmod +x /home/osyunwei.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/linux.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/linux.html</guid>
      <description> Linux </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login-specify-idrsa.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/linux/ssh/ssh-login-specify-idrsa.html</guid>
      <description>今天在服务器上配置了自己电脑的public key，但是还是不能直接免密码登录，
原因是
ssh 对目录的权限有要求，代码中要设置下新生成的config文件权限才行。
~目录权限是750， ~/.ssh 的是700， ~/.ssh/* 的是600， ~/.ssh/config 是700
-rw-rw-r-- 1 webuser webuser 396 Feb 19 04:20 authorized_keys $chmod 600 .ssh/authorized_keys -rw------- 1 webuser webuser 396 Feb 19 04:20 authorized_keys  还有一次是，我死活登录不上 ubuntu@tencent-cloud 。 最后通过web连接登录，然后，机器上用ubuntu用户ssh localhost都登录不了，那就说明一定是权限问题了。 一看，原来，整个文件夹/home/ubuntu/ 的权限被更改成 tom:tom 了。那当然进不来了。所以这时：
sudo chown ubuntu:ubuntu /home/ubuntu/  这样，才能ssh 登录正常。
ref:  https://blog.csdn.net/shiralwz/article/details/50697207
  假如在生成密钥对的时候指定了其他文件名（或者需要控制N台机器，此时你会生成多对密钥），则需要使用参数-i指定私钥文件
$ ssh ubuntu@192.68.0.11 -i ./id_rsa Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-91-generic x86_64) * Documentation: https://help.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-navicat-mysql-61-error-code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-navicat-mysql-61-error-code.html</guid>
      <description> mac 本机安装 mysql8.0 后，navicat 连接 mysql 后报 61 错误码。怎么办？
env mac下mysql无法开启或者关闭
step 在terminal中查看mysql的所有进程：ps aux |grep mysq*
查找到进程编号，使用kill ****关闭进程，如果没有权限在前面添加sudo，完成！
第一步：
点击系统偏好设置-&amp;gt;最下边点MySQL，在弹出页面中，关闭服务
第二步：
进入终端输入：cd /usr/local/mysql/bin/ 回车后 登录管理员权限 sudo su 回车后输入以下命令来禁止mysql验证功能 ./mysqld_safe &amp;ndash;skip-grant-tables &amp;amp; 回车后mysql会自动重启（偏好设置中mysql的状态会变成running）
第三步：
输入命令 ./mysql 回车后，输入命令 FLUSH PRIVILEGES; 回车后，输入命令 SET PASSWORD FOR &amp;lsquo;root&amp;rsquo;@&amp;lsquo;localhost&amp;rsquo; = PASSWORD(&amp;lsquo;你的新密码&amp;rsquo;);
ref  https://blog.csdn.net/a787188834/article/details/76152735 https://blog.csdn.net/wujunwen/article/details/52039697  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/macos/mac-tools.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/macos/mac-tools.html</guid>
      <description>dash</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mariadb/mariadb.html</guid>
      <description>mariadb</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/convert-html-to-markdown.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/convert-html-to-markdown.html</guid>
      <description> Convert HTML to Markdown
step method 1, online  http://domchristie.github.io/turndown/ https://tool.lu/markdown/  nodejs turndown Convert HTML to Markdown with Node.js Start by installing Turndown:
 https://davidwalsh.name/convert-html-markdown  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/markdown/convert-markdown-to-org-with-pandoc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/markdown/convert-markdown-to-org-with-pandoc.html</guid>
      <description> convert-markdown-to-org-with-pandoc
pandoc 检查是否有 pandoc 命令
install docker pull dalibo/pandocker alias pandoc=&amp;quot;docker run --rm -u `id -u`:`id -g` -v `pwd`:/pandoc dalibo/pandocker&amp;quot;  CRLF or LF 查看文件类型 使用vim打开文件，输入:set ff?。根据返回结果可以文件类型
 https://www.cnblogs.com/jiangz/p/4231279.html  LR 把文档全转成 unix end-of-line
dos2unix ./*/*.md   https://github.com/greenrobot/greenDAO/issues/71  to org docker run --rm -u `id -u`:`id -g` -v `pwd`:/pandoc dalibo/pandocker README.md -o README.org  或者
pandoc README.md -o README.org  ref  https://pandoc.org/demos.html https://hub.docker.com/r/dalibo/pandocker  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mongodb/mongodb.html</guid>
      <description>mongodb</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/elk/elk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/elk/elk.html</guid>
      <description> ELK </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/monitor.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/monitor.html</guid>
      <description> 监控系统 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/functions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/functions.html</guid>
      <description>function函数 [TOC]
abs 求绝对值
absent 检测是否为空
ceil 四舍五入
changes 一定时间范围内改变的次数
clamp_max 设置上限，最大值不大于设置的上限
clamp_max(v instant-vector,max scalar)  clamp_min 设置下限，最小值不小于设置的下限
clamp_min(v instant-vector,min scalar)  day_of_month day_of_week days_in_month 每个月的天数 28-31
delta 计算区间开始时与当前值的差值
delta(cpu_temp_celsius{host=&amp;quot;zeus&amp;quot;}[2h])  deriv deriv（v range-vector）使用简单线性回归计算范围向量v中时间序列的每秒导数。
仅限于gauge数据
exp floor 取整
0.6 &amp;ndash;&amp;gt; 0
histogram_quantile holt_winters hour 返回小时数，0-23
idelta increase 一定时间内的增长量，比如CPU时间，访问量(counter数据类型)
irate 一定时间区间内，两个相邻的值之间的变化率（对应整体的变化量）
label_join 添加标签
label——replace 替换标签
ln 自然对数
log10 十进制对数
minute 返回分钟（0-59）
mouth 返回月份（1-12）
predict_linear 简单线性回归
rate 计算一段时间内美妙的平均增长率（与irate类似但又不同）
resets 返回一定范围内呗reset的次数，仅适用count
resets(up[1y]) 查看一年内exporter重启次数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/prometheus.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/prometheus.html</guid>
      <description> prometheus </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/storage.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/prometheus/storage.html</guid>
      <description>storage 本地存储 每两个小时的数据存储在一个目录中，包含一个或者多个块文件，里面也有这个时间区间的所有时间序列样本，以及元数据文件和索引文件（通过metric name和label索引时间序列）。当前时间段的数据并没有直接持久化到本地，而是存放在内存中。有一个WAL（write-ahead-log）预写日志机制，当Prometheus服务从崩溃中重启时可以重放WAL日志。当时间序列数据通过API被删除时，只是把删除记录保存在单独的逻辑删除文件中，而不是立即从块文件中删除数据
最初的两小时一个的时间序列会在后期被不断压缩并整合成一个长时间序列（类似zabbix保留趋势数据的方式？减小时间精度之类）
参数  --storage.tsdb.path: 数据存储目录，默认为data/ --storage.tsdb.retention：数据保留时间，默认为15d  远程存储 本地存储不支持多节点
http2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/zabbix/python%E5%AE%9E%E7%8E%B0zabbix%E5%91%8A%E8%AD%A6%E6%8E%A8%E9%80%81%E9%92%89%E9%92%89.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/zabbix/python%E5%AE%9E%E7%8E%B0zabbix%E5%91%8A%E8%AD%A6%E6%8E%A8%E9%80%81%E9%92%89%E9%92%89.html</guid>
      <description>python实现zabbix告警推送钉钉 写了一个简单的python脚本，用来推送zabbix告警到钉钉机器人，推送格式为markdown，有需要的可以自己修改markdown的格式及推送的值（zabbix宏）
环境如下，理论上zabbix版本不影响，可以看看官方宏定义是否有区别
 python 3 zabbix 3.4.2  zabbix宏官方文档：https://www.zabbix.com/documentation/3.4/manual/appendix/macros/supported_by_location
配置 配置钉钉自定义机器人  官方文档：https://open-doc.dingtalk.com/docs/doc.htm?treeId=257&amp;amp;articleId=105735&amp;amp;docType=1  编写zabbix告警脚本并置于alertscripts路径下 [itservice@zabbix alertscripts]$ cat /usr/lib/zabbix/alertscripts/alert_for_zabbix_by_dingding.py #!/usr/bin/env python3 # encoding: utf-8 # author: huangwj # mail: huangwjwork@gmail.com # bolg: huangwj.app # csdn: http://blog.csdn.net/u010871982 # github: https://github.com/huangwjwork # file: alert_for_zabbix_by_dingding.py # time: 2018/5/11 14:31 &#39;&#39;&#39; 本程序由huangwjwork开发,一切最终解释权归于huangwjwork. 本程序为开源,只用于技术交流,只供开发者参考与学习. 不得用于违反法律以及未经许可不得用于商业.保留其追责权利. 本程序不涉及任何违法敏感因素,如有人拿程序改造成违法工具,将与本程序开发者无关. 勇于开源,请勿滥用.内部学习交流,请勿传播.违反者造成相关法律事故,自行承担刑事责任. &#39;&#39;&#39; import sys import getopt import requests import json import traceback try: opts,args = getopt.getopt(sys.argv[1:],shortopts=&#39;&#39;,longopts=[&#39;webhook_url=&#39;,&#39;webhook_title=&#39;,&#39;alert_message=&#39;]) for opt,value in opts: if opt == &#39;--webhook_url&#39;: webhook_url = value elif opt == &#39;--webhook_title&#39;: webhook_title = value elif opt == &#39;--alert_message&#39;: alert_message = value webhook_header = { &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;, &amp;quot;charset&amp;quot;: &amp;quot;utf-8&amp;quot; } webhook_message = { &amp;quot;msgtype&amp;quot;: &amp;quot;markdown&amp;quot;, &amp;quot;markdown&amp;quot;: { &amp;quot;title&amp;quot;: webhook_title, &amp;quot;text&amp;quot;: alert_message } } sendData = json.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/monitor/zabbix/zabbix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/monitor/zabbix/zabbix.html</guid>
      <description> zabbix </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/mysql/mysql.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/mysql/mysql.html</guid>
      <description>mysql</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/expressvpn-open-app-not-use-proxy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/expressvpn-open-app-not-use-proxy.html</guid>
      <description>如何在打开VPN时正常访问国内网站 如何在打开VPN时正常访问国内网站
把 firefox 加入，让其不再使用 expressvpn . 想听歌时，用firefox打开 https://y.qq.com/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/network.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/network.html</guid>
      <description>network</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/network/privoxy-socks-to-https.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/network/privoxy-socks-to-https.html</guid>
      <description>linux下使用privoxy将socks转为http代理
https://www.cnblogs.com/liuxuzzz/p/5324749.html
privoxy有将socks代理转为http代理的功能。
1.开启shadowsocks，socks代理地址为127.0.0.1:1080。
2.安装privoxy。
$ sudo apt-get install privoxy
3.更改provoxy配置，位置在“/etc/privoxy/config”。
$ sudo vim /etc/privoxy/config
在里面添加一条：
在 froward-socks4下面添加一条socks5的，因为shadowsocks为socks5， 地址是127.0.0.1:1080。注意他们最后有一个“.” forward-socks4 / socks-gw.example.com:1080 . forward-socks5 / 127.0.0.1:1080 .
下面还存在以下一条配置，表示privoxy监听本机8118端口， 把它作为http代理，代理地址为 http://localhost.8118/ 。 可以把地址改为 0.0.0.0:8118，表示外网也可以通过本机IP作http代理。 这样，你的外网IP为1.2.3.4，别人就可以设置 http://1.2.3.4:8118/ 为http代理。 listen-address localhost:8118
4.然后重启privoxy。
$ sudo systemctl restart privoxy
5.现在你就可以使用http代理了，如果你要给系统设置http代理，就在~/.bashrc里添加一条http_proxy配置。
$ vim ~/.bashrc
添加：
export http_proxy=http://127.0.0.1:8118/
然后使用source是它立刻生效。
$ source ~/.bashrc</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-bug-fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-bug-fix.html</guid>
      <description>记一次nginx的漏洞补救
env 安全报告中提示 nginx 安全漏洞（CVE-2018-16843） ,百度，nginx CVE-2018-16843
 nginx:  version: 1.13.0 directory:  源码： /usr/svc/nginx-1.13.0 编译后：/opt/local/nginx   os: solaris10  step 找版本 https://cloud.tencent.com/info/71abe1e1ae97740ce376d8b46f894dbd.html
提示，要升级到 1.14.1 。去 github.com 查一下 nginx的releases.
https://github.com/nginx/nginx/releases
果然，
on 6 Nov 2018 release-1.14.1  那我们快速安装 1.14.1 或以上版本吧。
不编译 试图躲过编译安装
因为是 solaris10, 机器上，没有 c 编译器，所以，看能不能躲过编译安装
https://www.opencsw.org/packages/CSWnginx/
pkgadd -d http://get.opencsw.org/now /opt/csw/bin/pkgutil -U /opt/csw/bin/pkgutil -i nginx /opt/csw/bin/pkgutil -y -i nginx /usr/sbin/pkgchk -L CSWnginx # list files  /opt/csw/bin/pkgutil -i nginx 是为了查看版本号，看是不是我们想要的版本，如果不是，则不安装。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-fix-diff-path-diff-cookie-path.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx-fix-diff-path-diff-cookie-path.html</guid>
      <description>解决同域名不同路径下形成不同session cookie, 从而使得不同的帐户密码登录
targit 我的最终目的是要让
 http://192.168.168.137:8081/ 使用 一个帐号密码(admin:adminsz189)登录 http://192.168.168.137:8081/admin/ 使用 另一个帐号密码(admin:admin)登录  env 参考 解决nginx proxy_pass反向代理cookie,session丢失的问题
为什么cookie 会丢失？ 比如说一个没有经过代理的地址 ： http://127.0.0.1/project cookie_path：/project
如果按照第二种方式代理 那么地址就是 ： http://127.0.0.1/proxy_path cookie_path: /proxy_path
如果cookie_path与地址栏上的path不相符游览器就不会接受这个cookie，自然session就失效了
proxy_cookie_path 的用法 proxy_cookie_path 的作用是用来改变cookie的路径
语法： proxy_cookie_path path replacement; path就是你要替换的路径 replacement 就是要替换的值
详情可以去nginx 官网看看 传送门
下面是可能的三种情况
 host、端口转换，cookie不会丢失   location /project { proxy_pass http://127.0.0.1:8080/project; }   路径也变化，则需要设置cookie的路径转换   location /proxy_path { proxy_pass http://127.0.0.1:8080/project; proxy_cookie_path /project /proxy_path; }   直接代理本地端口   location /proxy_path { proxy_pass http://127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/nginx.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/nginx.html</guid>
      <description>nginx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/Rewrite.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/Rewrite.html</guid>
      <description>Rewrite [TOC]
Upstream命令-负载 upstream upstream name {...} ;  name为服务器组的组名（别名），花括号中可以列出后端服务器组中包含的服务器
默认轮询（Round-Robin），轮流处理请求，如果某个服务器处理时出现错误，则切换下一个服务器，直到所有服务器报错，返回报错内容
server server address [patameters];   address，服务器地址，可以是IP地址，主机名，域名，或者unix Domain Socket  parameters  weight=number，服务器权重，权重值高的优先处理请求 max_fails=number，设置请求失败次数，一定时间范围，服务器请求失败的次数搞过限定值，认为服务器down，默认值为1，设置为0则失效 fail_timeout，设置尝试请求某服务器的时间，即max_fails的事件范围。也用于检查服务器时候有效，如果一台服务器down，则该时间段内不会再次检查服务器状态；默认10Ss backup,标记某个服务器为备用服务器，只有其他服务器down或者busy时才处理客户端请求 down，永久标记服务器为无效，通常与ip_hash配合使用   配置示例：
upstream backend { server backend1.example.com weight=5; server 127.0.0.1:8080 max_fails=3 fail_timeout=30s; server unix:/tmp/backend3; }  ip_hash 基于IP地址将客户端的请求定向到同一台服务器，保证客户端与服务器间会话稳定
局限：
 不能用server中的weight变量一起使用 nginx服务器必须是最前端的服务器，才能获取到客户端真实IP 客户端IP地址必须是C类地址  upstream backend { ip_hash; server myback1.proxy.com; server myback2.proxy.com; }  keepalive keepalive connections;  connections为nginx服务器每个worker process允许该服务器组保持的空闲网络连接数上线，超过后哦，将采用最近最少使用的策略关闭网络连接</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/gzip%E5%8E%8B%E7%BC%A9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/gzip%E5%8E%8B%E7%BC%A9.html</guid>
      <description>gzip压缩 gzip压缩页面需要浏览器和服务器双方支持，即服务器端压缩，浏览器端解压并解析。压缩页面后，传输流量小，传输速度更快
我的配置如下，压缩效果很明显：
gzip on; gzip_comp_level 9; gzip_min_length 1024; gzip_types text/plain application/javascript text/css application/xml application/json;  查看header信息中Content-Encoding: gzip
$ curl -I -H &amp;quot;Accept-Encoding: gzip, deflate&amp;quot; https://huangwj.app/search_index.json % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0HTTP/1.1 200 OK Server: nginx/1.12.2 Date: Tue, 12 Jun 2018 06:28:11 GMT Content-Type: application/json Last-Modified: Mon, 11 Jun 2018 09:24:44 GMT Connection: keep-alive ETag: W/&amp;quot;5b1e3fdc-a2cf6&amp;quot; Content-Encoding: gzip  压缩效果很nice，压缩前search_index.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E5%9F%BA%E7%A1%80.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E5%9F%BA%E7%A1%80.html</guid>
      <description>nginx基础 nginx官网：http://www.nginx.org
nginx wiki：https://www.nginx.com/resources/wiki/
nginx配置文件 nginx.conf示例 # 全局块：默认配置文件到event块之间的内容，主要设置一些影响nginx服务器整体运行的配置命令，包括nginx的用户，用户组，允许生成的worker process数，nginx进程PID存放路径，日志存放路径和类型、配置文件引入 user nobody;	# 用户nobody worker_processes 1;	# error_log logs/error.log; error_log logs/error.log notice; error_log logs/error.log info; pid logs/nginx.pid; # events块：events块涉及的指令主要影响nginx服务器与用户的网络连接，常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同事接受多个网络连接，怄那种时间驱动模型处理连接请求，每个worker process可以同事支持的最大连接数等 events { worker_connections 1024; } # http块是nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。 # http块中可以包含自己的全局快，也可以包含server块，server块中又可以金亦波包含location块，在本书中我们使用&amp;quot;http全局块&amp;quot;来表示http中自己的全局块，即http块中不包含在server块中的部分 # http全局块中可以包含文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单连接请求数上限等 http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39; &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39; &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;; access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 0; keepalive_timeout 65; gzip on; # server块与虚拟主机的概念有密切联系。 # 虚拟主机，又称虚拟服务器、主机空间或者网页空间，他是一种技术，为了节互联网服务器硬件成本而出现。将服务内容逻辑划分为多个服务单位，对外表现为多个服务器，充分利用服务器硬件资源 # server块可以包含多个server块，而每个server块就相当于一台虚拟主机，他内部可有多台主机联合提供服务 server { listen 80; server_name localhost; charset koi8-r; access_log logs/host.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2.html</guid>
      <description>nginx服务器架构初探 模块化结构  核心模块：进程管理、权限控制、错误日志记录 标准HTTP模块：支持NGINX服务器标准HTTP功能 可选HTTP模块：扩展标准的HTTP功能，使其能够处理一些特殊的HTTP请求 邮件服务模块：支持NGINX的邮件服务 第三方模块：扩展NGINX服务器应用  核心模块和标准HTTP模块在NGINX快速编译后就包含在NGINX中
查看NGINX源码包
[root@test nginx-1.14.0]# ll objs/ total 3724 -rw-r--r-- 1 root root 19575 May 22 11:41 autoconf.err -rw-r--r-- 1 root root 39268 May 22 11:41 Makefile -rwxr-xr-x 1 root root 3679067 May 22 11:41 nginx -rw-r--r-- 1 root root 5321 May 22 11:41 nginx.8 -rw-r--r-- 1 root root 6598 May 22 11:41 ngx_auto_config.h -rw-r--r-- 1 root root 657 May 22 11:41 ngx_auto_headers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.html</guid>
      <description>nginx服务器的高级配置 /etc/sysctl.conf  针对IPv4的内核优化 net.core.netdev_max_backlog 队列数据包最大数目，表示每个网络接口接收数据报的速率比内核处理这些包的速率快时，允许发送到队列的数据包的最大数目
系统默认值128，NGINX服务器中定义的NGX_LISTEN_BACKLOG默认为511，需要调整参数
net.core.netdev_max_backlog = 262144  net.core.somaxconn 系统同时发起的TCP连接数，默认值128，可能导致链接超时或者重传问题，可以根据实际需要结合并发请求书来调节
net.core.somaxconn = 262144  net.ipv4.tcp_max_orphans 设置系统中最多允许存在多少TCP套接字不被关联到任何一个用户文件句柄，超过这个数字，米有与用户文件句柄关联的TCP套接字将被立即复位，同时给出警告信息
net.ipv4.tcp_max_orphans = 262144  net.ipv4.tcp_max_syn_backlog 未收到客户端确认信息的连接请求的最大值。大于128MB内存的系统默认值为1024，小内存则是128。可以增大该参数：
net.ipv4.tcp_max_syn_backlog = 262144  net.ipv4.tcp_timestamps 用于设置时间戳，避免序列号的卷绕。赋值为0时表示禁止TCP时间戳的支持。
net.ipv4.tcp_timestamps = 0  net.ipv4.tcp_synack_retries 用于内核放弃TCP连接之前向客户端发送SYN+ACK包的数量。服务器与客户端要通过三次握手建立连接，在第二次握手期间，内核需要发送SYN并附带一个回应前一个SYN的ACK，主要影响这里，建议赋值为1，即内核放弃连接之前发送一次SYN+ACK包：
net.ipv4.tcp_synack_retries = 1  net.ipv4.tcp_syn_retries 与net.ipv4.tcp_synack_retries类似，设置内核放弃建立连接之前发送SYN包的数量，建议1
net.ipv4.tcp_syn_retries = 1  针对CPU的配置优化 worker proceses  用来设置nginx服务的进程数，一般设置为CPU的倍数，我这里配置worker process auto，一个4个CPU线程，会起4个nginx进程
[root@test nginx]# ps -ef | grep nginx | grep -v grep root 1425 1 0 May22 ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E7%BC%93%E5%AD%98.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/nginx%E7%BC%93%E5%AD%98.html</guid>
      <description> nginx缓存 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/notes.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/notes.html</guid>
      <description>nginx学习笔记 参考苗泽nginx高性能web服务器详解，记录学习过程</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/notes/proxy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/notes/proxy.html</guid>
      <description>proxy 反向代理常用命令 proxy_pass  server { location / { proxy_pass http://1.1.1.1:8080; } }  upstream时关于http协议的写法 proxy_pass带协议，则upstream不带协议
upstream api { server 1.1.1.1:8080； server 2.2.2.2:8080; } server { location / { proxy_pass http://api; } }  upstream带协议，则proxy_pass不带协议
upstream api { server http://1.1.1.1:8080； server http://2.2.2.2:8080; } server { location / { proxy_pass api; } }  proxy传递URI注意事项 想要改变URI，则在proxy中配置URI
不想改变URI，则不再proxy中配置URI
server { server_name server location / { proxy_pass http://proxy; # proxy_pass不带URI，则传递原本请求的URI,即访问server/aaa代理为proxy/aaa } location /aaa { proxy_pass http://proxy; # proxy_pass不带URI，则传递URI，即访问server/aaa代理为proxy/aaa } location /aaa { proxy_pass http://proxy/bbb; # proxy_pass带URI，则替换原有URI，访问server/*全部代理为proxy/bbb } location /ccc { proxy_pass http://proxy/; # proxu_pass带URL，则替换原有URI，访问server/*全部代理为proxy/; } }  proxy_hide_header 隐藏头域信息</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nginx/ubuntu-install-nginx.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nginx/ubuntu-install-nginx.html</guid>
      <description>ubuntu 安装 nginx
env aliyun 上面的 nginx配置，放到本地
lan server
 os: ubuntu18.04 ip: 192.168.168.137  aliyun lcnx@iZwz95dxhc92qtibd4f399Z:/alidata/server/nginx/sbin$ ./nginx -V nginx version: nginx/1.6.0 built by gcc 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) TLS SNI support enabled configure arguments: --user=www --group=www --prefix=/alidata/server/nginx --with-http_stub_status_module --without-http-cache --with-http_ssl_module --with-http_gzip_static_module lcnx@iZwz95dxhc92qtibd4f399Z:/alidata/server/nginx/sbin$  lan server 所以，我的编译参数是
ubuntu@utuntu:~/lcnx/aliyun/env/nginx-1.16.0$ --prefix=/home/ubuntu/lcnx/aliyun/env/nginx-1.16.0 --with-http_stub_status_module --without-http-cache --with-http_ssl_module --with-http_gzip_static_module checking for OS + Linux 4.15.0-50-generic x86_64 checking for C compiler ... not found ./configure: error: C compiler cc is not found  所以要安装一下 gcc .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/install-nodejs-with-nvm-ubuntu12.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/install-nodejs-with-nvm-ubuntu12.html</guid>
      <description>使用nvm安装nodejs 在 ubuntu12 下
lcnx@iZwz95dxhc92qtibd4f399Z:~/src/nginx-1.15.12$ nvm install stable v12.0.0 is already installed. node: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.18&#39; not found (required by node) node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.17&#39; not found (required by node) node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.16&#39; not found (required by node) nvm is not compatible with the npm config &amp;quot;prefix&amp;quot; option: currently set to &amp;quot;&amp;quot; Run `nvm use --delete-prefix v12.0.0` to unset it. Creating default alias: default -&amp;gt; stable (-&amp;gt; v12.0.0) lcnx@iZwz95dxhc92qtibd4f399Z:~/src/nginx-1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/nodejs/nodejs.html</guid>
      <description>nodejs</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-cmder.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-cmder.html</guid>
      <description>cmder change default shell https://gist.github.com/nickautomatic/02ccb76292f7f8d9767e
如果输入
&amp;quot;&amp;quot;D:\Program Files\Git\bin\bash.exe&amp;quot; -l -new_console:d:%CMDER_START%&amp;quot;  会每次都提示，好烦。。。
最后的输入是：
&amp;quot;D:\Program Files\Git\bin\bash.exe&amp;quot; -l  基本配置 https://www.jianshu.com/p/979db1a96f6d
cmder快捷键记录 keyboard shortcuts https://www.jianshu.com/p/58a2dbc6aac4
Global Keyboard shortcuts
| 快捷键 | 描述 |
|:&amp;mdash;&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| | Ctrl + ` | Global Summon from taskbar |
| Win + Alt + p | Preferences (Or right click on title bar) |
| Alt + Enter | Fullscreen |
| Ctrl + t | New tab dialog (maybe you want to open cmd as admin?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-gvm.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-gvm.html</guid>
      <description> gvm 安装 go1.5+ 必先 gvm install go1.4 -B ➜ ~ git:(master) ✗ gvm install go1.11.5 Downloading Go source... Installing go1.11.5... * Compiling... /root/.gvm/scripts/install: 行 84: go: 未找到命令 ERROR: Failed to compile. Check the logs at /root/.gvm/logs/go-go1.11.5-compile.log ERROR: Failed to use installed version ➜ ~ git:(master) ✗  参考 https://github.com/moovweb/gvm/issues/302 到 https://github.com/moovweb/gvm#a-note-on-compiling-go-15
gvm install go1.4 -B gvm use go1.4 export GOROOT_BOOTSTRAP=$GOROOT gvm install go1.5  ref  https://github.com/moovweb/gvm#a-note-on-compiling-go-15  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/note/note-about-windows.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/note/note-about-windows.html</guid>
      <description>env  os: win10  windows startup folder Your personal startup folder should be C:\Users&amp;lt;user name&amp;gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The All Users startup folder should be C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup. You can create the folders if they aren&amp;rsquo;t there. Enable viewing of hidden folders to see them.
C:\Users\$username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup  在windows中获取某个进程的具体执行路径 在windows下要获取具体的路径可以使用powershell ，例如我们要查看chrome的执行路径，可以：
 在cmd中这样写：  &amp;gt; powershell &amp;quot;get-process chrome | select-object path&amp;quot;   在powershell中这样写：  &amp;gt; get-process chrome | select-object path  这里展示一个 bash 的执行路径：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/org/org.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/org/org.html</guid>
      <description>org</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/pip-install-memcache.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/pip-install-memcache.html</guid>
      <description>python2 通过 pip 安装 memcache
env os: ubuntu server 16.04 python: 2.7.12
step pip install python-memcached 而不是 pip install memcache
root@ubuntu:~# pip install memcache /usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/__init__.py:83: RequestsDependencyWarning: Old version of cryptography ([1, 2, 3]) may cause slowdown. warnings.warn(warning, RequestsDependencyWarning) DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won&#39;t be maintained after that date. A future version of pip will drop support for Python 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-error-m-bad-interpreter-duplicate.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-error-m-bad-interpreter-duplicate.html</guid>
      <description> /usr/bin/python^M: bad interpreter [duplicate] If you are using Vim, just enter the following command:
:set fileformat=unix  ref  https://stackoverflow.com/questions/9975011/pycharm-usr-bin-pythonm-bad-interpreter  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python-struct-module.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python-struct-module.html</guid>
      <description>python：struct模块的pack、unpack
Python是一门非常简洁的语言，对于数据类型的表示，不像其他语言预定义了许多类型（如：在C#中，光整型就定义了8种）
它只定义了六种基本类型：字符串，整数，浮点数，元组（set），列表（array），字典（key/value）
通过这六种数据类型，我们可以完成大部分工作。但当Python需要通过网络与其他的平台进行交互的时候，必须考虑到将这些数据类型与其他平台或语言之间的类型进行互相转换问题。打个比方：C++写的客户端发送一个int型(4字节)变量的数据到Python写的服务器，Python接收到表示这个整数的4个字节数据，怎么解析成Python认识的整数呢？ Python的标准模块struct就用来解决这个问题。
官网地址： https://docs.python.org/2/library/struct.html
示例 # ref: http://blog.csdn&amp;lt;a href=&amp;quot;http://lib.csdn.net/base/dotnet&amp;quot; class=&#39;replace_word&#39; title=&amp;quot;.NET知识库&amp;quot; target=&#39;_blank&#39; style=&#39;color:#df3434; font-weight:bold;&#39;&amp;gt;.NET&amp;lt;/a&amp;gt;/JGood/archive/2009/06/22/4290158.aspx import struct #pack - unpack print print &#39;===== pack - unpack =====&#39; str = struct.pack(&amp;quot;ii&amp;quot;, 20, 400) print &#39;str:&#39;, str print &#39;len(str):&#39;, len(str) # len(str): 8 a1, a2 = struct.unpack(&amp;quot;ii&amp;quot;, str) print &amp;quot;a1:&amp;quot;, a1 # a1: 20 print &amp;quot;a2:&amp;quot;, a2 # a2: 400 print &#39;struct.calcsize:&#39;, struct.calcsize(&amp;quot;ii&amp;quot;) # struct.calcsize: 8 #unpack print print &#39;===== unpack =====&#39; string = &#39;test astring&#39; format = &#39;5s 4x 3s&#39; print struct.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/python.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/python.html</guid>
      <description>python</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/python/ubuntu-install-pip.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/python/ubuntu-install-pip.html</guid>
      <description>ubuntu 安装 pip
env os: ubuntu server 16.04
step root@ubuntu:~# sudo apt-get install python-pip python-dev build-essential Reading package lists... Done Building dependency tree Reading state information... Done build-essential is already the newest version (12.1ubuntu2). python-dev is already the newest version (2.7.12-1~16.04). The following NEW packages will be installed: python-pip 0 upgraded, 1 newly installed, 0 to remove and 98 not upgraded. Need to get 0 B/144 kB of archives. After this operation, 635 kB of additional disk space will be used.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/qor/qor.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/qor/qor.html</guid>
      <description>qor</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/rancher/rancher.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/rancher/rancher.html</guid>
      <description>rancher</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/redis/redis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/redis/redis.html</guid>
      <description>redis</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/ruby/install-rvm-with-ubuntu.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ruby/install-rvm-with-ubuntu.html</guid>
      <description>install rvm with ubuntu
去 https://github.com/rvm/rvm#installing-rvm
vagrant@ubuntu-xenial:~$ curl -L https://get.rvm.io | bash -s stable % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 194 100 194 0 0 29 0 0:00:06 0:00:06 --:--:-- 48 100 24168 100 24168 0 0 1908 0 0:00:12 0:00:12 --:--:-- 6628 Downloading https://github.com/rvm/rvm/archive/1.29.7.tar.gz Downloading https://github.com/rvm/rvm/releases/download/1.29.7/1.29.7.tar.gz.asc gpg: directory `/home/vagrant/.gnupg&#39; created gpg: new configuration file `/home/vagrant/.gnupg/gpg.conf&#39; created gpg: WARNING: options in `/home/vagrant/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/saleor/saleor.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/saleor/saleor.html</guid>
      <description>saleor</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/scoop/scoop.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/scoop/scoop.html</guid>
      <description>https://scoop.sh/
scoop master = $ scoop list Installed apps: 7zip 19.00 concfg 0.2019.02.21 curl 7.64.0 figlet 1.0-go grep 2.5.4 openssh 7.6p1 pshazz 0.2019.02.04 touch 0.2018.08.04 scoop master = $  command
scoop help scoop install 7zip scoop list scoop search scoop reset ruby  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-faq-is-the-package-name-misspelled.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs-faq-is-the-package-name-misspelled.html</guid>
      <description> spacemacs
安装 Package 失败： Package is unavailable. Is the package name misspelled ? https://emacs-china.org/t/topic/2662/13
我昨天遇到同样问题，参照 这个 issue 24 解决了。方法是打开配置文件（SPC f e d）找到 dotspacemacs-elpa-timeout 5 这一行改成 dotspacemacs-elpa-timeout 300 （或任何比较大的数），重启。不知道能不能帮到你。
nyan-mode Invalid image type &amp;lsquo;xpm&amp;rsquo; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/spacemacs.html</guid>
      <description>spacemacs</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/ubuntu-spacemacs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/ubuntu-spacemacs.html</guid>
      <description>spacemacs 在ubuntu下的配置思考
私人配置 环境1 os: wsl-ubuntu16 emacs: 26.2 spacemacs:
环境2 操作系统: Ubuntu 16.04 TLS * Emacs版本: Emacs24.5.1
Emacs版本: Emacs25.2.2
问题  启动后，j,k 上下移动行的时候，行会移动   emacs 高手配置
 spacemacs 高手配置
 spacemacs ubuntu 配置 https://github.com/lsytj0413/spacemacs-private
 spacemacs 与 docker https://github.com/JAremko/spacemacs
  sudo docker run -it &amp;ndash;rm -v $(&amp;lsquo;pwd&amp;rsquo;):/mnt/workspace -v /etc/localtime:/etc/localtime:ro -v ~/.ssh/id_rsa:${UHOME}/.ssh/id_rsa:ro -v ~/.gnupg:${UHOME}/.gnupg -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket -v /tmp/.X11-unix:/tmp/.X11-unix -v /etc/machine-id:/etc/machine-id:ro -e DISPLAY=$DISPLAY -e TZ=UA &amp;ndash;name spacemacs jare/spacemacs
 spacemacs 与 box  https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/win10-MobaXterm-wsl-ubuntu-spacemacs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/win10-MobaXterm-wsl-ubuntu-spacemacs.html</guid>
      <description>借助 MobaXterm 使得 wsl-ubuntu 在 win10 下可使用 spacemaces
env  host:  os: win10 MobaXterm: MobaXterm_Portable_v11.1  wsl:  os: ubuntu16 spacemaces: 26.2.0   step DESKTOP-APB1HCJ% emacs --insecure process 4212: D-Bus library appears to be incorrectly set up; failed to read machine uuid: UUID file &#39;/etc/machine-id&#39; should contain a hex string of length 32, not length 0, with no other text See the manual page for dbus-uuidgen to correct this issue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/spacemacs/win10-vcxsrv-wsl-ubuntu-xfce4-spacemacs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/spacemacs/win10-vcxsrv-wsl-ubuntu-xfce4-spacemacs.html</guid>
      <description>借助 vcxsrv 使得 wsl-ubuntu 在 win10 下可使用 spacemaces
env  host:  os: win10 vcxsrv: vcxsrv-64.1.20.1.4.installer.exe  wsl:  os: ubuntu16 spacemaces: 26.2.0 xfce4   https://www.emacswiki.org/emacs/CategoryWSL https://solarianprogrammer.com/2017/04/16/windows-susbsystem-for-linux-xfce-4/ https://emacs-china.org/t/topic/4332/1
sudo apt install xfce4</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/stock/stock.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/stock/stock.html</guid>
      <description>stock</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/svn/svn.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/svn/svn.html</guid>
      <description>svn</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/tmux/tmux.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tmux/tmux.html</guid>
      <description>tmux</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/tmux/tmuxinator-install-with-babun.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/tmux/tmuxinator-install-with-babun.html</guid>
      <description>babun 安装 tmuxinator
安装 gem { ~ } master » which gem ~ 1 gem not found { ~ } master » pact install rvm ~ 1 Working directory is /setup Mirror is http://mirrors.kernel.org/sourceware/cygwin/ setup.ini taken from the cache Installing rvm Package rvm not found or ambiguous name, exiting { ~ } master » which scoop ~ /cygdrive/c/Users/DELL/scoop/shims/scoop { ~ } master » scoop install rvm ~ 1 Couldn&#39;t find manifest for &#39;rvm&#39;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/travis/travis-build-using-a-safelist.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/travis/travis-build-using-a-safelist.html</guid>
      <description>travis分支白名单导致无法构建
手动触发
报出错误alert如下：
Oh no! You tried to trigger a build for eiuapp/linux-hugo but the request was rejected.  且 提示信息中的
Branch &amp;quot;master&amp;quot; not included per configuration.  则是 分支白名单的问题
检看.travis.yml 文件，是否对 branches.only 中设置正确
# Specify which branches to build using a safelist # 分支白名单限制: 只有hugo分支的提交才会触发构建 branches: only: - master  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-change-ufw-rules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-docker-change-ufw-rules.html</guid>
      <description>见 https://eiuapp.github.io/linux-handbook/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-reboot-cannot-ping-qq.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-reboot-cannot-ping-qq.html</guid>
      <description>虚拟机网络在vmware中配置正确，但是，重新启动后，又连接不上外网了。 这个时候，查一下
➜ ~ cat /etc/network/interfaces # interfaces(5) file used by ifup(8) and ifdown(8) auto lo iface lo inet loopback auto ens33 iface ens33 inet static address 192.168.0.103 netmask 255.255.255.0 gateway 192.168.0.1 auto ens38 iface ens38 inet dhcp #iface ens38 inet static #address 192.168.100.50 #netmask 255.255.255.0 #up ip link set dev $IFACE up #down ip link set dev $IFACE down #auto ens39 #iface ens39 inet dhcp ➜ ~ cat /etc/resolv.conf # Dynamic resolv.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-ssh-login-error-system-is-booting-up-see-pam-nologin-8.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/ubuntu/ubuntu-ssh-login-error-system-is-booting-up-see-pam-nologin-8.html</guid>
      <description> ssh无法远程连接ubuntu系统，提示System is booting up. See pam_nologin(8)
env 本机也无法登陆, 如 ssh ubuntu@127.0.0.1
os: ubuntu16
step The only way to get out of there is by pressing CTRL+ALT+F1 and then CTRL+ALT+DELETE.
先按 CTRL+ALT+F1 ，再按 CTRL+ALT+DELETE 令系统重启，就可以了。
ref  https://ubuntuforums.org/showthread.php?t=2327330  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/virtualbox/virtualbox.html</guid>
      <description>virtualbox</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/vm/vm.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vm/vm.html</guid>
      <description> 虚拟化 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-git-integrated-terminal.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vscode/vscode-git-integrated-terminal.html</guid>
      <description> vscode integrated terminal and git
env  os: win10 vscode: 1.30.2  step 我的git安装在 “D:\Program Files\Git\” 下， 最后的配置结果如下：
{ &amp;quot;git.autofetch&amp;quot;: true, &amp;quot;git.confirmSync&amp;quot;: false, &amp;quot;terminal.external.windowsExec&amp;quot;: &amp;quot;D:\\Program Files\\Git\\git-bash.exe&amp;quot;, &amp;quot;terminal.integrated.shell.windows&amp;quot;: &amp;quot;D:\\Program Files\\Git\\bin\\bash.exe&amp;quot;, &amp;quot;git.path&amp;quot;: &amp;quot;D:\\Program Files\\Git\\bin\\git.exe&amp;quot;, &amp;quot;files.eol&amp;quot;: &amp;quot;\n&amp;quot; }  如果报错 “no source control providers registered” 如果报错 “no source control providers registered”，则是 &amp;ldquo;git.path&amp;rdquo;: &amp;ldquo;D:\Program Files\Git\bin\git.exe&amp;rdquo;, 这个位置没有配置正确。
ref  https://code.visualstudio.com/docs/editor/integrated-terminal https://github.com/Microsoft/vscode/issues/61522 https://stackoverflow.com/questions/44450218/how-do-i-use-bash-on-ubuntu-on-windows-wsl-for-my-vs-code-terminal https://blog.csdn.net/weixin_40965293/article/details/80319982 https://www.jianshu.com/p/c803d5729f29  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/vscode/vscode.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/vscode/vscode.html</guid>
      <description>vscode</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/web/web.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/web/web.html</guid>
      <description> web服务器 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/weight.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/weight.html</guid>
      <description>weight key-value
open the lines with csv
ai,210, blockchain,310, cloudnative,410, kubernetes,420, docker,430, rancher,440, cloud,450, aws,460, bigdata,510, databases,520, mariadb,530, mysql,540, postgresql,550, mongodb,560, redis,570, swift,580, ceph,590, rust,610, golang,620, javascript,630, nodejs,640, npm,650, python,660, django,670, java,680, ruby,690, rails,700, rvm,710, r,720, php,730, emacs,810, spacemacs,820, vscode,830, ide,840, cli,850, yasnippet,860, babun,870, scoop,880, wechat,890, linux,910, ubuntu,920, centos,930, windows,940, macos,950, solaris,960, vagrant,970, virtualbox,980, vmware,990, vm,1000, shell,1010, bash,1020, zsh,1030, vim,1040, tmux,1050, monitor,1060, zabbix,1070, git,1110, github,1120, gitlab,1130, devops,1140, dev,1150, bitbucket,1160, cheatsheets,1170, svn,1180, travis,1190, ansible,1200, blog,1410, hugo,1420, gitbook,1430, jupyter,1440, markdown,1450, org,1460, learn,1470, resource,1480, note,1490, post,1500, hexo,1510, jekyll,1520, network,1610, nginx,1620, ngrok,1630, security,1640, chrome,1710, web,1720, vue,1730, yapi,1740, html,1750, eslint,1760, cookie,1770, yarn,1780, taro,1790, react,1800, css,1810, apps,1820, baidu,1830, analytics,1910, elixir,1920, enterprise,1930, fitness,1940, google,1950, ledger,1960, markup,1970, keyboard,2010, apple,2020, stock,3010, qor,3020, saleor,3030, learn-hugo,8010, others,9010, tools,9020, about,9030,  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/ide-windows.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/ide-windows.html</guid>
      <description>本文主要参考： 如何搭建优雅的windows开发环境 。有修改。
如何搭建优雅的windows开发环境 [2016-12-17]()
之前写过 &amp;lt;如何搭建优雅的开发环境&amp;gt; 系列(未完结)， 分章节的介绍了开发过程中使用的工具和技巧。里面也提及了 Windows 下的工具，但是不够系统，我还是很想整理一篇讲解 windows 下具体设置的文章。
[](#命令行 &amp;ldquo;命令行&amp;rdquo;)命令行 [](#PowerShell &amp;ldquo;PowerShell&amp;rdquo;)PowerShell 微软以后肯定是要用 PowerShell 替代 cmd.exe 的，所以早晚我们都会用到，就别停留在 cmd 下了，那个难易操作的终端环境，反正我是打开一次就不想再看到。如果你觉得 cmd.exe 也无所谓，那起码安装一个 clink 提升一些编辑操作。喜欢 linux 命令的朋友，还可以安装下 gow 体验 linux 命令。
但是我还是建议大家使用 PowerShell, 特别是配合 cmder(下面会提到)。可以安装一些插件来提升使用的体验。
因为 PowerShell 也更新了好几个版本，我们可以先看下如何安装or更新 PowerShell:
 How to Install How to Install Windows PowerShell 4.0  安装完成，我们使用 $PSVersionTable.PSVersion 查看下安装的版本。
关于教程，可以看看:
 Learning-powershell MSDN: PowerShell  官方的教程，但是我也没看过，有问题就上 MSDN 或 Google 上搜一下吧。
[](#插件安装 &amp;ldquo;插件安装&amp;rdquo;)插件安装 我不确定是否内置了命令 Install-Module, 因为我看到了一个模块： PsGet, 也是提供install-module 命令的, 估计是对原生的扩展吧。反正有了这个命令，我们就可以来安装模块了.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/package-manager-for-windows.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/package-manager-for-windows.html</guid>
      <description>https://www.slant.co/topics/1843/~best-windows-package-managers
本文主要介绍以下工具
package manager for Windows: * Chocolatey * Scoop * ninite * pact(in babun)  结论  请注意：win10或以上有一个 WSL。如果你支持 WSL 请使用 WSL。能在WSL完成的事情，就请不要用以下 package manager。 如果是babun用户，请直接使用 pack 。pack不能完成的任务，再考虑scoop，再考虑chocolatey scoop 和 chocolatey 将是你目前比较好的包管理工具。可以都使用 能用 scoop 安装的，就不要 chocolatey 安装。不能 scoop 安装的，都用 chocolatey 安装 两者都不能的，请安 scoop 方式定制 私人内容，用 scoop 定制 scoop 安装、卸载、更新、清理 时，清保证软件未正在被使用（这一点，是致命的缺点呀，具体原因见 h404bi 的博文）  Scoop https://www.h404bi.com/blog/2018/05/12/talk-about-scoop-the-package-manager-for-windows-again.html
https://davidsheh.github.io/2017/09/09/windows-chocolatey-scoop/
scoop 个人库 https://github.com/h404bi/dorado
chocolatey https://chocolatey.org/
vs chocolatey vs scoop https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison https://www.reddit.com/r/devops/comments/9o4si5/installing_dependencies_on_windows_do_you_use/ https://www.slant.co/versus/6470/6471/~chocolatey_vs_scoop
windows vs mac https://davidsheh.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/windows-link.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/windows-link.html</guid>
      <description>Windows的四种链接方式
如果要看明白，请参考这里 https://binarythink.net/2013/06/windows-link/
env  os: win10 cmder: 180626 preview  step 创建硬链接 并 查询 C:\Users\DELL (master -&amp;gt; origin) λ mklink /H C:\Users\DELL\Desktop\ahk.ahk C:\Users\DELL\autohotkey.ahk 为 C:\Users\DELL\Desktop\ahk.ahk &amp;lt;&amp;lt;===&amp;gt;&amp;gt; C:\Users\DELL\autohotkey.ahk 创建了硬链接 C:\Users\DELL (master -&amp;gt; origin) λ fsutil.exe hardlink list autohotkey.ahk \Users\DELL\autohotkey.ahk \Users\DELL\Desktop\ahk.ahk  如果移动了这个硬链接，系统依然可以找到的，所以不用担心。
C:\Users\DELL (master -&amp;gt; origin) λ fsutil.exe hardlink list autohotkey.ahk \Users\DELL\autohotkey.ahk \Users\DELL\Desktop\ahk.ahk C:\Users\DELL (master -&amp;gt; origin) λ fsutil.exe hardlink list autohotkey.ahk \Users\DELL\autohotkey.ahk \Users\DELL\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ahk.ahk  ref  https://binarythink.net/2013/06/windows-link/ https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/windows-wsl.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/windows-wsl.html</guid>
      <description>windows wsl 子系统 https://www.jianshu.com/p/bc38ed12da1d 此文中的环境与我的大体一致。
env win10 版本： 1703 (查看版本可 cmd 下输入winver)
找到 子系统 目录 在 文件夹下 输入 %localappdata%, 然后搜索框输入： rootfs , 则会出现结果。
我的是在 %localappdata%\lxss\rootfs 。那么说明 wsl 子系统 目录 是 %localappdata%\lxss
子系统环境(lxss目录) 备份 那最终powershell 中 运行命令如下（运行过程中视情况：1.D选择复制目录;2.选择A全选择）：
xcopy .\lxss .\lxss.20190306.bak /E/C  毕竟爱折腾，难免会把子系统环境(lxss目录)玩坏掉，因此干正事前最好先备份下以便快速还原。注意，不要直接右键复制或者打包，可能会导致文件权限丢失的。
powershell 中 运行：
&amp;gt; xcopy .\lxss .\lxss.bak /E  但是，因为某些文件，会导致文件创建错误 - 系统找不到指定的文件。 这样的错误：
Local master + = $ xcopy .\lxss\root\.nvm\test .\lxsstest /E 目标 .\lxsstest 是文件名 还是目录名 (F = 文件，D = 目录)?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/windows/windows.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/windows/windows.html</guid>
      <description>windows</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/yapi/api-format.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yapi/api-format.html</guid>
      <description>YAPI 使用
接口集合 接口定义 接口定义与使用，要近可能符合 Restful API 风格
方法 - 中文 - 英文  Get - 查询 - Get ; Post - 提交（新增） - Add, Set, Post Post, Put - 修改 - Set, Post, Put, Update Delete - 删除 - Delete  示例 （优先）
 Get - 查询用户帐户 - GetUserAccout Post - 新增用户帐户 - AddUserAccout Post, Put - 修改用户帐户 - SetUserAccount 或者 UpdateUserAccout Delete - 删除用户帐户 - DeleteUserAccout  或者</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/yapi/install-yapi-with-docker.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yapi/install-yapi-with-docker.html</guid>
      <description>yapi通过docker安装
https://github.com/Ryan-Miao/docker-yapi 学习笔记
env  os: ubuntu docker: 18.09.5  step 直接运行 index.sh vagrant@ubuntu-xenial:~/yapi$ cat index.sh #!/bin/bash git clone https://github.com/Ryan-Miao/docker-yapi.git cd docker-yapi bash build.sh 1.5.10 bash start.sh init-network bash start.sh start-mongo bash start.sh init-mongo bash start.sh init-yapi bash start.sh logs-yapi vagrant@ubuntu-xenial:~/yapi$ bash index.sh ... ... init mongodb account admin and yapi MongoDB shell version v4.0.9 connecting to: mongodb://127.0.0.1:27017/admin?gssapiServiceName=mongodb 2019-04-24T03:22:21.172+0000 E QUERY [js] Error: couldn&#39;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-practices.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/yapi/yapi-practices.html</guid>
      <description>实践 原则  前端是接口的主要发起者, 维护者 后端, 测试与前端交互, 只认YAPI中的接口与测试用例 接口, 有重大修改, 请及时通知相关人 单个接口只完成单个功能 尽可能不要在一个接口中, 返回不同的数据结构, 接口列表与测试集合要配合编写 请先经过相关人员讨论后再编写情况  返回不同的数据结构 参数表达困难 接口功能不清楚   接口列表 下面只说一些注意点, 其它不明的問同事
编辑接口 基本设置  请使用英文而不是拼音 使用 JSON 交互 当编辑完 测试集合 后, 回到接口列表打 tag  请求函数  中文名称: 操作 - 模块 - 子模块 - 功能名 英文名称: AddUserAccout 大驼峰法: 大写字母开头的驼峰  请求参数  小驼峰法: 小写字母开头的驼峰, 而不是下划线 单参数多值: ,号分隔. 如: users=a,b,c,d 如果是 不同参数值返回不同数据结构,请在 mock和测试集合 中分别加示例,并在备注中指出. 非 Get 请求均要使用 json 格式 Post 请求, 编写时,请导入 JSON 是否为必需,写准确.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/zabbix/zabbix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/zabbix/zabbix.html</guid>
      <description>zabbix</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eiuapp.github.io/eiuapp-learn/zsh/use-HOME-not-use-bolanghao-in-zshrc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/zsh/use-HOME-not-use-bolanghao-in-zshrc.html</guid>
      <description>在 编写 ~/.zshrc 的过程中，请不要使用 ~而改为使用 $HOME。
请直接看下面示例：
➜ ~ git:(master) ✗ tail -25 ~/.zshrc if [ -f &amp;quot;$HOME/.zshrc.local&amp;quot; ]; then echo &amp;quot;hello&amp;quot; else echo &amp;quot;no .zshrc.local&amp;quot; fi if [ -f &amp;quot;~/.zshrc.local&amp;quot; ]; then echo &amp;quot;hello &amp;quot; else echo &amp;quot;no .zshrc.local&amp;quot; fi echo `pwd` ➜ ~ git:(master) ✗ source ~/.zshrc hello no .zshrc.local /home/ubuntu ➜ ~ git:(master) ✗  使用 $HOME，正确。使用 ~，出错。</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://eiuapp.github.io/eiuapp-learn/about/friend.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eiuapp.github.io/eiuapp-learn/about/friend.html</guid>
      <description>.tg {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;} .tg .tg-xldj{border-color:inherit;text-align:left} .tg .tg-0lax{text-align:left;vertical-align:top}   宋净超的博客 阳明的博客 漠然 柳清风的专栏 伪架构师   ybyang2 Feisky Cizixs 李佶澳 Reliable Insights</description>
    </item>
    
  </channel>
</rss>